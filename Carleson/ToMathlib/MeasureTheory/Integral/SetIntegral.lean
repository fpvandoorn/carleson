import Mathlib.MeasureTheory.Integral.SetIntegral

open MeasureTheory

/- Put after `setIntegral_re_add_im`, but probably refactor first to use `enorm` -/

lemma ennnorm_integral_starRingEnd_mul_eq_lintegral_ennnorm
    {ùïú : Type*} [RCLike ùïú] {Œ± : Type*} [MeasurableSpace Œ±] {Œº : Measure Œ±} {f : Œ± ‚Üí ùïú}
    (hf : Integrable f Œº) :
    ‚Äñ‚à´ x, starRingEnd ùïú (f x / ‚Äñf x‚Äñ) * f x ‚àÇŒº‚Äñ‚Çä = ‚à´‚Åª x, ‚Äñf x‚Äñ‚Çä ‚àÇŒº := by
  have A x : starRingEnd ùïú (f x / ‚Äñf x‚Äñ) * f x = ‚Äñf x‚Äñ := by
    simp only [div_eq_inv_mul, map_mul, map_inv‚ÇÄ, RCLike.conj_ofReal, mul_assoc, RCLike.conj_mul]
    norm_cast
    rcases eq_or_ne (‚Äñf x‚Äñ) 0 with hx | hx
    ¬∑ simp [hx]
    ¬∑ rw [pow_two, inv_mul_cancel_left‚ÇÄ hx]
  simp_rw [A, integral_ofReal, nnnorm_algebraMap']
  rw [lintegral_coe_eq_integral]; swap
  ¬∑ simpa only [coe_nnnorm] using hf.norm
  simp only [coe_nnnorm, ENNReal.ofReal, ENNReal.coe_inj]
  have : |‚à´ (a : Œ±), ‚Äñf a‚Äñ ‚àÇŒº| = ‚à´ (a : Œ±), ‚Äñf a‚Äñ ‚àÇŒº := by
    apply abs_eq_self.2
    exact integral_nonneg (fun x ‚Ü¶ by positivity)
  conv_rhs => rw [‚Üê this]
  simp only [Real.norm_eq_abs, Real.toNNReal_abs]
  rfl

-- move to Mathlib.Analysis.Normed.Module.Basic, next to nnnorm_algebraMap'
lemma enorm_algebraMap' {ùïú : Type*} (ùïú' : Type*) [NormedField ùïú] [SeminormedRing ùïú'] [NormedAlgebra ùïú ùïú']
    [NormOneClass ùïú'] (x : ùïú) : ‚Äñ(algebraMap ùïú ùïú') x‚Äñ‚Çë = ‚Äñx‚Äñ‚Çë := by
  simp_rw [enorm_eq_nnnorm]; rw [nnnorm_algebraMap']

lemma enorm_integral_starRingEnd_mul_eq_lintegral_enorm
    {ùïú : Type*} [RCLike ùïú] {Œ± : Type*} [MeasurableSpace Œ±] {Œº : Measure Œ±} {f : Œ± ‚Üí ùïú}
    (hf : Integrable f Œº) :
    ‚Äñ‚à´ x, starRingEnd ùïú (f x / ‚Äñf x‚Äñ) * f x ‚àÇŒº‚Äñ‚Çë = ‚à´‚Åª x, ‚Äñf x‚Äñ‚Çë ‚àÇŒº := by
  have A x : starRingEnd ùïú (f x / ‚Äñf x‚Äñ) * f x = ‚Äñf x‚Äñ := by
    simp only [div_eq_inv_mul, map_mul, map_inv‚ÇÄ, RCLike.conj_ofReal, mul_assoc, RCLike.conj_mul]
    norm_cast
    rcases eq_or_ne (‚Äñf x‚Äñ) 0 with hx | hx
    ¬∑ simp [hx]
    ¬∑ rw [pow_two, inv_mul_cancel_left‚ÇÄ hx]
  simp_rw [A, integral_ofReal, enorm_algebraMap']
  simp_rw [enorm_eq_nnnorm]; rw [lintegral_coe_eq_integral]; swap
  ¬∑ simpa only [coe_nnnorm] using hf.norm
  simp only [coe_nnnorm, ENNReal.ofReal, ENNReal.coe_inj]
  have : |‚à´ (a : Œ±), ‚Äñf a‚Äñ ‚àÇŒº| = ‚à´ (a : Œ±), ‚Äñf a‚Äñ ‚àÇŒº := by
    apply abs_eq_self.2
    exact integral_nonneg (fun x ‚Ü¶ by positivity)
  conv_rhs => rw [‚Üê this]
  simp only [Real.norm_eq_abs, Real.toNNReal_abs]
  rfl
