import Mathlib.MeasureTheory.Integral.MeanInequalities
import Mathlib.MeasureTheory.Integral.Layercake
import Mathlib.MeasureTheory.Integral.Lebesgue.Basic
import Mathlib.MeasureTheory.Measure.Lebesgue.EqHaar
import Mathlib.Analysis.SpecialFunctions.Pow.Integral
import Carleson.ToMathlib.ENorm
import Carleson.ToMathlib.Misc
import Carleson.ToMathlib.WeakType
import Carleson.ToMathlib.MeasureTheory.Measure.NNReal


noncomputable section

open scoped NNReal ENNReal

variable {Œ± Œµ Œµ' E F G : Type*} {m m0 : MeasurableSpace Œ±} {p : ‚Ñù‚â•0‚àû} {q : ‚Ñù}
  [NormedAddCommGroup E] [NormedAddCommGroup F] [NormedAddCommGroup G] [ENorm Œµ] [ENorm Œµ']


namespace MeasureTheory

def decreasing_rearrangement (f : Œ± ‚Üí Œµ) (Œº : Measure Œ±) (t : ‚Ñù‚â•0) : ‚Ñù‚â•0 :=
  sInf {œÉ | distribution f œÉ Œº ‚â§ t}

lemma decreasing_rearrangement_antitone {f : Œ± ‚Üí Œµ} {Œº : Measure Œ±} :
    Antitone (decreasing_rearrangement f Œº) := sorry

#check NNReal.measurableSpace


lemma distribution_decreasing_rearrangement (f : Œ± ‚Üí Œµ) (Œº : Measure Œ±) (t : ‚Ñù‚â•0):
  distribution f t Œº = distribution (decreasing_rearrangement f Œº) t volume := sorry

section Lorentz

/-
/-- The Lorentz norm of a function, for `r < ‚àû` -/
def eLorentzNorm' (f : Œ± ‚Üí Œµ) (p : ‚Ñù‚â•0‚àû) (r : ‚Ñù‚â•0) (Œº : Measure Œ±) : ‚Ñù‚â•0‚àû :=
  eLpNorm (fun t ‚Ü¶ t ^ p‚Åª¬π.toReal * decreasing_rearrangement f Œº t) r
    (Measure.Subtype.measureSpace.volume.withDensity (fun (t : ‚Ñù‚â•0) ‚Ü¶ t‚Åª¬π))

/-- The Lorentz norm of a function, for `r = ‚àû` -/
def eLorentzNormSup (f : Œ± ‚Üí Œµ) (p : ‚Ñù‚â•0‚àû) (Œº : Measure Œ±) :=
  ‚®Ü t : ‚Ñù‚â•0, t ^ p‚Åª¬π.toReal * decreasing_rearrangement f Œº t
-/


/-- The Lorentz norm of a function -/
/-
def eLorentzNorm (f : Œ± ‚Üí Œµ) (p : ‚Ñù‚â•0‚àû) (r : ‚Ñù‚â•0‚àû) (Œº : Measure Œ±) : ‚Ñù‚â•0‚àû :=
  if r = 0 then 0 else if r = ‚àû then eLorentzNormSup f p Œº else eLorentzNorm' f p r.toNNReal Œº
-/
def eLorentzNorm (f : Œ± ‚Üí Œµ) (p : ‚Ñù‚â•0‚àû) (r : ‚Ñù‚â•0‚àû) (Œº : Measure Œ±) : ‚Ñù‚â•0‚àû :=
  p ^ r‚Åª¬π.toReal * eLpNorm (fun (t : ‚Ñù‚â•0) ‚Ü¶ t * distribution f t Œº) r
    (volume.withDensity (fun (t : ‚Ñù‚â•0) ‚Ü¶ t‚Åª¬π))

/- Alternative definition. Not used at the moment. -/
lemma eLorentzNorm_eq {f : Œ± ‚Üí Œµ} {p : ‚Ñù‚â•0‚àû} {r : ‚Ñù‚â•0‚àû} {Œº : Measure Œ±} :
    eLorentzNorm f p r Œº
      = eLpNorm (fun t ‚Ü¶ t ^ p‚Åª¬π.toReal * decreasing_rearrangement f Œº t) r
          (volume.withDensity (fun (t : ‚Ñù‚â•0) ‚Ü¶ t‚Åª¬π)) := sorry

lemma eLorentzNorm_eq_Lp {f : Œ± ‚Üí Œµ} {p : ‚Ñù‚â•0‚àû} {Œº : Measure Œ±} :
  eLorentzNorm f p p Œº = eLpNorm f p Œº := sorry

lemma eLorentzNorm_eq_wnorm {f : Œ± ‚Üí Œµ} {p : ‚Ñù‚â•0‚àû} {Œº : Measure Œ±} :
  eLorentzNorm f p ‚àû Œº = wnorm f p Œº := sorry

variable [TopologicalSpace Œµ] [ContinuousENorm Œµ]
/-- A function is in the Lorentz space L_{pr} if it is (strongly a.e.)-measurable and has finite Lorentz norm. -/
def MemLorentz (f : Œ± ‚Üí Œµ) (p r : ‚Ñù‚â•0‚àû) (Œº : Measure Œ±) : Prop :=
  AEStronglyMeasurable f Œº ‚àß eLorentzNorm f p r Œº < ‚àû

-- TODO: could maybe be strengthened to ‚Üî
lemma MemLorentz_nested {f : Œ± ‚Üí Œµ} {p r‚ÇÅ r‚ÇÇ : ‚Ñù‚â•0‚àû} {Œº : Measure Œ±}
  (h : r‚ÇÅ ‚â§ r‚ÇÇ) (hf : MemLorentz f p r‚ÇÅ Œº) :
    MemLorentz f p r‚ÇÇ Œº := sorry


variable {Œ±' Œµ‚ÇÅ Œµ‚ÇÇ : Type*} {m : MeasurableSpace Œ±'} [TopologicalSpace Œµ‚ÇÅ] [ContinuousENorm Œµ‚ÇÅ]
    [TopologicalSpace Œµ‚ÇÇ] [ContinuousENorm Œµ‚ÇÇ] --[TopologicalSpace Œµ‚ÇÉ] [ContinuousENorm Œµ‚ÇÉ]
    {f : Œ± ‚Üí Œµ} {f‚ÇÅ : Œ± ‚Üí Œµ‚ÇÅ}


def HasLorentzType (T : (Œ± ‚Üí Œµ‚ÇÅ) ‚Üí (Œ±' ‚Üí Œµ‚ÇÇ))
    (p r q s : ‚Ñù‚â•0‚àû) (Œº : Measure Œ±) (ŒΩ : Measure Œ±') (c : ‚Ñù‚â•0‚àû) : Prop :=
  ‚àÄ f : Œ± ‚Üí Œµ‚ÇÅ, MemLorentz f p r Œº ‚Üí AEStronglyMeasurable (T f) ŒΩ ‚àß eLorentzNorm (T f) q s ŒΩ ‚â§ c * eLorentzNorm f p r Œº


--TODO: what exactly should be the requirements on ùïÇ? Actually, we only need a 1 here.
--TODO: This could be more general, it currently assumes T f ‚â• 0
variable {ùïÇ : Type*} [TopologicalSpace ùïÇ] [ContinuousENorm ùïÇ] [NormedField ùïÇ]
def HasRestrictedWeakType (T : (Œ± ‚Üí ùïÇ) ‚Üí (Œ±' ‚Üí Œµ‚ÇÇ)) (p p' : ‚Ñù‚â•0‚àû) (Œº : Measure Œ±) (ŒΩ : Measure Œ±')
    (c : ‚Ñù‚â•0‚àû) : Prop :=
  ‚àÄ (F : Set Œ±) (G : Set Œ±'), (MeasurableSet F) ‚Üí (Œº F < ‚àû) ‚Üí (MeasurableSet G) ‚Üí (ŒΩ G < ‚àû) ‚Üí
    AEStronglyMeasurable (T (F.indicator (fun _ ‚Ü¶ 1))) ŒΩ ‚àß
      eLpNorm (T (F.indicator (fun _ ‚Ü¶ 1))) 1 (ŒΩ.restrict G) ‚â§ c * (Œº F) ^ p‚Åª¬π.toReal * (ŒΩ G) ^ p'‚Åª¬π.toReal

lemma HasRestrictedWeakType.HasLorentzType {T : (Œ± ‚Üí ùïÇ) ‚Üí (Œ±' ‚Üí Œµ‚ÇÇ)} {p p' : ‚Ñù‚â•0‚àû} {Œº : Measure Œ±} {ŒΩ : Measure Œ±'}
  {c : ‚Ñù‚â•0‚àû} (hT : HasRestrictedWeakType T p p' Œº ŒΩ c) (hpp' : p.HolderConjugate p') :
    --TODO: might have to adjust the constant
    HasLorentzType T p 1 p ‚àû Œº ŒΩ c := by
  intro f hf
  have claim : ‚àÄ (G : Set Œ±'), (MeasurableSet G) ‚Üí (ŒΩ G < ‚àû) ‚Üí eLpNorm (T f) 1 (ŒΩ.restrict G)
    ‚â§ c * eLorentzNorm f p 1 Œº * (ŒΩ G) ^ p'‚Åª¬π.toReal := by
      -- Get this for simple functions first?
      sorry
  -- Apply claim to a special G
  sorry
