import Carleson.ToMathlib.MeasureTheory.Measure.NNReal
import Carleson.ToMathlib.WeakType

noncomputable section

open scoped NNReal ENNReal

variable {Œ± Œµ Œµ' : Type*} {m m0 : MeasurableSpace Œ±}

namespace MeasureTheory

/-
section decreasing_rearrangement
variable [ENorm Œµ] [ENorm Œµ']

def decreasing_rearrangement (f : Œ± ‚Üí Œµ) (Œº : Measure Œ±) (t : ‚Ñù‚â•0) : ‚Ñù‚â•0 :=
  sInf {œÉ | distribution f œÉ Œº ‚â§ t}

lemma decreasing_rearrangement_antitone {f : Œ± ‚Üí Œµ} {Œº : Measure Œ±} :
    Antitone (decreasing_rearrangement f Œº) := sorry

lemma distribution_decreasing_rearrangement (f : Œ± ‚Üí Œµ) (Œº : Measure Œ±) (t : ‚Ñù‚â•0):
  distribution f t Œº = distribution (decreasing_rearrangement f Œº) t volume := sorry

end decreasing_rearrangement
-/

section Lorentz

variable [ENorm Œµ] [TopologicalSpace Œµ'] [ENormedAddMonoid Œµ'] {p : ‚Ñù‚â•0‚àû} {q : ‚Ñù}


/-- The Lorentz norm of a function, for `p < ‚àû` -/
def eLorentzNorm' (f : Œ± ‚Üí Œµ) (p : ‚Ñù‚â•0‚àû) (r : ‚Ñù‚â•0‚àû) (Œº : Measure Œ±) : ‚Ñù‚â•0‚àû :=
  p ^ r‚Åª¬π.toReal * eLpNorm (fun (t : ‚Ñù‚â•0) ‚Ü¶ t * distribution f t Œº ^ p‚Åª¬π.toReal) r
    (volume.withDensity (fun (t : ‚Ñù‚â•0) ‚Ü¶ t‚Åª¬π))

/-- The Lorentz norm of a function -/
def eLorentzNorm (f : Œ± ‚Üí Œµ) (p : ‚Ñù‚â•0‚àû) (r : ‚Ñù‚â•0‚àû) (Œº : Measure Œ±) : ‚Ñù‚â•0‚àû :=
  if p = 0 then 0 else if p = ‚àû then (if r = 0 then 0 else if r = ‚àû then eLpNormEssSup f Œº else ‚àû * eLpNormEssSup f Œº)
  else eLorentzNorm' f p r Œº

variable {f : Œ± ‚Üí Œµ} {p : ‚Ñù‚â•0‚àû} {r : ‚Ñù‚â•0‚àû} {Œº : Measure Œ±}

@[simp]
lemma eLorentzNorm_eq_eLorentzNorm' (hp_ne_zero : p ‚â† 0) (hp_ne_top : p ‚â† ‚àû) :
    eLorentzNorm f p r Œº = eLorentzNorm' f p r Œº := by
  unfold eLorentzNorm
  simp [hp_ne_zero, hp_ne_top]

@[simp]
lemma eLorentzNorm_zero (hp : p = 0) : eLorentzNorm f p r Œº = 0 := by simp [eLorentzNorm, hp]

@[simp]
lemma eLorentzNorm_zero' (hr : r = 0) : eLorentzNorm f p r Œº = 0 := by
  simp [hr, eLorentzNorm, eLorentzNorm']


--TODO: make this an iff, for p, r ‚â† 0?
lemma eLorentzNorm_zero_of_ae_zero {f : Œ± ‚Üí Œµ'} (h : f =·µê[Œº] 0) : eLorentzNorm f p r Œº = 0 := by
  simp only [eLorentzNorm, ite_eq_left_iff]
  intro p_ne_zero
  rw [eLpNormEssSup_eq_zero_iff.mpr h]
  simp only [mul_zero, ite_self, ite_eq_left_iff]
  intro p_ne_top
  unfold eLorentzNorm'
  conv in ‚Üët * distribution f _ Œº ^ p‚Åª¬π.toReal =>
    rw [distribution_zero h,
    ENNReal.zero_rpow_of_pos (by simp only [ENNReal.toReal_inv, inv_pos]; apply ENNReal.toReal_pos p_ne_zero p_ne_top),
    mul_zero]
  simp

/-
/- Alternative definition. Not used at the moment. -/
lemma eLorentzNorm_eq {f : Œ± ‚Üí Œµ} {p : ‚Ñù‚â•0‚àû} {r : ‚Ñù‚â•0‚àû} {Œº : Measure Œ±} :
    eLorentzNorm f p r Œº
      = eLpNorm (fun t ‚Ü¶ t ^ p‚Åª¬π.toReal * decreasing_rearrangement f Œº t) r
          (volume.withDensity (fun (t : ‚Ñù‚â•0) ‚Ü¶ t‚Åª¬π)) := sorry
-/

@[simp]
lemma eLorentzNorm_top_top {f : Œ± ‚Üí Œµ} : eLorentzNorm f ‚àû ‚àû Œº = eLpNormEssSup f Œº := by
  simp [eLorentzNorm]

lemma eLorentzNorm_eq_Lp {f : Œ± ‚Üí Œµ'} (hf : AEStronglyMeasurable f Œº) :
  eLorentzNorm f p p Œº = eLpNorm f p Œº := by
  by_cases p_zero : p = 0
  ¬∑ simp [p_zero]
  by_cases p_eq_top : p = ‚àû
  ¬∑ simp [p_eq_top]
  have p_eq : p = .ofReal p.toReal := by simp [p_eq_top]
  simp only [eLorentzNorm, eLorentzNorm', p_zero, ‚ÜìreduceIte, p_eq_top]
  calc _
    _ = (ENNReal.ofReal p.toReal  * ‚à´‚Åª t in Set.Ioi (0 : ‚Ñù), distribution f (.ofReal t) Œº *
      ENNReal.ofReal t ^ (p.toReal - 1) ) ^ p‚Åª¬π.toReal := by
        rw [‚Üê p_eq, eLpNorm_eq_eLpNorm' p_zero p_eq_top, eLpNorm'_eq_lintegral_enorm,
          ENNReal.mul_rpow_of_nonneg, lintegral_withDensity_eq_lintegral_mul_non_measurable]
        ¬∑ simp only [ENNReal.toReal_inv, enorm_eq_self, one_div]
          congr 2
          simp only [Pi.mul_apply]
          rw [lintegral_nnreal_eq_lintegral_Ioi_ofReal
            (f := fun x ‚Ü¶ x‚Åª¬π * (x * distribution f x Œº ^ p.toReal‚Åª¬π)^ p.toReal)]
          apply setLIntegral_congr_fun measurableSet_Ioi
          intro t ht
          simp only
          rw [ENNReal.mul_rpow_of_nonneg _ _ (by simp), ‚Üê mul_assoc, ‚Üê ENNReal.rpow_neg_one,
              ‚Üê ENNReal.rpow_add _ _ (by simpa) (by simp), mul_comm]
          congr 2
          ¬∑ rw [‚Üê ENNReal.rpow_mul, inv_mul_cancel‚ÇÄ (ENNReal.toReal_ne_zero.mpr ‚ü®p_zero, p_eq_top‚ü©),
              ENNReal.rpow_one]
          ¬∑ exact neg_add_eq_sub 1 p.toReal
        ¬∑ exact Measurable.inv measurable_coe_nnreal_ennreal
        ¬∑ rw[Filter.eventually_iff_exists_mem]
          use {x | x ‚â† 0}
          constructor
          ¬∑ refine mem_ae_iff.mpr ?_
            rw [NNReal.volume_val]
            simp
          ¬∑ intro x hx
            rw[ENNReal.inv_lt_top, ENNReal.coe_pos]
            exact pos_of_ne_zero hx
        ¬∑ simp
    _ = (ENNReal.ofReal p.toReal  * ‚à´‚Åª t in Set.Ioi (0 : ‚Ñù), distribution f (.ofReal t) Œº *
      ENNReal.ofReal (t ^ (p.toReal - 1)) ) ^ p.toReal‚Åª¬π := by
        rw [ENNReal.toReal_inv]
        congr 2
        apply setLIntegral_congr_fun measurableSet_Ioi
        intro t ht
        simp [ENNReal.ofReal_rpow_of_pos ht]
    _ = eLpNorm f (.ofReal p.toReal) Œº := (eLpNorm_eq_distribution hf (ENNReal.toReal_pos p_zero p_eq_top)).symm
    _ = eLpNorm f p Œº := by congr; exact p_eq.symm

lemma eLorentzNorm_eq_wnorm (hp : p ‚â† 0) : eLorentzNorm f p ‚àû Œº = wnorm f p Œº := by
  by_cases p_eq_top : p = ‚àû
  ¬∑ rw [p_eq_top]
    simp
  rw [eLorentzNorm_eq_eLorentzNorm' hp p_eq_top, wnorm_ne_top p_eq_top]
  unfold eLorentzNorm' wnorm'
  simp only [ENNReal.inv_top, ENNReal.toReal_zero, ENNReal.rpow_zero, ENNReal.toReal_inv,
    eLpNorm_exponent_top, one_mul]
  unfold eLpNormEssSup
  --rw [Continuous.essSup]
  simp only [enorm_eq_self]
  --TODO: somehow use continuity properties of the distribution function here
  sorry

variable [TopologicalSpace Œµ] [ContinuousENorm Œµ]
/-- A function is in the Lorentz space L_{pr} if it is (strongly a.e.)-measurable and has finite Lorentz norm. -/
def MemLorentz (f : Œ± ‚Üí Œµ) (p r : ‚Ñù‚â•0‚àû) (Œº : Measure Œ±) : Prop :=
  AEStronglyMeasurable f Œº ‚àß eLorentzNorm f p r Œº < ‚àû

-- TODO: could maybe be strengthened to an iff
lemma memLorentz_nested {r‚ÇÅ r‚ÇÇ : ‚Ñù‚â•0‚àû} (h : r‚ÇÅ ‚â§ r‚ÇÇ) (hf : MemLorentz f p r‚ÇÅ Œº) :
    MemLorentz f p r‚ÇÇ Œº := sorry

variable {Œ±' Œµ‚ÇÅ Œµ‚ÇÇ : Type*} {m : MeasurableSpace Œ±'} [TopologicalSpace Œµ‚ÇÅ] [ContinuousENorm Œµ‚ÇÅ]
    [TopologicalSpace Œµ‚ÇÇ] [ContinuousENorm Œµ‚ÇÇ] {f : Œ± ‚Üí Œµ} {f‚ÇÅ : Œ± ‚Üí Œµ‚ÇÅ}

/-- An operator has Lorentz type `(p, r, q, s)` if it is bounded as a map
from `L^{q, s}` to `L^{p, r}`. `HasLorentzType T p r q s Œº ŒΩ c` means that
`T` has Lorentz type `(p, r, q, s)` w.r.t. measures `Œº`, `ŒΩ` and constant `c`. -/
def HasLorentzType (T : (Œ± ‚Üí Œµ‚ÇÅ) ‚Üí (Œ±' ‚Üí Œµ‚ÇÇ))
    (p r q s : ‚Ñù‚â•0‚àû) (Œº : Measure Œ±) (ŒΩ : Measure Œ±') (c : ‚Ñù‚â•0‚àû) : Prop :=
  ‚àÄ f : Œ± ‚Üí Œµ‚ÇÅ, MemLorentz f p r Œº ‚Üí AEStronglyMeasurable (T f) ŒΩ ‚àß
    eLorentzNorm (T f) q s ŒΩ ‚â§ c * eLorentzNorm f p r Œº

/-
-- TODO: find better name
lemma HasLorentzType_p_infty_qs {T : (Œ± ‚Üí Œµ‚ÇÅ) ‚Üí (Œ±' ‚Üí Œµ‚ÇÇ)} {p q s : ‚Ñù‚â•0‚àû}
  {Œº : Measure Œ±} {ŒΩ : Measure Œ±'} {c : ‚Ñù‚â•0‚àû} (h : 0 < c) (hT : AEStronglyMeasurable (T f) ŒΩ) :
  HasLorentzType T p ‚àû q s Œº ŒΩ c := by
  intro f hf
-/

--TODO: what exactly should be the requirements on ùïÇ? Actually, we only need a 1 here.
--TODO: This could be more general, it currently assumes T f ‚â• 0
variable {ùïÇ : Type*} [TopologicalSpace ùïÇ] [ContinuousENorm ùïÇ] [NormedField ùïÇ]

/-- Defines when an operator "has restricted weak type". This is an even weaker version
of `HasBoundedWeakType`. -/
def HasRestrictedWeakType (T : (Œ± ‚Üí ùïÇ) ‚Üí (Œ±' ‚Üí Œµ‚ÇÇ)) (p p' : ‚Ñù‚â•0‚àû) (Œº : Measure Œ±) (ŒΩ : Measure Œ±')
    (c : ‚Ñù‚â•0‚àû) : Prop :=
  ‚àÄ (F : Set Œ±) (G : Set Œ±'), (MeasurableSet F) ‚Üí (Œº F < ‚àû) ‚Üí (MeasurableSet G) ‚Üí (ŒΩ G < ‚àû) ‚Üí
    AEStronglyMeasurable (T (F.indicator (fun _ ‚Ü¶ 1))) ŒΩ ‚àß
      eLpNorm (T (F.indicator (fun _ ‚Ü¶ 1))) 1 (ŒΩ.restrict G)
        ‚â§ c * (Œº F) ^ p‚Åª¬π.toReal * (ŒΩ G) ^ p'‚Åª¬π.toReal

lemma HasRestrictedWeakType.hasLorentzType /- [MeasurableSpace Œµ'] [BorelSpace Œµ'] -/
  {T : (Œ± ‚Üí ùïÇ) ‚Üí (Œ±' ‚Üí Œµ')} {p p' : ‚Ñù‚â•0‚àû}
  {Œº : Measure Œ±} {ŒΩ : Measure Œ±'} {c : ‚Ñù‚â•0‚àû}
  (hT : HasRestrictedWeakType T p p' Œº ŒΩ c) (hpp' : p.HolderConjugate p') :
    --TODO: might have to adjust the constant
    HasLorentzType T p 1 p ‚àû Œº ŒΩ c := by
  intro f hf
  have claim : ‚àÄ (G : Set Œ±'), (MeasurableSet G) ‚Üí (ŒΩ G < ‚àû) ‚Üí eLpNorm (T f) 1 (ŒΩ.restrict G)
    ‚â§ c * eLorentzNorm f p 1 Œº * (ŒΩ G) ^ p'‚Åª¬π.toReal := by
      -- Get this for simple functions first?
      sorry
  -- Apply claim to a special G
  --let G := {x | ‚ÄñT x‚Äñ‚Çë > }
  constructor
  ¬∑ sorry
  ¬∑ by_cases h : p = ‚ä§
    ¬∑ rw [h]
      rw [eLorentzNorm_eq_Lp sorry]
      by_cases h' : f =·µê[Œº] 0
      ¬∑ sorry
      ¬∑ sorry
    ¬∑ rw [eLorentzNorm_eq_wnorm sorry, wnorm_ne_top h]
      unfold wnorm'
      apply iSup_le
      intro l
      unfold distribution
      set G := {x | ‚Üël < ‚ÄñT f x‚Äñ‚Çë}
--      set G'
      --rw [div_le_div__right]
      calc _
        _ = ‚Üël * ŒΩ G / ŒΩ G ^ p'‚Åª¬π.toReal := by
          rw [mul_div_assoc]
          congr
          rw [ENNReal.holderConjugate_iff] at hpp'
          rw [ENNReal.eq_div_iff sorry sorry, ‚Üê ENNReal.rpow_add, ‚Üê ENNReal.toReal_inv, ‚Üê ENNReal.toReal_add, add_comm, hpp']
          ¬∑ simp only [ENNReal.toReal_one, ENNReal.rpow_one]
          ¬∑ rw [ne_eq, ENNReal.inv_eq_top]
            sorry
          ¬∑ rw [ne_eq, ENNReal.inv_eq_top]
            sorry
          ¬∑ sorry
          ¬∑ sorry
        _ ‚â§ (‚à´‚Åª (x : Œ±') in G, ‚ÄñT f x‚Äñ‚Çë ‚àÇŒΩ) / ŒΩ G ^ p'‚Åª¬π.toReal := by
          gcongr
          --rw [setLIntegral]
          rw [‚Üê Measure.restrict_eq_self _ (subset_refl G)]
          calc _
            _ ‚â§ ‚Üël * (ŒΩ.restrict G) {x | ‚Üël ‚â§ ‚ÄñT f x‚Äñ‚Çë} := by
              gcongr
              intro x hx
              unfold G at hx
              rw [Set.mem_setOf_eq] at hx ‚ä¢; exact hx.le
          apply mul_meas_ge_le_lintegral‚ÇÄ
          sorry
        _ = eLpNorm (T f) 1 (ŒΩ.restrict G) / ŒΩ G ^ p'‚Åª¬π.toReal := by
          rw [eLpNorm_one_eq_lintegral_enorm]
        _ ‚â§ (c * eLorentzNorm f p 1 Œº * ŒΩ G ^ p'‚Åª¬π.toReal) / ŒΩ G ^ p'‚Åª¬π.toReal := by
          gcongr
          apply claim
          ¬∑ sorry
          ¬∑ sorry
        _ ‚â§ c * eLorentzNorm f p 1 Œº * 1 := by
          rw [mul_div_assoc]
          gcongr
          exact ENNReal.div_self_le_one
        _ = c * eLorentzNorm f p 1 Œº := by ring

end Lorentz

end MeasureTheory
