import Mathlib.MeasureTheory.Function.LpSeminorm.Basic

noncomputable section

open ENNReal NNReal Function Set

variable {Œ± Œ±' E E‚ÇÅ E‚ÇÇ : Type*}

@[simp] lemma enorm_toReal_le {x : ‚Ñù‚â•0‚àû} : ‚Äñx.toReal‚Äñ‚Çë ‚â§ x := by simp [‚Üê ofReal_norm, ofReal_toReal_le]

@[simp] lemma enorm_toReal {x : ‚Ñù‚â•0‚àû} (hx : x ‚â† ‚ä§) : ‚Äñx.toReal‚Äñ‚Çë = x := by
  simp [hx, ‚Üê ofReal_norm_eq_enorm]

@[simp] lemma enorm_NNReal {x : ‚Ñù‚â•0} : ‚Äñx‚Äñ‚Çë = x := by rfl

-- TODO appropriate generality (ENormedDivisionSemiring?), for ‚Ñù‚â•0 it is already there
-- @[simp] lemma enorm_inv'' {a : ‚Ñù‚â•0} (ha : a ‚â† 0): ‚Äña‚Åª¬π‚Äñ‚Çë = ‚Äña‚Äñ‚Çë‚Åª¬π := by
--   simp_rw [enorm_NNReal, coe_inv ha]

/-- An enormed monoid is an additive monoid endowed with a continuous enorm.
Note: not sure if this is the "right" class to add to Mathlib. -/
class ENormedAddCommSubMonoid (E : Type*) [TopologicalSpace E] extends ENormedAddCommMonoid E, Sub E where
  sub_add_cancel_of_enorm_le : ‚àÄ ‚¶Éx y : E‚¶Ñ, ‚Äñy‚Äñ‚Çë ‚â§ ‚Äñx‚Äñ‚Çë ‚Üí x - y + y = x
  add_right_cancel_of_enorm_lt_top : ‚àÄ ‚¶Éx : E‚¶Ñ, ‚Äñx‚Äñ‚Çë < ‚ä§ ‚Üí ‚àÄ {y z : E}, y + x = z + x ‚Üí y = z
  esub_self : ‚àÄ x : E, x - x = 0

/-- An enormed space is an additive monoid endowed with a continuous enorm.
Note: not sure if this is the "right" class to add to Mathlib. -/
class ENormedSpace (E : Type*) [TopologicalSpace E] extends ENormedAddCommMonoid E, Module ‚Ñù‚â•0 E where
  enorm_smul_eq_smul : ‚àÄ (c : ‚Ñù‚â•0) (x : E), ‚Äñc ‚Ä¢ x‚Äñ‚Çë = c ‚Ä¢ ‚Äñx‚Äñ‚Çë

export ENormedAddCommSubMonoid
  (sub_add_cancel_of_enorm_le add_right_cancel_of_enorm_lt_top esub_self)
export ENormedSpace (enorm_smul_eq_smul)

-- mathlib has this (in the _root_ namespace), in a less general setting
attribute [simp] ENormedSpace.enorm_smul_eq_smul

instance : ENormedSpace ‚Ñù‚â•0‚àû where
  enorm := id
  enorm_eq_zero := by simp
  -- enorm_neg := by simp
  enorm_add_le := by simp
  add_comm := by simp [add_comm]
  continuous_enorm := continuous_id
  enorm_smul_eq_smul := by simp
  add_smul := fun _ _ _ ‚Ü¶ Module.add_smul ..
  zero_smul := by simp

instance : ENormedSpace ‚Ñù‚â•0 where
  enorm := ofNNReal
  add_smul r s x := by
    simp only [smul_eq_mul]
    ring
  zero_smul := by simp
  enorm_eq_zero := by simp
  enorm_add_le := by simp
  add_comm := by simp [add_comm]
  continuous_enorm := by fun_prop
  enorm_smul_eq_smul c x := by simp [ENNReal.smul_def]

instance [NormedAddCommGroup E] [NormedSpace ‚Ñù E] : ENormedSpace E where
  enorm_smul_eq_smul := by
    simp_rw [enorm_eq_nnnorm, ENNReal.smul_def, NNReal.smul_def, nnnorm_smul]; simp

namespace MeasureTheory

section ContinuousENorm
variable {Œ± E : Type*} {m : MeasurableSpace Œ±} [TopologicalSpace E] [ContinuousENorm E] {Œº : Measure Œ±}

variable {Œµ Œµ' : Type*} [TopologicalSpace Œµ] [ContinuousENorm Œµ]
  [TopologicalSpace Œµ'] [ContinuousENorm Œµ']

end ContinuousENorm

lemma esub_zero [TopologicalSpace E] [ENormedAddCommSubMonoid E] {x : E} : x - 0 = x := by
  rw [‚Üê add_zero (x - 0)]
  apply sub_add_cancel_of_enorm_le
  simp_rw [enorm_zero, zero_le]

section ENormedSpace

variable {Œµ : Type*} [TopologicalSpace Œµ] [ENormedSpace Œµ]

-- TODO: this lemma and Mathlib's `enorm_smul` could be unified using a `ENormedDivisionSemiring`
-- typeclass
-- (which includes ENNReal and normed fields like ‚Ñù and ‚ÑÇ), i.e. assuming ùïú is a normed semifield.
-- Investigate if this is worthwhile when upstreaming this to mathlib.
lemma enorm_smul_eq_mul {c : ‚Ñù‚â•0} (z : Œµ) : ‚Äñc ‚Ä¢ z‚Äñ‚Çë = ‚Äñc‚Äñ‚Çë * ‚Äñz‚Äñ‚Çë :=
  ENormedSpace.enorm_smul_eq_smul _ _

instance : ContinuousConstSMul ‚Ñù‚â•0 ‚Ñù‚â•0‚àû where
  continuous_const_smul t := ENNReal.continuous_const_mul (by simp)

open MeasureTheory

-- TODO: put next to MeasureTheory.eLpNorm_const_smul_le (which perhaps can stay)
theorem eLpNorm_const_nnreal_smul_le {Œ± : Type*} {m0 : MeasurableSpace Œ±} {p : ‚Ñù‚â•0‚àû}
  {Œº : Measure Œ±} {c : ‚Ñù‚â•0} {f : Œ± ‚Üí Œµ} : eLpNorm (c ‚Ä¢ f) p Œº ‚â§ ‚Äñc‚Äñ‚Çë * eLpNorm f p Œº := by
  apply eLpNorm_le_nnreal_smul_eLpNorm_of_ae_le_mul' (p := p) ?_
  filter_upwards with x using by simp [ENNReal.smul_def]

-- TODO: put next to eLpNorm_const_smul
theorem eLpNorm_const_smul' {Œ± : Type*} {m0 : MeasurableSpace Œ±} {p : ‚Ñù‚â•0‚àû}
  {Œº : Measure Œ±} {c : ‚Ñù‚â•0} {f : Œ± ‚Üí Œµ} :
    eLpNorm (c ‚Ä¢ f) p Œº = ‚Äñc‚Äñ‚Çë * eLpNorm f p Œº := by
  obtain rfl | hc := eq_or_ne c 0
  ¬∑ simp
  refine le_antisymm eLpNorm_const_nnreal_smul_le <| ENNReal.mul_le_of_le_div' ?_
  simpa [ENNReal.div_eq_inv_mul, hc] using eLpNorm_const_nnreal_smul_le (c := c‚Åª¬π) (f := c ‚Ä¢ f)

-- TODO: put next to the unprimed version; perhaps both should stay
lemma eLpNormEssSup_const_nnreal_smul_le {Œ± : Type*} {m0 : MeasurableSpace Œ±} {Œº : Measure Œ±}
    {c : ‚Ñù‚â•0} {f : Œ± ‚Üí Œµ} : eLpNormEssSup (c ‚Ä¢ f) Œº ‚â§ ‚Äñc‚Äñ‚Çë * eLpNormEssSup f Œº := by
  have (x : Œ±) : ‚Äñ(c ‚Ä¢ f) x‚Äñ‚Çë ‚â§ ‚Üëc * ‚Äñf x‚Äñ‚Çë := by simp [ENNReal.smul_def]
  apply eLpNormEssSup_le_nnreal_smul_eLpNormEssSup_of_ae_le_mul'
  filter_upwards with x using this x

end ENormedSpace

end MeasureTheory
