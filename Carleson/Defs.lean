import Carleson.HomogeneousType

open MeasureTheory Measure NNReal Metric Complex Set TopologicalSpace Bornology
open scoped ENNReal
noncomputable section


/-! Miscellaneous definitions.
We should move them to separate files once we start proving things about them. -/

variable {X : Type*} {A : ‚Ñù} [PseudoMetricSpace X] [IsSpaceOfHomogeneousType X A]

section localOscillation

/-- The local oscillation of two functions. -/
def localOscillation (E : Set X) (f g : C(X, ‚ÑÇ)) : ‚Ñù :=
  ‚®Ü z ‚àà E √óÀ¢ E, ‚Äñf z.1 - g z.1 - f z.2 + g z.2‚Äñ

example (E : Set X) (hE : IsBounded E) (f : C(X, ‚Ñù)) :
    BddAbove (range fun z : E ‚Ü¶ f z) := by
  have : IsCompact (closure E) := IsBounded.isCompact_closure hE
  sorry

lemma bddAbove_localOscillation (E : Set X) [Fact (IsBounded E)] (f g : C(X, ‚ÑÇ)) :
    BddAbove ((fun z : X √ó X ‚Ü¶ ‚Äñf z.1 - g z.1 - f z.2 + g z.2‚Äñ) '' E √óÀ¢ E) := sorry

set_option linter.unusedVariables false in
/-- A type synonym of `C(X, ‚ÑÇ)` that uses the local oscillation w.r.t. `E` as the metric. -/
def withLocalOscillation (E : Set X) [Fact (IsBounded E)] : Type _ := C(X, ‚ÑÇ)

instance withLocalOscillation.funLike (E : Set X) [Fact (IsBounded E)] :
    FunLike (withLocalOscillation E) X ‚ÑÇ :=
  ContinuousMap.funLike

instance withLocalOscillation.toContinuousMapClass (E : Set X) [Fact (IsBounded E)] :
    ContinuousMapClass (withLocalOscillation E) X ‚ÑÇ :=
  ContinuousMap.toContinuousMapClass

/-- The local oscillation on a set `E` gives rise to a pseudo-metric-space structure
  on the continuous functions `X ‚Üí ‚ÑÇ`. -/
instance homogeneousPseudoMetric (E : Set X) [Fact (IsBounded E)] :
    PseudoMetricSpace (withLocalOscillation E) where
  dist := localOscillation E
  dist_self := by simp [localOscillation]
  dist_comm f g := by simp only [localOscillation]; congr with z; rw [‚Üê norm_neg]; ring_nf
  dist_triangle f‚ÇÅ f‚ÇÇ f‚ÇÉ := by
    rcases isEmpty_or_nonempty X with hX|hX
    ¬∑ sorry
    apply ciSup_le (fun z ‚Ü¶ ?_)
    trans ‚Äñf‚ÇÅ z.1 - f‚ÇÇ z.1 - f‚ÇÅ z.2 + f‚ÇÇ z.2‚Äñ + ‚Äñf‚ÇÇ z.1 - f‚ÇÉ z.1 - f‚ÇÇ z.2 + f‚ÇÉ z.2‚Äñ
    ¬∑ sorry
    ¬∑ sorry --gcongr <;> apply le_ciSup (bddAbove_localOscillation _ _ _) z
  edist_dist := fun x y => by exact ENNReal.coe_nnreal_eq _

variable {E : Set X} {f g : C(X, ‚ÑÇ)}

def localOscillationBall (E : Set X) (f : C(X, ‚ÑÇ)) (r : ‚Ñù) :
    Set C(X, ‚ÑÇ) :=
  { g : C(X, ‚ÑÇ) | localOscillation E f g < r }

end localOscillation

lemma fact_isCompact_ball (x : X) (r : ‚Ñù) : Fact (IsBounded (ball x r)) :=
  ‚ü®isBounded_ball‚ü©
attribute [local instance] fact_isCompact_ball

/-- A set `Œò` of (continuous) functions is compatible. -/
class IsCompatible [IsSpaceOfHomogeneousType X A] (Œò : Set C(X, ‚ÑÇ)) : Prop where
  localOscillation_two_mul_le {x‚ÇÅ x‚ÇÇ : X} {r : ‚Ñù} {f g : C(X, ‚ÑÇ)} (hf : f ‚àà Œò) (hg : g ‚àà Œò)
    (h : dist x‚ÇÅ x‚ÇÇ < 2 * r) :
    localOscillation (ball x‚ÇÇ (2 * r)) f g ‚â§ A * localOscillation (ball x‚ÇÅ r) f g
  localOscillation_le_of_subset {x‚ÇÅ x‚ÇÇ : X} {r : ‚Ñù} {f g : C(X, ‚ÑÇ)} (hf : f ‚àà Œò) (hg : g ‚àà Œò)
    (h1 : ball x‚ÇÅ r ‚äÜ ball x‚ÇÇ (A * r)) (h2 : A * r ‚â§ Metric.diam (univ : Set X)) :
    2 * localOscillation (ball x‚ÇÅ r) f g ‚â§ localOscillation (ball x‚ÇÇ (A * r)) f g
  ballsCoverBalls {x : X} {r R : ‚Ñù} :
    ‚àÄ f : withLocalOscillation (ball x r), f ‚àà Œò ‚Üí CoveredByBalls (ball f (2 * R) ‚à© Œò) ‚åäA‚åã‚Çä R

export IsCompatible (localOscillation_two_mul_le localOscillation_le_of_subset ballsCoverBalls)

-- todo
lemma IsCompatible.IsSeparable (hA : 1 ‚â§ A) {Œò : Set C(X, ‚ÑÇ)} [IsCompatible Œò] : IsSeparable Œò :=
  sorry

set_option linter.unusedVariables false in
/-- The inhomogeneous Lipschitz norm on a ball. -/
def iLipNorm (œï : X ‚Üí ‚ÑÇ) (x‚ÇÄ : X) (R : ‚Ñù) : ‚Ñù :=
  (‚®Ü x ‚àà ball x‚ÇÄ R, ‚Äñœï x‚Äñ) + R * ‚®Ü (x : X) (y : X) (h : x ‚â† y), ‚Äñœï x - œï y‚Äñ / nndist x y

/-- Œò is œÑ-cancellative -/
class IsCancellative (œÑ : ‚Ñù) (Œò : Set C(X, ‚ÑÇ)) : Prop where
  norm_integral_exp_le {x : X} {r : ‚Ñù} {œï : X ‚Üí ‚ÑÇ} {K : ‚Ñù‚â•0} (h1 : LipschitzWith K œï)
    (h2 : tsupport œï ‚äÜ ball x r) {f g : C(X, ‚ÑÇ)} (hf : f ‚àà Œò) (hg : g ‚àà Œò) :
    ‚Äñ‚à´ x in ball x r, exp (I * (f x - g x)) * œï x‚Äñ ‚â§
    A * volume.real (ball x r) * iLipNorm œï x r * (1 + localOscillation (ball x r) f g) ^ (- œÑ)

export IsCancellative (norm_integral_exp_le)

/-- The "volume function" `V`. Note that we will need to assume
`IsFiniteMeasureOnCompacts` and `ProperSpace` to actually know that this volume is finite. -/
def Real.vol {X : Type*} [PseudoMetricSpace X] [MeasureSpace X] (x y : X) : ‚Ñù :=
  volume.real (ball x (dist x y))

open Real (vol)
open Function

/-- `K` is a one-sided `œÑ`-Calderon-Zygmund kernel
In the formalization `K x y` is defined everywhere, even for `x = y`. The assumptions on `K` show
that `K x x = 0`. -/
class IsCZKernel (a : ‚Ñù) (K : X ‚Üí X ‚Üí ‚ÑÇ) : Prop where
  norm_le_vol_inv (x y : X) : ‚ÄñK x y‚Äñ ‚â§ 2 ^ a ^ 3 / vol x y
  norm_sub_le {x y y' : X} (h : 2 * A * dist y y' ‚â§ dist x y) :
    ‚ÄñK x y - K x y'‚Äñ ‚â§ (dist y y' / dist x y) ^ a‚Åª¬π * (2 ^ a ^ 3 / vol x y)
  measurable_right (y : X) : Measurable (K ¬∑ y)
  -- either we should assume this or prove from the other conditions
  measurable : Measurable (uncurry K)

-- to show: K is locally bounded and hence integrable outside the diagonal

/-- In Mathlib we only have the operator norm for continuous linear maps,
and (I think that) `T_*` is not linear.
Here is the norm for an arbitrary map `T` between normed spaces
(the infimum is defined to be 0 if the operator is not bounded). -/
def operatorNorm {E F : Type*} [NormedAddCommGroup E] [NormedAddCommGroup F] (T : E ‚Üí F) : ‚Ñù :=
  sInf { c | 0 ‚â§ c ‚àß ‚àÄ x, ‚ÄñT x‚Äñ ‚â§ c * ‚Äñx‚Äñ }

/- For sublinear maps: todo real interpolation.
Sublinear, L^1-bounded and L^2-bounded maps are also L^p bounded for p between 1 and 2.
This is a special case of the real interpolation spaces.
Reference: https://arxiv.org/abs/math/9910039
Lemma 3.6 - Lemma 3.9
-/

/-- Instead of the above `operatorNorm`, this might be more appropriate. -/
def NormBoundedBy {E F : Type*} [NormedAddCommGroup E] [NormedAddCommGroup F] (T : E ‚Üí F) (c : ‚Ñù) :
    Prop :=
  ‚àÄ x, ‚ÄñT x‚Äñ ‚â§ c * ‚Äñx‚Äñ

set_option linter.unusedVariables false in
/-- The associated nontangential Calderon Zygmund operator -/
def ANCZOperator (K : X ‚Üí X ‚Üí ‚ÑÇ) (f : X ‚Üí ‚ÑÇ) (x : X) : ‚Ñù :=
  ‚®Ü (R‚ÇÅ : ‚Ñù) (R‚ÇÇ : ‚Ñù) (h1 : R‚ÇÅ < R‚ÇÇ) (x' : X) (h2 : dist x x' ‚â§ R‚ÇÅ),
  ‚Äñ‚à´ y in {y | dist x' y ‚àà Ioo R‚ÇÅ R‚ÇÇ}, K x' y * f y‚Äñ

/-- The associated nontangential Calderon Zygmund operator, viewed as a map `L^p ‚Üí L^p`.
Todo: is `T_*f` indeed in L^p if `f` is? -/
def ANCZOperatorLp (p : ‚Ñù‚â•0‚àû) [Fact (1 ‚â§ p)] (K : X ‚Üí X ‚Üí ‚ÑÇ) (f : Lp ‚ÑÇ p (volume : Measure X)) :
    Lp ‚Ñù p (volume : Measure X) :=
  Mem‚Ñíp.toLp (ANCZOperator K (f : X ‚Üí ‚ÑÇ)) sorry

set_option linter.unusedVariables false in
/-- The (maximally truncated) polynomial Carleson operator `T`. -/
def CarlesonOperator (K : X ‚Üí X ‚Üí ‚ÑÇ) (Œò : Set C(X, ‚ÑÇ)) (f : X ‚Üí ‚ÑÇ) (x : X) : ‚Ñù :=
  ‚®Ü (Q ‚àà Œò) (R‚ÇÅ : ‚Ñù) (R‚ÇÇ : ‚Ñù) (h1 : R‚ÇÅ < R‚ÇÇ),
  ‚Äñ‚à´ y in {y | dist x y ‚àà Ioo R‚ÇÅ R‚ÇÇ}, K x y * f y * exp (I * Q y)‚Äñ

/-- The (maximally truncated) polynomial Carleson operator `T`, ENNReal version -/
--TODO: remove the last two suprema?
--TODO: change definition of CarlesonOperater too
def CarlesonOperator' (K : X ‚Üí X ‚Üí ‚ÑÇ) (Œò : Set C(X, ‚ÑÇ)) (f : X ‚Üí ‚ÑÇ) (x : X) : ENNReal :=
  ‚®Ü (Q ‚àà Œò) (R‚ÇÅ : ‚Ñù) (R‚ÇÇ : ‚Ñù) (_ : 0 < R‚ÇÅ) (_ : R‚ÇÅ < R‚ÇÇ),
  ‚Üë‚Äñ‚à´ y in {y | dist x y ‚àà Ioo R‚ÇÅ R‚ÇÇ}, K x y * f y * exp (I * Q y)‚Äñ‚Çä

variable (X) in
/-- A grid structure on `X`.
I expect we prefer `ùìì : Œπ ‚Üí Set X` over `ùìì : Set (Set X)`
Note: the `s` in this paper is `-s` of Christ's paper.
-/
class GridStructure (D Œ∫ : outParam ‚Ñù) (C : outParam ‚Ñù) where
  Œπ : Type*
  ùìì : Œπ ‚Üí Set X
  s : Œπ ‚Üí ‚Ñ§
  x : Œπ ‚Üí X
  volume_iUnion_preimage : ‚àÄ œÉ ‚àà range s, volume.real (‚ãÉ i ‚àà s ‚Åª¬π' {œÉ}, ùìì i)·∂ú = 0
  volume_inter_eq_zero {i j} (h1 : i ‚â† j) (h2 : s i = s j) : volume.real (ùìì i ‚à© ùìì j) = 0
  fundamental_dyadic {i j} : ùìì i ‚äÜ ùìì j ‚à® ùìì j ‚äÜ ùìì i ‚à® Disjoint (ùìì i) (ùìì j)
  ball_subset_ùìì {i} : ball (x i) ((2 * A) ^ (-2 : ‚Ñ§) * D ^ s i) ‚äÜ ùìì i
  ùìì_subset_ball {i} : ùìì i ‚äÜ ball (x i) ((2 * A) ^ 2 * D ^ s i)
  small_boundary {i} {t : ‚Ñù} (ht : 0 < t) : volume.real {x ‚àà ùìì i | infDist x (ùìì i)·∂ú ‚â§ t * D ^ s i } ‚â§
    C * t ^ Œ∫ * volume.real (ùìì i)
  -- should the following become axioms? I believe they don't follow from previous axioms.
  -- or maybe √é is only defined when it exists?
  -- next : Œπ ‚Üí Œπ
  -- subset_next {i} : ùìì i ‚äÜ ùìì (next i)
  -- s_next : s (next i) = s i + 1

export GridStructure (volume_iUnion_preimage volume_inter_eq_zero fundamental_dyadic
  ball_subset_ùìì ùìì_subset_ball small_boundary)

variable {D Œ∫ : ‚Ñù} {C : ‚Ñù}

section GridStructure

variable [GridStructure X D Œ∫ C]

variable (X) in
def Œπ : Type* := GridStructure.Œπ X A
def s : Œπ X ‚Üí ‚Ñ§ := GridStructure.s
def ùìì : Œπ X ‚Üí Set X := GridStructure.ùìì
def x : Œπ X ‚Üí X := GridStructure.x

end GridStructure

instance homogeneousMeasurableSpace [Inhabited X] : MeasurableSpace C(X, ‚ÑÇ) :=
  let m : PseudoMetricSpace C(X, ‚ÑÇ) :=
    homogeneousPseudoMetric (ball default 1) -- an arbitary ball
  let t : TopologicalSpace C(X, ‚ÑÇ) := m.toUniformSpace.toTopologicalSpace
  @borel C(X, ‚ÑÇ) t

/-- A tile structure. Note: compose `ùìò` with `ùìì` to get the `ùìò` of the paper. -/
class TileStructure.{u} [Inhabited X] (Œò : outParam (Set C(X, ‚ÑÇ)))
    (D Œ∫ : outParam ‚Ñù) (C : outParam ‚Ñù) extends GridStructure X Œ∫ D C where
  protected ùîì : Type u
  protected ùìò : ùîì ‚Üí Œπ
  Œ© : ùîì ‚Üí Set C(X, ‚ÑÇ)
  measurableSet_Œ© : ‚àÄ p, MeasurableSet (Œ© p)
  Q : ùîì ‚Üí C(X, ‚ÑÇ)
  Q_mem : ‚àÄ p, Q p ‚àà Œò
  union_Œ© {i} : ‚ãÉ (p) (_h : ùìì (ùìò p) = ùìì i), Œ© p = Œò
  disjoint_Œ© {p p'} (h : p ‚â† p') (hp : ùìì (ùìò p) = ùìì (ùìò p')) : Disjoint (Œ© p) (Œ© p')
  relative_fundamental_dyadic {p p'} (h : ùìì (ùìò p) ‚äÜ ùìì (ùìò p')) : Disjoint (Œ© p) (Œ© p') ‚à® Œ© p' ‚äÜ Œ© p
  localOscillationBall_subset {p} : localOscillationBall (ùìì (ùìò p)) (Q p) 5‚Åª¬π ‚à© Œò ‚äÜ Œ© p
  subset_localOscillationBall {p} : Œ© p ‚äÜ localOscillationBall (ùìì (ùìò p)) (Q p) 1

export TileStructure (Œ© measurableSet_Œ© Q Q_mem union_Œ© disjoint_Œ©
  relative_fundamental_dyadic localOscillationBall_subset subset_localOscillationBall)
-- #print homogeneousMeasurableSpace
-- #print TileStructure
variable [Inhabited X] {Œò : Set C(X, ‚ÑÇ)} [TileStructure Œò D Œ∫ C]

variable (X) in
def ùîì := TileStructure.ùîì X A
def ùìò : ùîì X ‚Üí Œπ X := TileStructure.ùìò

/- The set `E` defined in Proposition 2.1. -/
def E (Q' : X ‚Üí C(X, ‚ÑÇ)) (œÉ œÉ' : X ‚Üí ‚Ñ§) (p : ùîì X) : Set X :=
  { x ‚àà ùìì (ùìò p) | Q' x ‚àà Œ© p ‚àß s (ùìò p) ‚àà Icc (œÉ x) (œÉ' x) }

section T

variable (K : X ‚Üí X ‚Üí ‚ÑÇ) (Q' : X ‚Üí C(X, ‚ÑÇ)) (œÉ œÉ' : X ‚Üí ‚Ñ§) (œà : ‚Ñù ‚Üí ‚Ñù) (p : ùîì X) (F : Set X)

/- The operator `T` defined in Proposition 2.1, considered on the set `F`.
It is the map `T ‚àò (1_F * ¬∑) : f ‚Ü¶ T (1_F * f)`, also denoted `T1_F`
The operator `T` in Proposition 2.1 is therefore `applied to `(F := Set.univ)`. -/
def T (f : X ‚Üí ‚ÑÇ) : X ‚Üí ‚ÑÇ :=
  indicator (E Q' œÉ œÉ' p)
    fun x ‚Ü¶ ‚à´ y, exp (Q' x x - Q' x y) * K x y * œà (D ^ (- s (ùìò p)) * dist x y) * F.indicator f y

lemma Mem‚Ñíp_T {f : X ‚Üí ‚ÑÇ} {q : ‚Ñù‚â•0‚àû} (hf : Mem‚Ñíp f q) : Mem‚Ñíp (T K Q' œÉ œÉ' œà p F f) q :=
  by sorry

/- The operator `T`, defined on `L^2` maps. -/
def T‚ÇÇ (f : X ‚Üí‚ÇÇ[volume] ‚ÑÇ) : X ‚Üí‚ÇÇ[volume] ‚ÑÇ :=
  Mem‚Ñíp.toLp (T K Q' œÉ œÉ' œà p F f) <| Mem‚Ñíp_T K Q' œÉ œÉ' œà p F <| Lp.mem‚Ñíp f

/- The operator `T`, defined on `L^2` maps as a continuous linear map. -/
def TL : (X ‚Üí‚ÇÇ[volume] ‚ÑÇ) ‚ÜíL[‚ÑÇ] (X ‚Üí‚ÇÇ[volume] ‚ÑÇ) where
    toFun := T‚ÇÇ K Q' œÉ œÉ' œà p F
    map_add' := sorry
    map_smul' := sorry
    cont := by sorry

end T

variable (X) in
def TileLike : Type _ := Set X √ó OrderDual (Set (C(X,‚ÑÇ)))

def TileLike.fst (x : TileLike X) : Set X := x.1
def TileLike.snd (x : TileLike X) : Set (C(X,‚ÑÇ)) := x.2
instance : PartialOrder (TileLike X) := by dsimp [TileLike]; infer_instance
example (x y : TileLike X) : x ‚â§ y ‚Üî x.fst ‚äÜ y.fst ‚àß y.snd ‚äÜ x.snd := by rfl

def toTileLike (p : ùîì X) : TileLike X := (ùìì (ùìò p), Œ© p)

lemma toTileLike_injective : Injective (fun p : ùîì X ‚Ü¶ toTileLike p) := sorry

instance : PartialOrder (ùîì X) := PartialOrder.lift toTileLike toTileLike_injective

def smul (a : ‚Ñù) (p : ùîì X) : TileLike X :=
  (ùìì (ùìò p), localOscillationBall (ùìì (ùìò p)) (Q p) a)

def TileLike.toTile (t : TileLike X) : Set (X √ó C(X,‚ÑÇ)) :=
  t.fst √óÀ¢ t.snd

lemma isAntichain_iff_disjoint (ùîÑ : Set (ùîì X)) :
    IsAntichain (¬∑‚â§¬∑) (toTileLike (X := X) '' ùîÑ) ‚Üî
    ‚àÄ p p', p ‚àà ùîÑ ‚Üí p' ‚àà ùîÑ ‚Üí p ‚â† p' ‚Üí
    Disjoint (toTileLike (X := X) p).toTile (toTileLike p').toTile := sorry

def convexShadow (ùîì' : Set (ùîì X)) : Set (Œπ X) :=
  { i | ‚àÉ p p' : ùîì X, p ‚àà ùîì' ‚àß p' ‚àà ùîì' ‚àß (ùìì (ùìò p) : Set X) ‚äÜ ùìì i ‚àß ùìì i ‚äÜ ùìì (ùìò p') }

def EBar (G : Set X) (Q' : X ‚Üí C(X,‚ÑÇ)) (t : TileLike X) : Set X :=
  { x ‚àà t.fst ‚à© G | Q' x ‚àà t.snd }

def density (G : Set X) (Q' : X ‚Üí C(X,‚ÑÇ)) (ùîì' : Set (ùîì X)) : ‚Ñù :=
  ‚®Ü (p ‚àà ùîì') (l ‚â• (2 : ‚Ñù)), l ^ (-2 * Real.log A) *
  ‚®Ü (p' : ùîì X) (_h : ùìò p' ‚àà convexShadow ùîì') (_h2 : smul l p ‚â§ smul l p'),
  volume.real (EBar G Q' (smul l p')) / volume.real (EBar G Q' (toTileLike p))

/-- Hardy-Littlewood maximal function -/
def maximalFunction {E} [NormedAddCommGroup E] [NormedSpace ‚Ñù E]
  (f : X ‚Üí E) (x : X) : ‚Ñù :=
  ‚®Ü (x' : X) (Œ¥ : ‚Ñù) (_hx : x ‚àà ball x' Œ¥),
  ‚®ç‚Åª y, ‚Äñf y‚Äñ‚Çä ‚àÇvolume.restrict (ball x' Œ¥) |>.toReal

def boundedTiles (F : Set X) (t : ‚Ñù) : Set (ùîì X) :=
  { p : ùîì X | ‚àÉ x ‚àà ùìì (ùìò p), maximalFunction (Set.indicator F (1 : X ‚Üí ‚Ñù)) x ‚â§ t }

set_option linter.unusedVariables false in
variable (X) in
class SmallBoundaryProperty (Œ∑ : ‚Ñù) : Prop where
  volume_diff_le : ‚àÉ (C : ‚Ñù) (hC : C > 0), ‚àÄ (x : X) r (Œ¥ : ‚Ñù), 0 < r ‚Üí 0 < Œ¥ ‚Üí Œ¥ < 1 ‚Üí
    volume.real (ball x ((1 + Œ¥) * r) \ ball x ((1 - Œ¥) * r)) ‚â§ C * Œ¥ ^ Œ∑ * volume.real (ball x r)


namespace TileStructure
variable (X) in
structure Tree where
  carrier : Set (ùîì X)
  top : ùîì X
  le_top {p : ùîì X} (hp : p ‚àà carrier): smul 4 p ‚â§ toTileLike top
  ordConnected : OrdConnected carrier -- the convexity condition

attribute [coe] Tree.carrier
instance : CoeTC (Tree X) (Set (ùîì X)) where coe := Tree.carrier
instance : Membership (ùîì X) (Tree X) := ‚ü®fun x p => x ‚àà (p : Set _)‚ü©
instance : Preorder (Tree X) := Preorder.lift Tree.carrier

-- LaTeX note: $D ^ {s(p)}$ should be $D ^ {s(I(p))}$
class Tree.IsThin (ùîó : Tree X) : Prop where
  thin {p : ùîì X} (hp : p ‚àà ùîó) : ball (x (ùìò p)) (8 * A ^ 3 * D ^ s (ùìò p)) ‚äÜ ùìì (ùìò ùîó.top)

alias Tree.thin := Tree.IsThin.thin

def Œî (p : ùîì X) (Q'' : C(X, ‚ÑÇ)) : ‚Ñù := localOscillation (ùìì (ùìò p)) (Q p) Q'' + 1


/--
A forest is a set of pairwise disjoint trees
note(F): currently we allow that the tree with the empty carrier occurs (multiple times) in the
forest, I believe.
-/
structure Forest (G : Set X) (Q' : X ‚Üí C(X,‚ÑÇ)) (Œ¥ : ‚Ñù) (n : ‚Ñï) where
  I : Set (Tree X)
  disjoint_I : ‚àÄ {ùîó ùîó'}, ùîó ‚àà I ‚Üí ùîó' ‚àà I ‚Üí Disjoint ùîó.carrier ùîó'.carrier
  top_finite (x : X) : {ùîó ‚àà I | x ‚àà ùìì (ùìò ùîó.top)}.Finite
  card_top_le (x : X) : Nat.card {ùîó ‚àà I | x ‚àà ùìì (ùìò ùîó.top) } ‚â§ 2 ^ n * Real.log (n + 1)
  density_le {ùîó} (hùîó : ùîó ‚àà I) : density G Q' ùîó ‚â§ (2 : ‚Ñù) ^ (-n : ‚Ñ§)
  delta_gt {j j'} (hj : j ‚àà I) (hj' : j' ‚àà I) (hjj' : j ‚â† j') {p : ùîì X} (hp : p ‚àà j)
    (h2p : ùìì (ùìò p) ‚äÜ ùìì (ùìò j'.top)) : Œî p (Q j.top) > (2 : ‚Ñù) ^ (3 * n / Œ¥)

variable {G : Set X} {Q' : X ‚Üí C(X,‚ÑÇ)} {Œ¥ : ‚Ñù} {n : ‚Ñï}

namespace Forest

/- Do we want to treat a forest as a set of trees, or a set of elements from `ùîì X`? -/

-- instance : SetLike (Forest G Q' Œ¥ n) (Tree X) where
--   coe s := s.I
--   coe_injective' p q h := by cases p; cases q; congr

-- instance : PartialOrder (Forest G Q' Œ¥ n) := PartialOrder.lift (‚Üë) SetLike.coe_injective

class IsThin (ùîâ : Forest G Q' Œ¥ n) : Prop where
  thin {ùîó} (hùîó : ùîó ‚àà ùîâ.I) : ùîó.IsThin

alias thin := Forest.IsThin.thin

/-- The union of all the trees in the forest. -/
def carrier (ùîâ : Forest G Q' Œ¥ n) : Set (ùîì X) := ‚ãÉ ùîó ‚àà ùîâ.I, ùîó

end Forest

end TileStructure
