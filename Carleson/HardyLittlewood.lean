import Mathlib.Analysis.NormedSpace.FiniteDimension
import Mathlib.Analysis.SpecialFunctions.Log.Base
import Mathlib.MeasureTheory.Integral.Average
import Mathlib.MeasureTheory.Measure.Haar.Basic
import Mathlib.MeasureTheory.Measure.Doubling
import Mathlib.MeasureTheory.Covering.VitaliFamily

open MeasureTheory Metric Bornology Set
open scoped NNReal ENNReal
noncomputable section

/-! This should roughly contain the contents of chapter 9. -/

-- #check VitaliFamily

variable {X E} [PseudoMetricSpace X] [MeasurableSpace X] [NormedAddCommGroup E] [NormedSpace ‚Ñù E]
  [MeasurableSpace E] [BorelSpace E]
  {Œº : Measure X} {f : X ‚Üí E} {x : X} {ùìë : Finset (X √ó ‚Ñù)}

/-- The Hardy-Littlewood maximal function w.r.t. a collection of balls ùìë. -/
def maximalFunction (Œº : Measure X) (ùìë : Set (X √ó ‚Ñù)) (p : ‚Ñù) (u : X ‚Üí E) (x : X) : ‚Ñù‚â•0‚àû :=
  (‚®Ü z ‚àà ùìë, (ball z.1 z.2).indicator (x := x)
  fun _ ‚Ü¶ ‚®ç‚Åª y, ‚Äñu y‚Äñ‚Çä ‚àÇŒº.restrict (ball z.1 z.2)) ^ p‚Åª¬π

abbrev MB (Œº : Measure X) (ùìë : Set (X √ó ‚Ñù)) (u : X ‚Üí E) (x : X) := maximalFunction Œº ùìë 1 u x

-- old
-- /-- Hardy-Littlewood maximal function -/
-- def maximalFunction (Œº : Measure X) (f : X ‚Üí E) (x : X) : ‚Ñù :=
--   ‚®Ü (x' : X) (Œ¥ : ‚Ñù) (_hx : x ‚àà ball x' Œ¥),
--   ‚®ç‚Åª y, ‚Äñf y‚Äñ‚Çä ‚àÇŒº.restrict (ball x' Œ¥) |>.toReal

/-! The following results probably require a doubling measure,
and maybe some properties from `ProofData`.
They are the statements from the blueprint.
We probably want a more general version first. -/

theorem measure_biUnion_le_lintegral {a : ‚Ñù} (ha : 4 ‚â§ a) {l : ‚Ñù‚â•0} (hl : 0 < l)
    {u : X ‚Üí ‚Ñù‚â•0} (hu : AEStronglyMeasurable u Œº)
    (h2u : ‚àÄ z ‚àà ùìë, l * Œº (ball z.1 z.2) ‚â§ ‚à´‚Åª x in ball z.1 z.2, u x ‚àÇŒº)
    :
    l * Œº (‚ãÉ z ‚àà ùìë, ball z.1 z.2) ‚â§ 2 ^ (2 * a) * ‚à´‚Åª x, u x ‚àÇŒº  := by
  sorry

theorem maximalFunction_lt_top {a : ‚Ñù} (ha : 4 ‚â§ a) {l : ‚Ñù‚â•0} (hl : 0 < l) {p‚ÇÅ p‚ÇÇ : ‚Ñù‚â•0}
    (hp‚ÇÅ : 1 ‚â§ p‚ÇÅ) (hp‚ÇÅ‚ÇÇ : p‚ÇÅ < p‚ÇÇ)
    {u : X ‚Üí E} (hu : Mem‚Ñíp u p‚ÇÇ Œº) {x : X} :
    maximalFunction Œº ùìë p‚ÇÅ u x < ‚àû := by
  sorry

theorem snorm_maximalFunction {a : ‚Ñù} (ha : 4 ‚â§ a) {l : ‚Ñù‚â•0} (hl : 0 < l) {p‚ÇÅ p‚ÇÇ : ‚Ñù‚â•0}
    (hp‚ÇÅ : 1 ‚â§ p‚ÇÅ) (hp‚ÇÅ‚ÇÇ : p‚ÇÅ < p‚ÇÇ)
    {u : X ‚Üí E} (hu : AEStronglyMeasurable u Œº) :
    snorm (maximalFunction Œº ùìë p‚ÇÅ u ¬∑ |>.toReal) p‚ÇÇ Œº ‚â§
    2 ^ (2 * a) * p‚ÇÇ / (p‚ÇÇ - p‚ÇÅ) * snorm u p‚ÇÇ Œº := by
  sorry

theorem Mem‚Ñíp.maximalFunction {a : ‚Ñù} (ha : 4 ‚â§ a) {l : ‚Ñù‚â•0} (hl : 0 < l) {p‚ÇÅ p‚ÇÇ : ‚Ñù‚â•0}
    (hp‚ÇÅ : 1 ‚â§ p‚ÇÅ) (hp‚ÇÅ‚ÇÇ : p‚ÇÅ < p‚ÇÇ)
    {u : X ‚Üí E} (hu : Mem‚Ñíp u p‚ÇÇ Œº) :
    Mem‚Ñíp (maximalFunction Œº ùìë p‚ÇÅ u ¬∑ |>.toReal) p‚ÇÇ Œº := by
  sorry

/-- The transformation M characterized in Proposition 2.0.6. -/
def M (u : X ‚Üí ‚ÑÇ) (x : X) : ‚Ñù‚â•0‚àû := sorry

theorem M_lt_top {a : ‚Ñù} (ha : 4 ‚â§ a) {l : ‚Ñù‚â•0} (hl : 0 < l) {p‚ÇÅ p‚ÇÇ : ‚Ñù‚â•0}
    (hp‚ÇÅ : 1 ‚â§ p‚ÇÅ) (hp‚ÇÅ‚ÇÇ : p‚ÇÅ < p‚ÇÇ)
    {u : X ‚Üí ‚ÑÇ} (hu : AEStronglyMeasurable u Œº) (hu : IsBounded (range u))
    {x : X} : M u x < ‚àû := by
  sorry

theorem laverage_le_M {a : ‚Ñù} (ha : 4 ‚â§ a) {l : ‚Ñù‚â•0} (hl : 0 < l)
    {u : X ‚Üí ‚ÑÇ} (hu : AEStronglyMeasurable u Œº) (hu : IsBounded (range u))
    {z x : X} {r : ‚Ñù} :
     ‚®ç‚Åª y, ‚Äñu y‚Äñ‚Çä ‚àÇŒº.restrict (ball z r) ‚â§ M u x := by
  sorry

theorem snorm_M_le {a : ‚Ñù} (ha : 4 ‚â§ a) {l : ‚Ñù‚â•0} (hl : 0 < l){p‚ÇÅ p‚ÇÇ : ‚Ñù‚â•0}
    (hp‚ÇÅ : 1 ‚â§ p‚ÇÅ) (hp‚ÇÅ‚ÇÇ : p‚ÇÅ < p‚ÇÇ)
    {u : X ‚Üí ‚ÑÇ} (hu : AEStronglyMeasurable u Œº) (hu : IsBounded (range u))
    {z x : X} {r : ‚Ñù} :
    snorm (fun x ‚Ü¶ (M (fun x ‚Ü¶ u x ^ (p‚ÇÅ : ‚ÑÇ)) x).toReal ^ (p‚ÇÅ‚Åª¬π : ‚Ñù)) p‚ÇÇ Œº ‚â§
    2 ^ (4 * a)  * p‚ÇÇ / (p‚ÇÇ - p‚ÇÅ) * snorm u p‚ÇÇ Œº := by
  sorry
