/-
This is a file for arithmetical lemmas -
lemmas that don't depend on any of Carleson's project definitions, or, really,
on any fancy definitions period.

Roughly speaking, if a lemma is in this file, it should be purely calculational/arithmetical,
e.g. `lemma calculation_1 : 2 + 2 = 4`.
All lemmas are prepended with a prefix `calculation_`.
-/
import Carleson.Defs
import Mathlib.Tactic.Rify
open ShortVariables
open scoped NNReal ENNReal
variable {X : Type*} {a : ‚Ñï} {q : ‚Ñù} {K : X ‚Üí X ‚Üí ‚ÑÇ} {œÉ‚ÇÅ œÉ‚ÇÇ : X ‚Üí ‚Ñ§} {F G : Set X}

lemma sixteen_times_le_cube (ha : 4 ‚â§ a) : 16 * a ‚â§ a ^ 3 := calc
  16 * a
  _ = 4 * 4 * a := by ring
  _ ‚â§ a * a * a := by gcongr
  _ = a ^ 3 := by ring

lemma four_times_sq_le_cube (ha : 4 ‚â§ a) : 4 * a ^ 2 ‚â§ a ^ 3 := calc
  4 * a ^ 2
  _ ‚â§ a * a ^ 2 := by gcongr
  _ = a ^ 3 := by ring

lemma add_le_pow_two {R : Type*} [Semiring R] [PartialOrder R] [IsOrderedRing R]
    {p q r s : ‚Ñï} (hp : p ‚â§ r) (hq : q ‚â§ r) (hr : r + 1 ‚â§ s) :
    (2 : R) ^ p + 2 ^ q ‚â§ 2 ^ s := by
  grw [hp, hq, ‚Üê mul_two, ‚Üê pow_succ, hr] <;> norm_num

lemma add_le_pow_two‚ÇÉ {R : Type*} [Semiring R] [PartialOrder R] [IsOrderedRing R]
    {p q r s t : ‚Ñï} (hp : p ‚â§ s) (hq : q ‚â§ s) (hr : r ‚â§ s + 1) (ht : s + 2 ‚â§ t) :
    (2 : R) ^ p + 2 ^ q + 2 ^ r ‚â§ 2 ^ t := calc
  (2 : R) ^ p + 2 ^ q + 2 ^ r
  _ ‚â§ 2 ^ (s + 1) + 2 ^ r := by
    gcongr; apply add_le_pow_two hp hq le_rfl
  _ ‚â§ 2 ^ t := add_le_pow_two le_rfl (by linarith) ht

lemma add_le_pow_two_add_cube {R : Type*} [Semiring R] [PartialOrder R] [IsOrderedRing R]
    {p q r : ‚Ñï} (ha : 4 ‚â§ a) (hp : p ‚â§ r) (hq : q ‚â§ r) :
    (2 : R) ^ p + 2 ^ q ‚â§ 2 ^ (r + a ^ 3) := by
  apply add_le_pow_two hp hq
  have : 1 ‚â§ a ^ 3 := one_le_pow‚ÇÄ (by linarith)
  linarith

lemma calculation_1 (s : ‚Ñ§) :
    4 * (D : ‚Ñù) ^ (-2 : ‚Ñù) * D ^ (s + 3) = 4 * D ^ (s + 1) := by
  have D_pos : (0 : ‚Ñù) < D := defaultD_pos a
  calc 4 * (D : ‚Ñù) ^ (-2 : ‚Ñù) * D ^ (s + 3)
  _ = 4 * (D ^ (-2 : ‚Ñù) * D ^ (s + 3)) := by
    ring
  _ = 4 * D ^ (-2 + (s + 3)) := by
    congr
    have pow_th := Real.rpow_add (x := (D : ‚Ñù)) (y := (-2)) (z := (s + 3)) D_pos
    rw_mod_cast [pow_th]
  _ = 4 * D ^ (s + 1) := by
    ring_nf

lemma calculation_2 (s : ‚Ñ§) :
    ((8 : ‚Ñù)‚Åª¬π * D ^ (- 3 : ‚Ñù)) * D ^ (s + 3) = 8‚Åª¬π * D ^ s := by
  have D_pos : (0 : ‚Ñù) < D := defaultD_pos a
  calc (8 : ‚Ñù)‚Åª¬π * (D : ‚Ñù) ^ (-3 : ‚Ñù) * D ^ (s + 3)
  _ = (8 : ‚Ñù)‚Åª¬π * (D ^ (-3 : ‚Ñù) * D ^ (s + 3)) := by
    ring
  _ = (8 : ‚Ñù)‚Åª¬π * D ^ (-3 + (s + 3)) := by
    congr
    have pow_th := Real.rpow_add (x := (D : ‚Ñù)) (y := (-3)) (z := (s + 3)) D_pos
    rw_mod_cast [pow_th]
  _ = (8 : ‚Ñù)‚Åª¬π * D ^ s := by
    norm_num

lemma calculation_10 (h : (100 : ‚Ñù) < D) :
    ((100 : ‚Ñù) + 4 * D ^ (-2 : ‚Ñù) + 8‚Åª¬π * D ^ (-3 : ‚Ñù)) * D ^ (-1 : ‚Ñù) < 2 := by
  calc ((100 : ‚Ñù) + 4 * D ^ (-2 : ‚Ñù) + 8‚Åª¬π * D ^ (-3 : ‚Ñù)) * D ^ (-1 : ‚Ñù)
  _ ‚â§ ((100 : ‚Ñù) + 4 * 100 ^ (-2 : ‚Ñù) + 8‚Åª¬π * 100 ^ (-3 : ‚Ñù)) * 100 ^ (-1 : ‚Ñù) := by
    gcongr (100 + 4 * ?_ + 8‚Åª¬π * ?_) * ?_ <;>
    apply Real.rpow_le_rpow_of_exponent_nonpos (by norm_num) h.le (by norm_num)
  _ < _ := by norm_num

lemma calculation_3 [PseudoMetricSpace X] [ProofData a q K œÉ‚ÇÅ œÉ‚ÇÇ F G] {x y : ‚Ñ§} (h : x + 3 < y) :
    100 * D ^ (x + 3) + ((4 * D ^ (-2 : ‚Ñù)) * D ^ (x + 3)) + (((8 : ‚Ñù)‚Åª¬π * D ^ (-3 : ‚Ñù)) * D ^ (x + 3)) + 8 * D ^ y < 10 * D ^ y := by
  rw [‚Üê show (2 : ‚Ñù) + 8 = 10 by norm_num, right_distrib]
  gcongr
  rw [‚Üê distrib_three_right ..]
  calc (100 + 4 * (D : ‚Ñù) ^ (-2 : ‚Ñù) + 8‚Åª¬π * D ^ (-3 : ‚Ñù)) * D ^ (x + 3)
  _ ‚â§ (100 + 4 * (D : ‚Ñù) ^ (-2 : ‚Ñù) + 8‚Åª¬π * D ^ (-3 : ‚Ñù)) * D ^ (y - 1) := by
    have h1 : x + 3 ‚â§ y - 1 := by omega
    gcongr
    linarith [four_le_realD X]
  _ = (100 + 4 * (D : ‚Ñù) ^ (-2 : ‚Ñù) + 8‚Åª¬π * D ^ (-3 : ‚Ñù)) * (D ^ (y) * D ^ (- 1 : ‚Ñù)) := by
    congr
    exact_mod_cast Real.rpow_add (y := y) (z:= (-1)) (hx := defaultD_pos a)
  _ < 2 * D ^ y := by
    nth_rw 4 [mul_comm ..]
    rw [‚Üê mul_assoc ..]
    have D_pos : (0 : ‚Ñù) < D := defaultD_pos a
    gcongr
    exact calculation_10 (hundred_lt_realD X)

lemma calculation_4 [PseudoMetricSpace X] [ProofData a q K œÉ‚ÇÅ œÉ‚ÇÇ F G]
    {s_1 s_2 s_3 : ‚Ñ§} {dist_a dist_b dist_c dist_d : ‚Ñù}
    (lt_1 : dist_a < 100 * D ^ (s_1 + 3))
    (lt_2 : dist_b < 8 * D ^ s_3)
    (lt_3 : dist_c < 8‚Åª¬π * D ^ s_1)
    (lt_4 : dist_d < 4 * D ^ s_2)
    (three : s_1 + 3 < s_3) (plusOne : s_2 = s_1 + 1) :
    dist_a + dist_d + dist_c + dist_b < 10 * D ^ s_3 := by
  calc dist_a + dist_d + dist_c + dist_b
  _ ‚â§ 100 * D ^ (s_1 + 3) + dist_d + dist_c + dist_b := by
    change dist_a < 100 * D ^ (s_1 + 3) at lt_1
    gcongr
  _ ‚â§ 100 * D ^ (s_1 + 3) + 4 * D ^ (s_1 + 1) + dist_c + dist_b := by
    gcongr
    apply le_of_lt
    rw [‚Üê plusOne]
    exact lt_4
  _ ‚â§ 100 * D ^ (s_1 + 3) + 4 * D ^ (s_1 + 1) + 8‚Åª¬π * D ^ s_1 + dist_b := by
    gcongr
  _ ‚â§ 100 * D ^ (s_1 + 3) + 4 * D ^ (s_1 + 1) + 8‚Åª¬π * D ^ s_1 + 8 * D ^ s_3 := by
    gcongr
  _ = 100 * D ^ (s_1 + 3) + ((4 * D ^ (- 2 : ‚Ñù)) * D ^ (s_1 + 3)) + 8‚Åª¬π * D ^ s_1 + 8 * D ^ s_3 := by
    rw [calculation_1 (s := s_1)]
  _ = 100 * D ^ (s_1 + 3) + ((4 * D ^ (- 2 : ‚Ñù)) * D ^ (s_1 + 3)) + (((8 : ‚Ñù)‚Åª¬π * D ^ (- 3 : ‚Ñù)) * D ^ (s_1 + 3)) + 8 * D ^ s_3 := by
    rw [calculation_2 (s := s_1)]
  _ < 10 * D ^ s_3 := by
    exact calculation_3 (h := three) (X := X)

lemma calculation_logD_64 [PseudoMetricSpace X] [ProofData a q K œÉ‚ÇÅ œÉ‚ÇÇ F G] :
    Real.logb D 64 < 1 := by
  apply (Real.logb_lt_iff_lt_rpow (by linarith [hundred_lt_realD X]) (by linarith)).mpr
  rw [Real.rpow_one]
  linarith [hundred_lt_realD X]

lemma calculation_5 {dist_1 dist_2 : ‚Ñù}
    (h : dist_1 ‚â§ (2 ^ (a : ‚Ñù)) ^ (6 : ‚Ñù) * dist_2) :
    2 ^ ((-ùïî : ‚Ñù) * a) * dist_1 ‚â§ 2 ^ ((-(ùïî - 6) : ‚Ñù) * a) * dist_2 := by
  apply (mul_le_mul_left (show 0 < (2 : ‚Ñù) ^ (ùïî * (a : ‚Ñù)) by positivity)).mp
  rw [‚Üê mul_assoc, neg_mul,
    Real.rpow_neg (by positivity),
    mul_inv_cancel‚ÇÄ (a := (2 : ‚Ñù) ^ (ùïî * (a : ‚Ñù))) (by positivity),
    ‚Üê mul_assoc, ‚Üê Real.rpow_add (by positivity)]
  ring_nf
  rw [Real.rpow_mul (x := (2 : ‚Ñù)) (hx:=by positivity) (y := a) (z := 6)]
  exact_mod_cast h

lemma calculation_6 (a : ‚Ñï) (s : ‚Ñ§) :
    (D : ‚Ñù) ^ (s + 3) = (D : ‚Ñù) ^ (s + 2) * (D : ‚Ñù) := by
  rw [zpow_add‚ÇÄ (by linarith [defaultD_pos a]) s 3,
    zpow_add‚ÇÄ (by linarith [defaultD_pos a]) s 2, mul_assoc]
  congr

lemma calculation_7 (a : ‚Ñï) (s : ‚Ñ§) :
    100 * (D ^ (s + 2) * D) = (defaultA a) ^ (ùïî * a) * (100 * (D : ‚Ñù) ^ (s + 2)) := by
  rw [‚Üê mul_assoc (a := 100), mul_comm]
  congr
  norm_cast
  rw [‚Üê pow_mul 2 a (ùïî * a), mul_comm (a := a), defaultD]
  ring

lemma calculation_8 {dist_1 dist_2 : ‚Ñù}
    (h : dist_1 * 2 ^ ((ùïî : ‚Ñù) * a) ‚â§ dist_2) :
    dist_1 ‚â§ 2 ^ ((-ùïî : ‚Ñù) * a) * dist_2 := by
  rw [neg_mul, Real.rpow_neg (by positivity), mul_comm (a := (2 ^ (ùïî * (a : ‚Ñù)))‚Åª¬π)]
  apply (le_mul_inv_iff‚ÇÄ (by positivity)).mpr
  exact h

lemma calculation_9 [PseudoMetricSpace X] [ProofData a q K œÉ‚ÇÅ œÉ‚ÇÇ F G]
    (h : 1 ‚â§ (2 : ‚Ñù) ^ (-((ùïî - 6) : ‚Ñù) * a)) :
    False := by
  have : (2 : ‚Ñù) ^ (-((ùïî - 6) : ‚Ñù) * a) < 1 ^ (-((ùïî - 6) : ‚Ñù) * a) := by
    apply Real.rpow_lt_rpow_of_neg (by norm_num) (by norm_num)
    simp only [neg_sub, sub_mul, sub_neg]
    norm_cast
    gcongr
    ¬∑ linarith [four_le_a X]
    ¬∑ linarith [seven_le_c]
  simp at h this
  linarith

lemma calculation_11 [PseudoMetricSpace X] [ProofData a q K œÉ‚ÇÅ œÉ‚ÇÇ F G] (s : ‚Ñ§) :
    100 * (D : ‚Ñù) ^ (s + 2) + 4 * D ^ (s + 1) < 128 * D^(s + 2) := by
  rw [show (128 : ‚Ñù) = 100 + 28 by norm_num]
  rw [right_distrib]
  gcongr
  ¬∑ linarith
  ¬∑ exact one_lt_D (X := X)
  ¬∑ linarith

lemma calculation_12 (s : ‚Ñù) :
    128 * (D : ‚Ñù)^(s + 2) = 2^(2 * ùïî * a ^ 2 + 4) * (8 * D ^ s) := by
  simp only [defaultD]
  have leftSide := calc 128 * ((2 : ‚Ñù) ^ (ùïî * a ^ 2)) ^ (s + 2)
    _ = 128 * 2^(ùïî * a^2 * (s + 2)) := by
      congrm 128 * ?_
      have fact := Real.rpow_mul (x := 2) (y := ùïî * a ^ 2) (z := s + 2) (by positivity)
      rw_mod_cast [fact]
    _ = 128 * 2^((ùïî * a^2 * s) + (ùïî * a^2 * 2)) := by
      congrm 128 * (2 ^ ?_)
      ring
    _ = (2 ^ 7) * 2^((ùïî * a^2 * s) + (ùïî * a^2 * 2)) := by
      norm_num
    _ = 2 ^ (7 + ((ùïî * a^2 * s) + (ùïî * a^2 * 2))) := by
      have fact := Real.rpow_add (x := 2) (y := 7) (z := ùïî * a^2 * s + ùïî * a^2 * 2) (by positivity)
      rw_mod_cast [fact]
  have rightSide := calc 2 ^ (2 * ùïî * a ^ 2 + 4) * (8 * ((2 : ‚Ñù) ^ (ùïî * a ^ 2)) ^ s)
    _ = 2 ^ (2 * ùïî *a^2 + 4) * ((2^3)*((2 ^ (ùïî * a ^ 2)) ^ s)) := by
      norm_num
    _ = 2 ^ (2 * ùïî *a^2 + 4) * (  2^3 * 2 ^ (ùïî * a ^ 2 * s)  ) := by
      rw [Real.rpow_mul (x:=2) (by positivity)]
      norm_cast
    _ = 2 ^ (2 * ùïî * a^2 + 4) * 2 ^ (3 + ùïî * a ^ 2 * s) := by
      have fact := Real.rpow_add (x:=2) (y:= 3) (z:= ùïî * a ^ 2 * s) (by positivity)
      rw_mod_cast [fact]
    _ = 2 ^ (2 * ùïî * a^2 + 4  + (3 + ùïî * a ^ 2 * s)) := by
      nth_rw 2 [Real.rpow_add]
      norm_cast
      positivity
    _ = 2 ^ (7 + ((ùïî * a^2 * s) + (ùïî * a^2 * 2))) := by
      congrm 2 ^ ?_
      linarith
  rw_mod_cast [leftSide]
  rw_mod_cast [rightSide]

lemma calculation_13 : (2 : ‚Ñù) ^ (2 * ùïî * a ^ 3 + 4 * a) = (defaultA a) ^ (2 * ùïî * a ^ 2 + 4) := by
  simp only [defaultA, Nat.cast_pow, Nat.cast_ofNat]
  have fact := Real.rpow_mul (x := 2) (y := a) (z := 2 * ùïî * a ^ 2 + 4) (by positivity)
  rw_mod_cast [‚Üê fact]
  ring

lemma calculation_14 [PseudoMetricSpace X] [ProofData a q K œÉ‚ÇÅ œÉ‚ÇÇ F G] (n : ‚Ñï) :
    (2 : ‚Ñù) ^ ((Z : ‚Ñù) * n / 2 - (2 * ùïî + 1) * a ^ 3) ‚â§
      2 ^ ((Z : ‚Ñù) * n / 2 - (2 * ùïî * a ^ 3 + 4 * a)) := by
  gcongr
  ¬∑ linarith
  rw [show (2 * ùïî + 1) * (a : ‚Ñù) ^ 3 = 2 * ùïî * (a : ‚Ñù) ^ 3 + a ^ 3 by ring]
  gcongr _ + ?_
  rw [show (a : ‚Ñù) ^ 3 = a ^ 2 * a by ring]
  gcongr
  suffices 4 ^ 2 ‚â§ (a : ‚Ñù) ^ 2 by linarith
  apply pow_le_pow_left‚ÇÄ (ha := by linarith)
  exact_mod_cast four_le_a X

lemma calculation_15 {dist zon : ‚Ñù}
    (h : 2 ^ zon ‚â§ 2 ^ (2 * ùïî * a ^ 3 + 4 * a) * dist) :
    2 ^ (zon - (2 * ùïî * a^3 + 4*a)) ‚â§ dist := by
  rw [Real.rpow_sub (hx := by linarith)]
  rw [show dist = 2 ^ (2 * ùïî * a ^ 3 + 4 * a) * dist / 2 ^ (2 * ùïî * a ^ 3 + 4 * a) by simp]
  have := (div_le_div_iff_of_pos_right (c := 2 ^ (2 * ùïî * a ^ 3 + 4 * a))
    (hc := by positivity)).mpr h
  exact_mod_cast this

lemma calculation_16 [PseudoMetricSpace X] [ProofData a q K œÉ‚ÇÅ œÉ‚ÇÇ F G] (s : ‚Ñ§) :
    4 * (D : ‚Ñù) ^ s < 100 * D ^ (s + 1) := by
  gcongr
  ¬∑ linarith
  ¬∑ exact one_lt_D (X := X)
  ¬∑ linarith

lemma calculation_7_7_4 [PseudoMetricSpace X] [ProofData a q K œÉ‚ÇÅ œÉ‚ÇÇ F G] {n : ‚Ñï} :
  (1:‚Ñù) ‚â§ 2 ^ (Z * (n + 1)) - 4 := by
  rw [le_sub_iff_add_le]
  trans 2 ^ 3
  ¬∑ norm_num
  apply pow_right_mono‚ÇÄ (one_le_two)
  rw [‚Üê mul_one 3]
  have : 3 ‚â§ Z := by
    simp only [defaultZ]
    have := a_pos X
    trans 2 ^ 12
    ¬∑ norm_num
    gcongr
    ¬∑ norm_num
    omega
  exact Nat.mul_le_mul this (Nat.le_add_left 1 n)

/-- A bound on the sum of a geometric series whose ratio is close to 1. -/
lemma near_1_geometric_bound {t : ‚Ñù} (ht : t ‚àà Set.Icc 0 1) :
    (1 - 2 ^ (-t))‚Åª¬π ‚â§ 2 * (ENNReal.ofReal t)‚Åª¬π := by
  obtain ‚ü®lb, ub‚ü© := ht
  rw [ENNReal.inv_le_iff_inv_le, ENNReal.mul_inv (.inl two_ne_zero) (.inl ENNReal.ofNat_ne_top),
    inv_inv, ‚Üê ENNReal.div_eq_inv_mul, ‚Üê ENNReal.ofReal_ofNat 2, ‚Üê ENNReal.ofReal_one,
    ‚Üê ENNReal.ofReal_div_of_pos (by positivity), ENNReal.ofReal_rpow_of_pos (by positivity),
    ‚Üê ENNReal.ofReal_sub _ (by positivity)]
  apply ENNReal.ofReal_le_ofReal; change t / 2 ‚â§ 1 - 2 ^ (-t)
  have bne := rpow_one_add_le_one_add_mul_self (show -1 ‚â§ -1 / 2 by norm_num) lb ub
  rw [show (1 : ‚Ñù) + -1 / 2 = 2‚Åª¬π by norm_num, Real.inv_rpow zero_le_two,
    ‚Üê Real.rpow_neg zero_le_two] at bne
  linarith only [bne]

lemma calculation_convexity_bound [PseudoMetricSpace X] [ProofData a q K œÉ‚ÇÅ œÉ‚ÇÇ F G]
    {n : ‚Ñï} {t : ‚Ñù} (ht : t ‚àà Set.Icc 0 1) :
    ‚àë k ‚àà Finset.range n, ((D : ENNReal) ^ (-t)) ^ k ‚â§ 2 * (ENNReal.ofReal t)‚Åª¬π := by
  have a4 := four_le_a X
  refine le_trans ?_ (near_1_geometric_bound ht)
  calc
    _ ‚â§ ‚àë k ‚àà Finset.range n, ((2 : ENNReal) ^ (-t)) ^ k := by
      refine Finset.sum_le_sum fun k mk ‚Ü¶ pow_le_pow_left' ?_ k
      rw [ENNReal.rpow_neg, ENNReal.rpow_neg, ENNReal.inv_le_inv]
      refine ENNReal.rpow_le_rpow ?_ ht.1
      unfold defaultD
      norm_cast
      apply Nat.le_pow
      have : 0 < ùïî := by linarith [seven_le_c]
      positivity
    _ ‚â§ ‚àë' k : ‚Ñï, ((2 : ENNReal) ^ (-t)) ^ k := ENNReal.sum_le_tsum _
    _ = _ := ENNReal.tsum_geometric _

lemma calculation_7_6_2 [PseudoMetricSpace X] [ProofData a q K œÉ‚ÇÅ œÉ‚ÇÇ F G] {n : ‚Ñï} :
    ‚àë k ‚àà Finset.range n, ((D : ENNReal) ^ (-(Œ∫ / 2))) ^ k ‚â§ 2 ^ (10 * a + 2) :=
  calc
    _ ‚â§ 2 * (ENNReal.ofReal (Œ∫ / 2))‚Åª¬π := by
      apply calculation_convexity_bound (X := X)
      have := Œ∫_nonneg (a := a)
      have := Œ∫_le_one (a := a)
      rw [Set.mem_Icc]; constructor <;> linarith
    _ = _ := by
      rw [ENNReal.ofReal_div_of_pos zero_lt_two, ENNReal.ofReal_ofNat,
        ENNReal.inv_div (.inl ENNReal.ofNat_ne_top) (.inl two_ne_zero), ‚Üê mul_div_assoc,
        ENNReal.div_eq_inv_mul, defaultŒ∫, ‚Üê ENNReal.ofReal_rpow_of_pos zero_lt_two,
        ‚Üê ENNReal.inv_rpow, ‚Üê ENNReal.rpow_neg_one, ‚Üê ENNReal.rpow_mul,
        show -1 * (-10 * (a : ‚Ñù)) = (10 * a : ‚Ñï) by simp, ENNReal.rpow_natCast, ‚Üê sq,
        ENNReal.ofReal_ofNat, ‚Üê pow_add]

lemma calculation_150 [PseudoMetricSpace X] [ProofData a q K œÉ‚ÇÅ œÉ‚ÇÇ F G] :
    ùïî * (3/2) * a ^ 2 * Œ∫ ‚â§ 1 := by
  rw [defaultŒ∫, neg_mul, Real.rpow_neg zero_le_two]
  refine mul_inv_le_one_of_le‚ÇÄ ?_ (by positivity); norm_cast
  rw [show 2 ^ (10 * a) = 2 ^ (8 * a) * (2 ^ a) ^ 2 by ring]
  simp only [Nat.cast_pow, Nat.cast_mul, Nat.cast_ofNat]
  gcongr
  ¬∑ calc
      _ ‚â§ (2 : ‚Ñù) ^ (8 * 4) := by
        have : (ùïî : ‚Ñù) * (3/2) ‚â§ 100 * (3/2) := by gcongr; exact_mod_cast c_le_100
        linarith
      _ ‚â§ _ := by gcongr; exacts [one_le_two, four_le_a X]
  ¬∑ norm_cast
    exact Nat.lt_two_pow_self.le

lemma sq_le_two_pow_of_four_le (a4 : 4 ‚â§ a) : a ^ 2 ‚â§ 2 ^ a := by
  induction a, a4 using Nat.le_induction with
  | base => omega
  | succ a a4 ih =>
    rw [pow_succ 2, mul_two, add_sq, one_pow, mul_one, add_assoc]; gcongr
    calc
      _ ‚â§ 3 * a := by omega
      _ ‚â§ a * a := by gcongr; omega
      _ ‚â§ _ := by rwa [‚Üê sq]

lemma calculation_6_1_6 (a4 : 4 ‚â§ a) : 8 * a ^ 4 ‚â§ 2 ^ (2 * a + 3) := by
  calc
    _ = 2 ^ 3 * a ^ 2 * a ^ 2 := by ring
    _ ‚â§ 2 ^ 3 * 2 ^ a * 2 ^ a := by gcongr _ * ?_ * ?_ <;> exact sq_le_two_pow_of_four_le a4
    _ = _ := by ring
