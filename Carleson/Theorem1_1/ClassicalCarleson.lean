import Carleson.Carleson
import Carleson.HomogeneousType

--import Mathlib.Tactic
import Mathlib.Analysis.Fourier.AddCircle
import Mathlib.Algebra.BigOperators.Basic

--TODO: add local notation for f‚ÇÄ


noncomputable section
local macro_rules | `($x ^ $y) => `(HPow.hPow $x $y) -- Porting note: See issue lean4#2220

#check theorem1_1C
/- Specialize this to get the usual version of Carleson's theorem,
by taking `X = ‚Ñù`, `K x y := 1 / (x - y)` and `ùì† = {linear functions}`.
-/

def K : ‚Ñù ‚Üí ‚Ñù ‚Üí ‚ÑÇ := fun x y ‚Ü¶ 1 / (x - y)

instance : IsSpaceOfHomogeneousType ‚Ñù 2 := by
  have : IsSpaceOfHomogeneousType ‚Ñù (2 ^ FiniteDimensional.finrank ‚Ñù ‚Ñù) := inferInstance
  simpa

#check theorem1_1C K (by norm_num)

#check Complex.abs

#check Finset.range

#check AddCircle (2 * Real.pi)

--variable [IsSpaceOfHomogeneousType ‚Ñù 2] (Œº : MeasureTheory.Measure ‚Ñù)

open BigOperators
open Finset

#check fourier
--def stdCircle : AddCircle (2 * Real.pi)

#check Finset.Icc

section
open Metric
variable {Œ± : Type} {Œ≤ : Type}
--might be generalized
--TODO : choose better name
lemma uniformContinuous_iff_bounded [PseudoMetricSpace Œ±] [PseudoMetricSpace Œ≤] {f : Œ± ‚Üí Œ≤} {b : ‚Ñù} (bpos : b > 0):
  UniformContinuous f ‚Üî ‚àÄ Œµ > 0, ‚àÉ Œ¥ > 0, Œ¥ < b ‚àß ‚àÄ {x y : Œ±}, dist x y < Œ¥ ‚Üí dist (f x) (f y) < Œµ := by
  rw [Metric.uniformContinuous_iff]
  constructor
  . intro h Œµ Œµpos
    obtain ‚ü®Œ¥', Œ¥'pos, hŒ¥'‚ü© := h Œµ Œµpos
    use min Œ¥' (b / 2)
    constructor
    . exact (lt_min Œ¥'pos (by linarith)).gt
    constructor
    . apply min_lt_of_right_lt
      linarith
    . intro x y hxy
      exact hŒ¥' (lt_of_lt_of_le hxy (min_le_left Œ¥' (b / 2)))
  . intro h Œµ Œµpos
    obtain ‚ü®Œ¥, Œ¥pos, _, hŒ¥‚ü© := h Œµ Œµpos
    use Œ¥
end section


def partialFourierSum (f : ‚Ñù ‚Üí ‚ÑÇ) (N : ‚Ñï) : ‚Ñù ‚Üí ‚ÑÇ := fun x ‚Ü¶ ‚àë n in Icc (-Int.ofNat ‚ÜëN) N, fourierCoeffOn Real.two_pi_pos f n * fourier n (x : AddCircle (2 * Real.pi))
#check partialFourierSum

variable {f : ‚Ñù ‚Üí ‚ÑÇ} {N : ‚Ñï}

--TODO : add reasonable notation
--local notation "S_" => partialFourierSum f

--TODO : seems like theorem1_1 is actually Theorem 1.2 from the paper
theorem classical_carleson --{f : ‚Ñù ‚Üí ‚ÑÇ}
  (unicontf : UniformContinuous f) (periodicf : Function.Periodic f (2 * Real.pi)) (bdd_one : ‚àÄ x, Complex.abs (f x) ‚â§ 1)
  {Œµ : ‚Ñù} (hŒµ : 0 < Œµ ‚àß Œµ ‚â§ 2 * Real.pi) :
  --need condition E ‚äÜ Set.Icc 0 (2 * Real.pi) to ensure the E has finite volume
  ‚àÉ E ‚äÜ Set.Icc 0 (2 * Real.pi), MeasurableSet E ‚àß MeasureTheory.volume.real E ‚â§ Œµ ‚àß
  ‚àÉ N‚ÇÄ, ‚àÄ x ‚àà (Set.Icc 0 (2 * Real.pi)) \ E, ‚àÄ N > N‚ÇÄ,
  Complex.abs (f x - partialFourierSum f N x) ‚â§ Œµ := by
    --Choose some Œ¥.
    --TODO : use some scaled Œµ for the choose
    obtain ‚ü®Œ¥, Œ¥pos, Œ¥ltpi, hŒ¥‚ü© := (uniformContinuous_iff_bounded Real.pi_pos).mp unicontf (Œµ / 2) (by linarith)
    --definitions from section 10.1 depending on the choice of Œ¥
    set K := Nat.floor ((2 * Real.pi) / Œ¥) + 1 with Kdef
    have Kgt2 : (2 : ‚Ñù) < K := by
      rw [Kdef]
      have : 2 < 2 * Real.pi / Œ¥ := (lt_div_iff Œ¥pos).mpr ((mul_lt_mul_left (by norm_num)).mpr Œ¥ltpi)
      convert this.trans (Nat.lt_floor_add_one ((2 * Real.pi) / Œ¥))
      simp
    let f‚ÇÄ : ‚Ñù ‚Üí ‚ÑÇ := fun x ‚Ü¶ f ((2 * Real.pi * Int.floor ((K * x) / (2 * Real.pi))) / K)
    let E‚ÇÅ : Set ‚Ñù := ‚ãÉ k ‚àà range (K + 1), Set.Icc ((2 * Real.pi) / K * (k - Œµ / (16 * Real.pi))) ((2 * Real.pi) / K * (k + Œµ / (16 * Real.pi)))
    --added helper lemma
    have E‚ÇÅmeasurable : MeasurableSet E‚ÇÅ := by
      apply measurableSet_biUnion
      intro k hk
      exact measurableSet_Icc
    have E‚ÇÅvolume : MeasureTheory.volume.real E‚ÇÅ ‚â§ (Œµ / 2) := by
      calc MeasureTheory.volume.real E‚ÇÅ
      _ ‚â§ ‚àë k in range (K + 1), MeasureTheory.volume.real (Set.Icc ((2 * Real.pi) / K * (k - Œµ / (16 * Real.pi))) ((2 * Real.pi) / K * (k + Œµ / (16 * Real.pi)))) := by
        apply MeasureTheory.measureReal_biUnion_finset_le
      _ = ‚àë k in range (K + 1), Œµ / (4 * K) := by
        apply sum_congr
        . trivial
        intro k hk
        have : 2 * Real.pi / K * (k + Œµ / (16 * Real.pi)) - 2 * Real.pi / K * (k - Œµ / (16 * Real.pi)) = Œµ / (4 * K) := by
          field_simp
          ring
        rw [MeasureTheory.measureReal_def, Real.volume_Icc, ENNReal.toReal_ofReal]
        . exact this
        . rw [this]
          apply div_nonneg_iff.mpr
          left
          use hŒµ.1.le
          linarith
      _ ‚â§ (K + 1) * (Œµ / (4 * K)) := by
        rw [Finset.sum_const]
        simp
      _ = Œµ / 2 * ((K + 1)/(2 * K)) := by ring
      _ ‚â§ Œµ / 2 := by
        rewrite (config := {occs := .pos [2]}) [‚Üê mul_one (Œµ / 2)]
        gcongr
        linarith
        rw [div_le_iff (by linarith)]
        linarith
    --TODO : correct size of N‚ÇÄ
    let N‚ÇÄ := Nat.ceil (K^2 / Œµ^3)
    --Lemma 10.2 from the paper
    --changed interval to Icc to match the interval in the theorem
    have piecePartialFourierSumApprox {N : ‚Ñï} (hN : N > N‚ÇÄ) :
      ‚àÄ x ‚àà Set.Icc 0 (2 * Real.pi) \ E‚ÇÅ, Complex.abs (f‚ÇÄ x - partialFourierSum f‚ÇÄ N x) ‚â§ Œµ / 4:= by
      -- use has_pointwise_sum_fourier_series_of_summable or hasSum_fourier_series_L2 from mathlib?
      -- search for more convergence theorems
      sorry
    --Lemma 10.3 from the paper
    --TODO : review measurability assumption
    --added subset assumption
    --changed interval to match the interval in the theorem
    /-
    have diffPartialFourierSums : ‚àÉ E‚ÇÇ ‚äÜ Set.Icc 0 (2 * Real.pi), MeasurableSet E‚ÇÇ ‚àß MeasureTheory.volume.real E‚ÇÇ ‚â§ Œµ / 2 ‚àß ‚àÄ x ‚àà Set.Icc 0 (2 * Real.pi) \ E‚ÇÇ,
      sSup {Complex.abs (partialFourierSum f‚ÇÄ N x - partialFourierSum f N x) | N : ‚Ñï} ‚â§ Œµ / 4 := by
      sorry
    -/
    --simplified statement so that we do not have to worry about a sSup
    have diffPartialFourierSums : ‚àÉ E‚ÇÇ ‚äÜ Set.Icc 0 (2 * Real.pi), MeasurableSet E‚ÇÇ ‚àß MeasureTheory.volume.real E‚ÇÇ ‚â§ Œµ / 2 ‚àß ‚àÄ x ‚àà Set.Icc 0 (2 * Real.pi) \ E‚ÇÇ,
      ‚àÄ N, Complex.abs (partialFourierSum f‚ÇÄ N x - partialFourierSum f N x) ‚â§ Œµ / 4 := by
      sorry
    obtain ‚ü®E‚ÇÇ, E‚ÇÇsubset, E‚ÇÇmeasurable, E‚ÇÇvolume, hE‚ÇÇ‚ü© := diffPartialFourierSums


    --TODO : change definition of E‚ÇÅ to be able to prove this
    have E‚ÇÅsubset : E‚ÇÅ ‚äÜ Set.Icc 0 (2 * Real.pi) := by
      rw [Set.iUnion_subset_iff]
      simp
      intro k klt x
      simp
      intro lex xle
      sorry

    --set E := E‚ÇÅ ‚à™ E‚ÇÇ

    -- Definition of E, slightly changed compared to the paper
    /-
    use (E‚ÇÅ ‚à™ E‚ÇÇ) ‚à© Set.Icc 0 (2 * Real.pi)
    --use Set.union_subset E‚ÇÅsubset E‚ÇÇsubset
    constructor
    . apply Set.inter_subset_right
    use (E‚ÇÅmeasurable.union E‚ÇÇmeasurable).inter measurableSet_Icc
    constructor
    . calc MeasureTheory.volume.real ((E‚ÇÅ ‚à™ E‚ÇÇ) ‚à© Set.Icc 0 (2 * Real.pi))
      _ ‚â§ MeasureTheory.volume.real (E‚ÇÅ ‚à™ E‚ÇÇ) := by
        apply MeasureTheory.measureReal_mono (Set.inter_subset_left (E‚ÇÅ ‚à™ E‚ÇÇ) (Set.Icc 0 (2 * Real.pi))) _
        finiteness
      _ ‚â§ MeasureTheory.volume.real E‚ÇÅ + MeasureTheory.volume.real E‚ÇÇ := by apply MeasureTheory.measureReal_union_le
      _ ‚â§ Œµ / 2 + Œµ / 2 := by
          apply add_le_add E‚ÇÅvolume E‚ÇÇvolume
      _ = Œµ := by simp
    -/
    --Definition of E
    use E‚ÇÅ ‚à™ E‚ÇÇ
    use Set.union_subset E‚ÇÅsubset E‚ÇÇsubset
    use E‚ÇÅmeasurable.union E‚ÇÇmeasurable
    constructor
    . calc MeasureTheory.volume.real (E‚ÇÅ ‚à™ E‚ÇÇ)
      _ ‚â§ MeasureTheory.volume.real E‚ÇÅ + MeasureTheory.volume.real E‚ÇÇ := by apply MeasureTheory.measureReal_union_le
      _ ‚â§ Œµ / 2 + Œµ / 2 := by
          apply add_le_add E‚ÇÅvolume E‚ÇÇvolume
      _ = Œµ := by simp
    . use N‚ÇÄ
      intro x hx N NgtN‚ÇÄ
      --use "telescope" sum
      calc Complex.abs (f x - partialFourierSum f N x)
      _ = Complex.abs ((f x - f‚ÇÄ x) + (f‚ÇÄ x - partialFourierSum f‚ÇÄ N x) + (partialFourierSum f‚ÇÄ N x - partialFourierSum f N x)) := by congr; ring
      _ ‚â§ Complex.abs ((f x - f‚ÇÄ x) + (f‚ÇÄ x - partialFourierSum f‚ÇÄ N x)) + Complex.abs (partialFourierSum f‚ÇÄ N x - partialFourierSum f N x) := by
        apply AbsoluteValue.add_le
      _ ‚â§ Complex.abs (f x - f‚ÇÄ x) + Complex.abs (f‚ÇÄ x - partialFourierSum f‚ÇÄ N x) + Complex.abs (partialFourierSum f‚ÇÄ N x - partialFourierSum f N x) := by
        apply add_le_add_right
        apply AbsoluteValue.add_le
      _ ‚â§ (Œµ / 2) + (Œµ / 4) + (Œµ/4) := by
        gcongr
        . -- here, we use the definitions of Œ¥, K and f‚ÇÄ
          apply le_of_lt
          apply hŒ¥
          rw [Real.dist_eq]
          calc |x - 2 * Real.pi * ‚åäK * x / (2 * Real.pi)‚åã / K|
          _ = |2 * Real.pi * (K * x / (2 * Real.pi)) / K - 2 * Real.pi * ‚åäK * x / (2 * Real.pi)‚åã / K| := by congr; field_simp; ring
          _ = |2 * Real.pi * (K * x / (2 * Real.pi) - ‚åäK * x / (2 * Real.pi)‚åã) / K| := by
            ring_nf
          _ = 2 * Real.pi * |K * x / (2 * Real.pi) - ‚åäK * x / (2 * Real.pi)‚åã| / K := by
            rw [abs_div, abs_mul, abs_eq_self.mpr Real.two_pi_pos.le, abs_eq_self.mpr ((zero_lt_two).trans Kgt2).le]
          _ ‚â§ 2 * Real.pi * 1 / K := by
            apply (div_le_div_right ((zero_lt_two).trans Kgt2)).mpr
            apply (mul_le_mul_left Real.two_pi_pos).mpr
            rw [abs_eq_self.mpr]
            apply le_of_lt
            rw [sub_lt_iff_lt_add, add_comm]
            apply Int.lt_floor_add_one
            rw [le_sub_iff_add_le, zero_add]
            apply Int.floor_le
          _ < Œ¥ := by
            rw [div_lt_iff, mul_one, ‚Üê div_lt_iff' Œ¥pos]
            . push_cast
              apply Nat.lt_floor_add_one
            exact (zero_lt_two).trans Kgt2
        . have : x ‚àà Set.Icc 0 (2 * Real.pi) \ E‚ÇÅ := ‚ü®hx.1, fun xE‚ÇÅ ‚Ü¶ hx.2 (Set.mem_union_left E‚ÇÇ xE‚ÇÅ)‚ü©
          apply piecePartialFourierSumApprox NgtN‚ÇÄ x this
        . have : x ‚àà Set.Icc 0 (2 * Real.pi) \ E‚ÇÇ := ‚ü®hx.1, fun xE‚ÇÇ ‚Ü¶ hx.2 (Set.mem_union_right E‚ÇÅ xE‚ÇÇ)‚ü©
          apply hE‚ÇÇ x this N
      _ ‚â§ Œµ := by linarith


#check classical_carleson



section

open ENNReal

def k (x : ‚Ñù) : ‚ÑÇ := max (1 - |x|) 0 / (1 - Complex.exp (Complex.I * x))

local notation "Œ∏" => fun (n : ‚Ñ§) (x : ‚Ñù) ‚Ü¶ (n * x : ‚ÑÇ)

--lemma Œ∏cont {n : ‚Ñ§} : Continuous (Œ∏ n) := sorry

--def ùì† : Set C(‚Ñù, ‚ÑÇ) := {(Œ∏ n) | n : ‚Ñ§}

local notation "T_" => (CarlesonOperator (fun x y ‚Ü¶ k (x-y)) {(Œ∏ n) | n : ‚Ñ§})

/- Lemma 10.4 -/
lemma rcarleson {F G : Set ‚Ñù}
    (hF : MeasurableSet F) (hG : MeasurableSet G)
    (h2F : MeasureTheory.volume F ‚àà Set.Ioo 0 ‚àû) (h2G : MeasureTheory.volume G ‚àà Set.Ioo 0 ‚àû)
    :
    ‚Äñ‚à´ x in G, T_ (Set.indicator F 1) x‚Äñ‚Çä ‚â§
    (2^(2^40)) * (MeasureTheory.volume.real G) ^ (1 / 2) * (MeasureTheory.volume.real F) ^ (1 / 2) := by
  sorry

end section
