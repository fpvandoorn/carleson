import Carleson.Carleson
import Carleson.HomogeneousType
import Carleson.Theorem1_1.Basic
import Carleson.Theorem1_1.Approximation
import Carleson.Theorem1_1.Control_Approximation_Effect

import Mathlib.Analysis.Fourier.AddCircle


noncomputable section

/- Specialize this to get the usual version of Carleson's theorem,
by taking `X = ‚Ñù`, `K x y := 1 / (x - y)` and `ùì† = {linear functions}`.
-/

--def K : ‚Ñù ‚Üí ‚Ñù ‚Üí ‚ÑÇ := fun x y ‚Ü¶ 1 / (x - y)

theorem classical_carleson {f : ‚Ñù ‚Üí ‚ÑÇ}
    (unicontf : UniformContinuous f) (periodicf : Function.Periodic f (2 * Real.pi)) (bdd_one : ‚àÄ x, Complex.abs (f x) ‚â§ 1)
    {Œµ : ‚Ñù} (hŒµ : 0 < Œµ ‚àß Œµ ‚â§ 2 * Real.pi) :
    --need condition E ‚äÜ Set.Icc 0 (2 * Real.pi) to ensure the E has finite volume
    ‚àÉ E ‚äÜ Set.Icc 0 (2 * Real.pi), MeasurableSet E ‚àß MeasureTheory.volume.real E ‚â§ Œµ ‚àß
    ‚àÉ N‚ÇÄ, ‚àÄ x ‚àà (Set.Icc 0 (2 * Real.pi)) \ E, ‚àÄ N > N‚ÇÄ,
    Complex.abs (f x - partialFourierSum f N x) ‚â§ Œµ := by
  --TODO : use some scaled Œµ for the choose
  have Œµ2pos : (Œµ / 2) > 0 := by linarith [hŒµ.1]
  obtain ‚ü®f‚ÇÄ, contDiff_f‚ÇÄ, periodic_f‚ÇÄ, hf‚ÇÄ‚ü© := closeSmoothApproxPeriodic unicontf periodicf Œµ2pos

  --Lemma 10.2 from the paper
  --changed interval to Icc to match the interval in the theorem
  have Œµ4pos : Œµ / 4 > 0 := by linarith
  obtain ‚ü®N‚ÇÄ, hN‚ÇÄ‚ü© := fourierConv_ofTwiceDifferentiable periodic_f‚ÇÄ ((contDiff_top.mp (contDiff_f‚ÇÄ)) 2) Œµ4pos


  --Lemma 10.3 from the paper
  --TODO : review measurability assumption
  --added subset assumption
  --changed interval to match the interval in the theorem
  /-
  have diffPartialFourierSums : ‚àÉ E‚ÇÇ ‚äÜ Set.Icc 0 (2 * Real.pi), MeasurableSet E‚ÇÇ ‚àß MeasureTheory.volume.real E‚ÇÇ ‚â§ Œµ / 2 ‚àß ‚àÄ x ‚àà Set.Icc 0 (2 * Real.pi) \ E‚ÇÇ,
    sSup {Complex.abs (partialFourierSum f‚ÇÄ N x - partialFourierSum f N x) | N : ‚Ñï} ‚â§ Œµ / 4 := by
    sorry
  -/
  --simplified statement so that we do not have to worry about a sSup
  have diffPartialFourierSums : ‚àÉ E‚ÇÇ ‚äÜ Set.Icc 0 (2 * Real.pi), MeasurableSet E‚ÇÇ ‚àß MeasureTheory.volume.real E‚ÇÇ ‚â§ Œµ ‚àß ‚àÄ x ‚àà Set.Icc 0 (2 * Real.pi) \ E‚ÇÇ,
    ‚àÄ N, Complex.abs (partialFourierSum f‚ÇÄ N x - partialFourierSum f N x) ‚â§ Œµ / 4 := by
    sorry
  obtain ‚ü®E‚ÇÇ, E‚ÇÇsubset, E‚ÇÇmeasurable, E‚ÇÇvolume, hE‚ÇÇ‚ü© := diffPartialFourierSums

  --apply Set.mem_Ico_of_Ioo

  --Definition of E changed compared to the paper
  use E‚ÇÇ, E‚ÇÇsubset, E‚ÇÇmeasurable, E‚ÇÇvolume, N‚ÇÄ
  intro x hx N NgtN‚ÇÄ
  --use "telescope" sum
  calc Complex.abs (f x - partialFourierSum f N x)
  _ = Complex.abs ((f x - f‚ÇÄ x) + (f‚ÇÄ x - partialFourierSum f‚ÇÄ N x) + (partialFourierSum f‚ÇÄ N x - partialFourierSum f N x)) := by congr; ring
  _ ‚â§ Complex.abs ((f x - f‚ÇÄ x) + (f‚ÇÄ x - partialFourierSum f‚ÇÄ N x)) + Complex.abs (partialFourierSum f‚ÇÄ N x - partialFourierSum f N x) := by
    apply AbsoluteValue.add_le
  _ ‚â§ Complex.abs (f x - f‚ÇÄ x) + Complex.abs (f‚ÇÄ x - partialFourierSum f‚ÇÄ N x) + Complex.abs (partialFourierSum f‚ÇÄ N x - partialFourierSum f N x) := by
    apply add_le_add_right
    apply AbsoluteValue.add_le
  _ ‚â§ (Œµ / 2) + (Œµ / 4) + (Œµ / 4) := by
    gcongr
    . exact hf‚ÇÄ x
    . by_cases h : x = 2 * Real.pi
      . rw [h, ‚Üêzero_add (2 * Real.pi), periodic_f‚ÇÄ, partialFourierSum_periodic]
        apply hN‚ÇÄ N NgtN‚ÇÄ 0
        simp [Real.pi_pos]
      . have : x ‚àà Set.Ico 0 (2 * Real.pi) := by
          simp
          simp at hx
          use hx.1.1
          apply lt_of_le_of_ne hx.1.2 h
        convert hN‚ÇÄ N NgtN‚ÇÄ x this
    . exact hE‚ÇÇ x hx N
  _ ‚â§ Œµ := by linarith
