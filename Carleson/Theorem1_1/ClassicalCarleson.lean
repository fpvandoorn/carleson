import Carleson.Carleson
import Carleson.HomogeneousType

--import Mathlib.Tactic
import Mathlib.Analysis.Fourier.AddCircle
import Mathlib.Algebra.BigOperators.Basic

--TODO: add local notation for f‚ÇÄ


noncomputable section
local macro_rules | `($x ^ $y) => `(HPow.hPow $x $y) -- Porting note: See issue lean4#2220

/- Specialize this to get the usual version of Carleson's theorem,
by taking `X = ‚Ñù`, `K x y := 1 / (x - y)` and `ùì† = {linear functions}`.
-/

--def K : ‚Ñù ‚Üí ‚Ñù ‚Üí ‚ÑÇ := fun x y ‚Ü¶ 1 / (x - y)




#check Complex.abs

#check Finset.range

#check AddCircle (2 * Real.pi)

--variable [IsSpaceOfHomogeneousType ‚Ñù 2] (Œº : MeasureTheory.Measure ‚Ñù)

open BigOperators
open Finset

#check fourier
--def stdCircle : AddCircle (2 * Real.pi)

#check Finset.Icc

section
open Metric
variable {Œ± : Type} {Œ≤ : Type}
--might be generalized
--TODO : choose better name
lemma uniformContinuous_iff_bounded [PseudoMetricSpace Œ±] [PseudoMetricSpace Œ≤] {f : Œ± ‚Üí Œ≤} {b : ‚Ñù} (bpos : b > 0):
  UniformContinuous f ‚Üî ‚àÄ Œµ > 0, ‚àÉ Œ¥ > 0, Œ¥ < b ‚àß ‚àÄ {x y : Œ±}, dist x y < Œ¥ ‚Üí dist (f x) (f y) < Œµ := by
  rw [Metric.uniformContinuous_iff]
  constructor
  . intro h Œµ Œµpos
    obtain ‚ü®Œ¥', Œ¥'pos, hŒ¥'‚ü© := h Œµ Œµpos
    use min Œ¥' (b / 2)
    constructor
    . exact (lt_min Œ¥'pos (by linarith)).gt
    constructor
    . apply min_lt_of_right_lt
      linarith
    . intro x y hxy
      exact hŒ¥' (lt_of_lt_of_le hxy (min_le_left Œ¥' (b / 2)))
  . intro h Œµ Œµpos
    obtain ‚ü®Œ¥, Œ¥pos, _, hŒ¥‚ü© := h Œµ Œµpos
    use Œ¥
end section


def partialFourierSum (f : ‚Ñù ‚Üí ‚ÑÇ) (N : ‚Ñï) : ‚Ñù ‚Üí ‚ÑÇ := fun x ‚Ü¶ ‚àë n in Icc (-Int.ofNat ‚ÜëN) N, fourierCoeffOn Real.two_pi_pos f n * fourier n (x : AddCircle (2 * Real.pi))
#check partialFourierSum

variable {f : ‚Ñù ‚Üí ‚ÑÇ} {N : ‚Ñï}

--TODO : add reasonable notation
--local notation "S_" => partialFourierSum f

--TODO : seems like theorem1_1 is actually Theorem 1.2 from the paper
theorem classical_carleson --{f : ‚Ñù ‚Üí ‚ÑÇ}
  (unicontf : UniformContinuous f) (periodicf : Function.Periodic f (2 * Real.pi)) (bdd_one : ‚àÄ x, Complex.abs (f x) ‚â§ 1)
  {Œµ : ‚Ñù} (hŒµ : 0 < Œµ ‚àß Œµ ‚â§ 2 * Real.pi) :
  --need condition E ‚äÜ Set.Icc 0 (2 * Real.pi) to ensure the E has finite volume
  ‚àÉ E ‚äÜ Set.Icc 0 (2 * Real.pi), MeasurableSet E ‚àß MeasureTheory.volume.real E ‚â§ Œµ ‚àß
  ‚àÉ N‚ÇÄ, ‚àÄ x ‚àà (Set.Icc 0 (2 * Real.pi)) \ E, ‚àÄ N > N‚ÇÄ,
  Complex.abs (f x - partialFourierSum f N x) ‚â§ Œµ := by
    --Choose some Œ¥.
    --TODO : use some scaled Œµ for the choose
    obtain ‚ü®Œ¥, Œ¥pos, Œ¥ltpi, hŒ¥‚ü© := (uniformContinuous_iff_bounded Real.pi_pos).mp unicontf (Œµ / 2) (by linarith)
    --definitions from section 10.1 depending on the choice of Œ¥
    set K := Nat.floor ((2 * Real.pi) / Œ¥) + 1 with Kdef
    have Kgt2 : (2 : ‚Ñù) < K := by
      rw [Kdef]
      have : 2 < 2 * Real.pi / Œ¥ := (lt_div_iff Œ¥pos).mpr ((mul_lt_mul_left (by norm_num)).mpr Œ¥ltpi)
      convert this.trans (Nat.lt_floor_add_one ((2 * Real.pi) / Œ¥))
      simp
    let f‚ÇÄ : ‚Ñù ‚Üí ‚ÑÇ := fun x ‚Ü¶ f ((2 * Real.pi * Int.floor ((K * x) / (2 * Real.pi))) / K)
    let E‚ÇÅ : Set ‚Ñù := ‚ãÉ k ‚àà range (K + 1), Set.Icc ((2 * Real.pi) / K * (k - Œµ / (16 * Real.pi))) ((2 * Real.pi) / K * (k + Œµ / (16 * Real.pi)))
    --added helper lemma
    have E‚ÇÅmeasurable : MeasurableSet E‚ÇÅ := by
      apply measurableSet_biUnion
      intro k hk
      exact measurableSet_Icc
    have E‚ÇÅvolume : MeasureTheory.volume.real E‚ÇÅ ‚â§ (Œµ / 2) := by
      calc MeasureTheory.volume.real E‚ÇÅ
      _ ‚â§ ‚àë k in range (K + 1), MeasureTheory.volume.real (Set.Icc ((2 * Real.pi) / K * (k - Œµ / (16 * Real.pi))) ((2 * Real.pi) / K * (k + Œµ / (16 * Real.pi)))) := by
        apply MeasureTheory.measureReal_biUnion_finset_le
      _ = ‚àë k in range (K + 1), Œµ / (4 * K) := by
        apply sum_congr
        . trivial
        intro k hk
        have : 2 * Real.pi / K * (k + Œµ / (16 * Real.pi)) - 2 * Real.pi / K * (k - Œµ / (16 * Real.pi)) = Œµ / (4 * K) := by
          field_simp
          ring
        rw [MeasureTheory.measureReal_def, Real.volume_Icc, ENNReal.toReal_ofReal]
        . exact this
        . rw [this]
          apply div_nonneg_iff.mpr
          left
          use hŒµ.1.le
          linarith
      _ ‚â§ (K + 1) * (Œµ / (4 * K)) := by
        rw [Finset.sum_const]
        simp
      _ = Œµ / 2 * ((K + 1)/(2 * K)) := by ring
      _ ‚â§ Œµ / 2 := by
        rewrite (config := {occs := .pos [2]}) [‚Üê mul_one (Œµ / 2)]
        gcongr
        linarith
        rw [div_le_iff (by linarith)]
        linarith
    --TODO : correct size of N‚ÇÄ
    let N‚ÇÄ := Nat.ceil (K^2 / Œµ^3)
    --Lemma 10.2 from the paper
    --changed interval to Icc to match the interval in the theorem
    have piecePartialFourierSumApprox {N : ‚Ñï} (hN : N > N‚ÇÄ) :
      ‚àÄ x ‚àà Set.Icc 0 (2 * Real.pi) \ E‚ÇÅ, Complex.abs (f‚ÇÄ x - partialFourierSum f‚ÇÄ N x) ‚â§ Œµ / 4:= by
      -- use has_pointwise_sum_fourier_series_of_summable or hasSum_fourier_series_L2 from mathlib?
      -- search for more convergence theorems
      sorry
    --Lemma 10.3 from the paper
    --TODO : review measurability assumption
    --added subset assumption
    --changed interval to match the interval in the theorem
    /-
    have diffPartialFourierSums : ‚àÉ E‚ÇÇ ‚äÜ Set.Icc 0 (2 * Real.pi), MeasurableSet E‚ÇÇ ‚àß MeasureTheory.volume.real E‚ÇÇ ‚â§ Œµ / 2 ‚àß ‚àÄ x ‚àà Set.Icc 0 (2 * Real.pi) \ E‚ÇÇ,
      sSup {Complex.abs (partialFourierSum f‚ÇÄ N x - partialFourierSum f N x) | N : ‚Ñï} ‚â§ Œµ / 4 := by
      sorry
    -/
    --simplified statement so that we do not have to worry about a sSup
    have diffPartialFourierSums : ‚àÉ E‚ÇÇ ‚äÜ Set.Icc 0 (2 * Real.pi), MeasurableSet E‚ÇÇ ‚àß MeasureTheory.volume.real E‚ÇÇ ‚â§ Œµ / 2 ‚àß ‚àÄ x ‚àà Set.Icc 0 (2 * Real.pi) \ E‚ÇÇ,
      ‚àÄ N, Complex.abs (partialFourierSum f‚ÇÄ N x - partialFourierSum f N x) ‚â§ Œµ / 4 := by
      sorry
    obtain ‚ü®E‚ÇÇ, E‚ÇÇsubset, E‚ÇÇmeasurable, E‚ÇÇvolume, hE‚ÇÇ‚ü© := diffPartialFourierSums


    --TODO : change definition of E‚ÇÅ to be able to prove this
    have E‚ÇÅsubset : E‚ÇÅ ‚äÜ Set.Icc 0 (2 * Real.pi) := by
      rw [Set.iUnion_subset_iff]
      simp
      intro k klt x
      simp
      intro lex xle
      sorry

    --set E := E‚ÇÅ ‚à™ E‚ÇÇ

    -- Definition of E, slightly changed compared to the paper
    /-
    use (E‚ÇÅ ‚à™ E‚ÇÇ) ‚à© Set.Icc 0 (2 * Real.pi)
    --use Set.union_subset E‚ÇÅsubset E‚ÇÇsubset
    constructor
    . apply Set.inter_subset_right
    use (E‚ÇÅmeasurable.union E‚ÇÇmeasurable).inter measurableSet_Icc
    constructor
    . calc MeasureTheory.volume.real ((E‚ÇÅ ‚à™ E‚ÇÇ) ‚à© Set.Icc 0 (2 * Real.pi))
      _ ‚â§ MeasureTheory.volume.real (E‚ÇÅ ‚à™ E‚ÇÇ) := by
        apply MeasureTheory.measureReal_mono (Set.inter_subset_left (E‚ÇÅ ‚à™ E‚ÇÇ) (Set.Icc 0 (2 * Real.pi))) _
        finiteness
      _ ‚â§ MeasureTheory.volume.real E‚ÇÅ + MeasureTheory.volume.real E‚ÇÇ := by apply MeasureTheory.measureReal_union_le
      _ ‚â§ Œµ / 2 + Œµ / 2 := by
          apply add_le_add E‚ÇÅvolume E‚ÇÇvolume
      _ = Œµ := by simp
    -/
    --Definition of E
    use E‚ÇÅ ‚à™ E‚ÇÇ
    use Set.union_subset E‚ÇÅsubset E‚ÇÇsubset
    use E‚ÇÅmeasurable.union E‚ÇÇmeasurable
    constructor
    . calc MeasureTheory.volume.real (E‚ÇÅ ‚à™ E‚ÇÇ)
      _ ‚â§ MeasureTheory.volume.real E‚ÇÅ + MeasureTheory.volume.real E‚ÇÇ := by apply MeasureTheory.measureReal_union_le
      _ ‚â§ Œµ / 2 + Œµ / 2 := by
          apply add_le_add E‚ÇÅvolume E‚ÇÇvolume
      _ = Œµ := by simp
    . use N‚ÇÄ
      intro x hx N NgtN‚ÇÄ
      --use "telescope" sum
      calc Complex.abs (f x - partialFourierSum f N x)
      _ = Complex.abs ((f x - f‚ÇÄ x) + (f‚ÇÄ x - partialFourierSum f‚ÇÄ N x) + (partialFourierSum f‚ÇÄ N x - partialFourierSum f N x)) := by congr; ring
      _ ‚â§ Complex.abs ((f x - f‚ÇÄ x) + (f‚ÇÄ x - partialFourierSum f‚ÇÄ N x)) + Complex.abs (partialFourierSum f‚ÇÄ N x - partialFourierSum f N x) := by
        apply AbsoluteValue.add_le
      _ ‚â§ Complex.abs (f x - f‚ÇÄ x) + Complex.abs (f‚ÇÄ x - partialFourierSum f‚ÇÄ N x) + Complex.abs (partialFourierSum f‚ÇÄ N x - partialFourierSum f N x) := by
        apply add_le_add_right
        apply AbsoluteValue.add_le
      _ ‚â§ (Œµ / 2) + (Œµ / 4) + (Œµ/4) := by
        gcongr
        . -- here, we use the definitions of Œ¥, K and f‚ÇÄ
          apply le_of_lt
          apply hŒ¥
          rw [Real.dist_eq]
          calc |x - 2 * Real.pi * ‚åäK * x / (2 * Real.pi)‚åã / K|
          _ = |2 * Real.pi * (K * x / (2 * Real.pi)) / K - 2 * Real.pi * ‚åäK * x / (2 * Real.pi)‚åã / K| := by congr; field_simp; ring
          _ = |2 * Real.pi * (K * x / (2 * Real.pi) - ‚åäK * x / (2 * Real.pi)‚åã) / K| := by
            ring_nf
          _ = 2 * Real.pi * |K * x / (2 * Real.pi) - ‚åäK * x / (2 * Real.pi)‚åã| / K := by
            rw [abs_div, abs_mul, abs_eq_self.mpr Real.two_pi_pos.le, abs_eq_self.mpr ((zero_lt_two).trans Kgt2).le]
          _ ‚â§ 2 * Real.pi * 1 / K := by
            apply (div_le_div_right ((zero_lt_two).trans Kgt2)).mpr
            apply (mul_le_mul_left Real.two_pi_pos).mpr
            rw [abs_eq_self.mpr]
            apply le_of_lt
            rw [sub_lt_iff_lt_add, add_comm]
            apply Int.lt_floor_add_one
            rw [le_sub_iff_add_le, zero_add]
            apply Int.floor_le
          _ < Œ¥ := by
            rw [div_lt_iff, mul_one, ‚Üê div_lt_iff' Œ¥pos]
            . push_cast
              apply Nat.lt_floor_add_one
            exact (zero_lt_two).trans Kgt2
        . have : x ‚àà Set.Icc 0 (2 * Real.pi) \ E‚ÇÅ := ‚ü®hx.1, fun xE‚ÇÅ ‚Ü¶ hx.2 (Set.mem_union_left E‚ÇÇ xE‚ÇÅ)‚ü©
          apply piecePartialFourierSumApprox NgtN‚ÇÄ x this
        . have : x ‚àà Set.Icc 0 (2 * Real.pi) \ E‚ÇÇ := ‚ü®hx.1, fun xE‚ÇÇ ‚Ü¶ hx.2 (Set.mem_union_right E‚ÇÅ xE‚ÇÇ)‚ü©
          apply hE‚ÇÇ x this N
      _ ‚â§ Œµ := by linarith


#check classical_carleson



section

open ENNReal

def k (x : ‚Ñù) : ‚ÑÇ := max (1 - |x|) 0 / (1 - Complex.exp (Complex.I * x))
def K (x y : ‚Ñù) : ‚ÑÇ := k (x-y)

--TODO : call constructor in a better way?
def integer_linear (n : ‚Ñ§) : C(‚Ñù, ‚ÑÇ) := ‚ü®fun (x : ‚Ñù) ‚Ü¶ (n * x : ‚ÑÇ), by continuity‚ü©

local notation "Œ∏" => integer_linear

--lemma Œ∏cont {n : ‚Ñ§} : Continuous (Œ∏ n) := sorry

local notation "Œò" => {(Œ∏ n) | n : ‚Ñ§}

local notation "T_" => (CarlesonOperator K Œò)


#check theorem1_2C


-- copied from HomogeneousType
-- anyway, providing a proof would be good and is actually partly part of section 10.7
instance helper {E : Type*} [NormedAddCommGroup E] [NormedSpace ‚Ñù E] [FiniteDimensional ‚Ñù E] :
    IsSpaceOfHomogeneousType E (2 ^ FiniteDimensional.finrank ‚Ñù E) := by sorry

/- lemmas 10.22 to 10.26 are for this -/
instance IsSpaceOfHomogeneousTypeR2: IsSpaceOfHomogeneousType ‚Ñù 2 := by
  have : IsSpaceOfHomogeneousType ‚Ñù (2 ^ FiniteDimensional.finrank ‚Ñù ‚Ñù) := by apply helper
  simpa

lemma h1 : 2 ‚àà Set.Ioc 1 (2 : ‚Ñù) := by simp
lemma h2 : Real.IsConjExponent 2 2 := by rw [Real.isConjExponent_iff_eq_conjExponent] <;> norm_num


--mainly have to work for the following lemmas

/-Cf. section below lemma 10.26-/
lemma localOscillation_of_integer_linear {x R: ‚Ñù}  : ‚àÄ n m : ‚Ñ§, localOscillation (Metric.ball x R) (Œ∏ n) (Œ∏ m) = 2 * R * |(n : ‚Ñù) - m| := by
  --TODO : readd (Rpos : R > 0) or (better) add a case distinction
  intro n m
  /- Rewrite to a more convenient form for the following steps. -/
  calc localOscillation (Metric.ball x R) (Œ∏ n) (Œ∏ m)
    _ = ‚®Ü z ‚àà (Metric.ball x R) √óÀ¢ (Metric.ball x R), ‚Äñ(n - m) * (z.1 - x) - (n - m) * (z.2 - x)‚Äñ := by
      --TODO : shorten the following
      rw [localOscillation]
      congr
      ext z
      rw [‚ÜêComplex.norm_real]
      congr
      ext h
      congr
      rw [integer_linear, integer_linear]
      simp
      ring
  /- Show inequalities in both directions. -/
  apply le_antisymm
  . calc ‚®Ü z ‚àà (Metric.ball x R) √óÀ¢ (Metric.ball x R), ‚Äñ(n - m) * (z.1 - x) - (n - m) * (z.2 - x)‚Äñ
      _ ‚â§ 2 * R * |‚Üën - ‚Üëm| := by
        apply Real.iSup_le
        --TODO: investigate strange (delaborator) behavior - why is there still a sup?
        intro z
        apply Real.iSup_le
        . intro hz
          simp at hz
          rw [Real.dist_eq, Real.dist_eq] at hz
          rw [Real.norm_eq_abs]
          calc |(n - m) * (z.1 - x) - (n - m) * (z.2 - x)|
          _ ‚â§ |(n - m) * (z.1 - x)| + |(n - m) * (z.2 - x)| := by apply abs_sub
          _ = |‚Üën - ‚Üëm| * |z.1 - x| + |‚Üën - ‚Üëm| * |z.2 - x| := by congr <;> apply abs_mul
          _ ‚â§ |‚Üën - ‚Üëm| * R + |‚Üën - ‚Üëm| * R := by gcongr; linarith [hz.1]; linarith [hz.2]
          _ = 2 * R * |‚Üën - ‚Üëm| := by ring
        --TODO: fix this
        repeat
          apply mul_nonneg
          linarith
          apply abs_nonneg
        sorry
        sorry
  . apply le_of_forall_le
    intro c hc
    let R' := c / (2 * |(n : ‚Ñù) - m|)
    --TODO: seems like we do not use the right theorem here...
    --apply le_iSup
    --apply le_iSup_iff.2
    apply (Real.le_sSup_iff _ _).mpr
    . intro Œµ Œµpos
      use |c|
      simp
      --rw [exists_exists]
      constructor
      . use (x + R'), (x - R')
        simp
        apply le_antisymm
        . apply Real.iSup_le
          . intro h
            calc |(‚Üën - ‚Üëm) * R' + (‚Üën - ‚Üëm) * R'|
            _ ‚â§ |(‚Üën - ‚Üëm) * R'| + |(‚Üën - ‚Üëm) * R'| := by apply abs_add
            _ = |‚Üën - ‚Üëm| * |R'| + |‚Üën - ‚Üëm| * |R'| := by congr <;> apply abs_mul
            _ = 2 * |‚Üën - ‚Üëm| * |c / (2 * |‚Üën - ‚Üëm|)| := by ring
            _ = 2 * |‚Üën - ‚Üëm| * (|c| / |(2 * |‚Üën - ‚Üëm|)|) := by congr; apply abs_div
            _ = 2 * |‚Üën - ‚Üëm| * (|c| / (2 * |‚Üën - ‚Üëm|)) := by congr; apply abs_of_nonneg; apply mul_nonneg; linarith; apply abs_nonneg
            _ = |c| := by
              ring_nf
              apply mul_div_cancel_left‚ÇÄ
              --TODO : extra case
              sorry
          . apply abs_nonneg
        . sorry
        --rw [Real.iSup_]
      linarith [le_abs_self c]
    . sorry
    . sorry
  --have : localOscillation (Metric.ball x R) (Œ∏ n) (Œ∏ m) =


/- to HomogeneousType -/
lemma isSpaceOfHomogeneousType_with_increased_constant {X : Type} {a b : ‚Ñù} [MetricSpace X] [IsSpaceOfHomogeneousType X a] (aleb : a ‚â§ b) : IsSpaceOfHomogeneousType X b where
  volume_ball_two_le_same := by
    intro x r
    calc MeasureTheory.volume.real (Metric.ball x (2 * r))
    _ ‚â§ a * MeasureTheory.volume.real (Metric.ball x r) := by apply volume_ball_two_le_same
    _ ‚â§ b * MeasureTheory.volume.real (Metric.ball x r) := by gcongr

--TODO : decide whether to move this up so that all the above lemmas are directly proven with the right doubling constant
instance badR: IsSpaceOfHomogeneousType ‚Ñù 4 := by
  have : IsSpaceOfHomogeneousType ‚Ñù (2 ^ FiniteDimensional.finrank ‚Ñù ‚Ñù) := by apply helper
  simp at this
  exact isSpaceOfHomogeneousType_with_increased_constant (by linarith)

instance h4 : IsCompatible Œò where
  /- Lemma 10.32 (real line doubling) from the paper. -/
  localOscillation_two_mul_le := by
    intro x‚ÇÅ x‚ÇÇ R f g hf hg _
    obtain ‚ü®n, hŒ∏nf‚ü© := hf
    obtain ‚ü®m, hŒ∏mg‚ü© := hg
    rw [‚ÜêhŒ∏nf, ‚ÜêhŒ∏mg]
    rw [localOscillation_of_integer_linear, localOscillation_of_integer_linear]
    ring_nf
    sorry
    --gcongr

  /- Lemma 10.33 (frequency ball doubling) from the paper. -/
  localOscillation_le_of_subset := by
    intro x‚ÇÅ x‚ÇÇ R f g hf hg _ _
    obtain ‚ü®n, hŒ∏nf‚ü© := hf
    obtain ‚ü®m, hŒ∏mg‚ü© := hg
    rw [‚ÜêhŒ∏nf, ‚ÜêhŒ∏mg]
    rw [localOscillation_of_integer_linear, localOscillation_of_integer_linear]
    ring_nf
    sorry
    --trivial
  /- Lemma 10.35 (frequency ball cover) from the paper. -/
  ballsCoverBalls := by
    intro x R R' f hf
    obtain ‚ü®n, hŒ∏nf‚ü© := hf
    rw [‚ÜêhŒ∏nf]
    let m‚ÇÅ := Nat.floor (n - R' / 2)
    let m‚ÇÇ := n
    let m‚ÇÉ := Nat.ceil (n + R' / 2)
    rw [coveredByBalls_iff]
    let (a : Finset ‚Ñï) := {1, 2, 3}
    /- The following is necessary for withLocalOscillation to be defined. -/
    have ball_bounded := fact_isCompact_ball x R
    sorry
    --TODO: fix problems with Finset
    /-
    let balls : Finset (C(‚Ñù, ‚ÑÇ)) := {Œ∏ m‚ÇÅ, Œ∏ m‚ÇÇ, Œ∏ m‚ÇÉ} --with balls_def
    use balls
    constructor
    . rw [balls_def]
      apply card_le_three
    -/


--TODO : What is Lemma 10.34 (frequency ball growth) needed for?

--TODO : possibly issues with a different "doubling constant" than in the paper (4 instead of 2)
instance h5 : IsCancellative 2 Œò where
  /- Lemma 10.36 (real van der Corput) from the paper. -/
  norm_integral_exp_le := by sorry

/- Lemma 10.9 (lower secant bound) from the paper. -/
lemma lower_secant_bound {Œ∑ : ‚Ñù} (Œ∑pos : Œ∑ > 0) {x : ‚Ñù} (xIcc : x ‚àà Set.Icc (-2 * Real.pi + Œ∑) (2 * Real.pi - Œ∑)) (xAbs : Œ∑ ‚â§ |x|) :
    Œ∑ / 8 ‚â§ ‚Äñ1 - Complex.exp (Complex.I * x)‚Äñ := by
  sorry

/- Lemma 10.38 (Hilbert kernel regularity) -/
lemma Hilbert_kernel_regularity {x y y' : ‚Ñù} :
    2 * |y - y'| ‚â§ |x - y| ‚Üí ‚ÄñK x y - K x y'‚Äñ ‚â§ 2 ^ 10 * (1 / |x - y|) * (|y - y'| / |x - y|)  := by
  sorry

--TODO : add some Real.vol lemma

instance h6 : IsCZKernel 4 K where
  /- Lemma 10.37 (Hilbert kernel bound) from the paper. -/
  norm_le_vol_inv := by
    intro x y
    by_cases h : 0 < |x - y| ‚àß |x - y| < 1
    . calc ‚ÄñK x y‚Äñ
        _ ‚â§ 1 / ‚Äñ1 - Complex.exp (Complex.I * ‚Üë(x - y))‚Äñ := by
          rw [K, k, norm_div]
          gcongr
          rw [Complex.norm_real, Real.norm_eq_abs, abs_of_nonneg]
          . apply max_le
            linarith [abs_nonneg (x-y)]
            linarith
          . apply le_max_right
        _ ‚â§ 1 / (|x - y| / 8) := by
          gcongr
          . linarith
          . apply lower_secant_bound
            . exact h.1
            . rw [Set.mem_Icc]
              --TODO : improve calculations
              constructor
              . simp
                calc |x - y|
                  _ ‚â§ 1 := h.2.le
                  _ ‚â§ 2 * Real.pi - 1 := by
                    rw [le_sub_iff_add_le]
                    linarith [Real.two_le_pi]
                  _ ‚â§ 2 * Real.pi + (x - y) := by
                    rw [sub_eq_add_neg]
                    gcongr
                    exact (abs_le.mp h.2.le).1
              . calc x - y
                  _ ‚â§ |x - y| := le_abs_self (x - y)
                  _ ‚â§ 1 := h.2.le
                  _ ‚â§ 2 * Real.pi - 1 := by
                    rw [le_sub_iff_add_le]
                    linarith [Real.two_le_pi]
                  _ ‚â§ 2 * Real.pi - |x - y| := by
                    gcongr
                    exact h.2.le
            . trivial
        _ = 8 / |x - y| := by
          field_simp
        _ ‚â§ (2 : ‚Ñù) ^ (4 : ‚Ñù) ^ 3 / Real.vol x y := by
          rw [Real.vol, MeasureTheory.measureReal_def, Real.dist_eq, Real.volume_ball, ENNReal.toReal_ofReal]
          . ring_nf
            gcongr
            norm_num
          . linarith
        _ = (2 : ‚Ñù) ^ (4 : ‚Ñù) ^ 3 / @Real.vol ‚Ñù Real.pseudoMetricSpace IsSpaceOfHomogeneousType.toMeasureSpace x y := by
          congr
          --TODO : Identify Real.measureSpace = IsSpaceOfHomogeneousType.toMeasureSpace
          --rw [IsSpaceOfHomogeneousType.toMeasureSpace, badR]
          sorry
    . push_neg at h
      have : ‚ÄñK x y‚Äñ = 0 := by
        rw [norm_eq_zero, K, k, _root_.div_eq_zero_iff]
        by_cases xeqy : x = y
        . right
          simp [xeqy]
        . left
          simp
          apply h (abs_pos.mpr (sub_ne_zero.mpr xeqy))
      rw [this]
      apply div_nonneg
      . norm_num
      . exact MeasureTheory.measureReal_nonneg
  /- uses Lemma 10.38 (Hilbert kernel regularity) -/
  norm_sub_le := by sorry
  /- Lemma ?-/
  measurable_right := by sorry
  /- Lemma ?-/
  measurable := by sorry

/- Lemma ?-/
lemma h3 : NormBoundedBy (ANCZOperatorLp 2 K) 1 := sorry



#check @theorem1_2C
--#check theorem1_2C K (by simp) h1 h2 _ _ h3

/- Lemma 10.4 -/
--TODO : directly write out constant (2^(2^40)) ?
lemma rcarleson {F G : Set ‚Ñù}
    (hF : MeasurableSet F) (hG : MeasurableSet G)
    (h2F : MeasureTheory.volume F ‚àà Set.Ioo 0 ‚àû) (h2G : MeasureTheory.volume G ‚àà Set.Ioo 0 ‚àû)
    (f : ‚Ñù ‚Üí ‚ÑÇ) (hf : ‚àÄ x, ‚Äñf x‚Äñ ‚â§ F.indicator 1 x)
    :
    ‚Äñ‚à´ x in G, T_ f x‚Äñ ‚â§
    C1_2 4 2 * (MeasureTheory.volume.real G) ^ (2 : ‚Ñù)‚Åª¬π * (MeasureTheory.volume.real F) ^ (2 : ‚Ñù)‚Åª¬π := by
  have hF' :  @MeasurableSet ‚Ñù (@MeasureTheory.MeasureSpace.toMeasurableSpace ‚Ñù IsSpaceOfHomogeneousType.toMeasureSpace) F := by sorry
  have hG' :  @MeasurableSet ‚Ñù (@MeasureTheory.MeasureSpace.toMeasurableSpace ‚Ñù IsSpaceOfHomogeneousType.toMeasureSpace) G := by sorry
  --WARNING : theorem1_2C does not yet require all necessary implicit parameters since no proof using them has been provided yet.
  convert theorem1_2C K (by simp) h1 h2 hF' hG' h3 f hf <;> sorry


end section
