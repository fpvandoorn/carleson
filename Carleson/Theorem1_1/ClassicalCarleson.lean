import Carleson.Carleson
import Carleson.HomogeneousType

import Mathlib.Analysis.Fourier.AddCircle
import Mathlib.Algebra.BigOperators.Basic


noncomputable section
local macro_rules | `($x ^ $y) => `(HPow.hPow $x $y) -- Porting note: See issue lean4#2220

#check theorem1_1C
/- Specialize this to get the usual version of Carleson's theorem,
by taking `X = ‚Ñù`, `K x y := 1 / (x - y)` and `ùì† = {linear functions}`.
-/

def K : ‚Ñù ‚Üí ‚Ñù ‚Üí ‚ÑÇ := fun x y ‚Ü¶ 1 / (x - y)

instance : IsSpaceOfHomogeneousType ‚Ñù 2 := by
  have : IsSpaceOfHomogeneousType ‚Ñù (2 ^ FiniteDimensional.finrank ‚Ñù ‚Ñù) := inferInstance
  simpa

#check theorem1_1C K (by norm_num)

#check Complex.abs

#check Finset.range

#check AddCircle (2 * Real.pi)

variable [IsSpaceOfHomogeneousType ‚Ñù 2] (Œº : MeasureTheory.Measure ‚Ñù)

open BigOperators
open Finset

#check fourier
--def stdCircle : AddCircle (2 * Real.pi)

def partialFourierSum (f : ‚Ñù ‚Üí ‚ÑÇ) (N : ‚Ñï) : ‚Ñù ‚Üí ‚ÑÇ := fun x ‚Ü¶ ‚àë n in range (2 * N + 1), fourierCoeffOn Real.two_pi_pos f (n - N) * fourier (n - N) (x : AddCircle (2 * Real.pi))
#check partialFourierSum

--let Œº : MeasureTheory.Measure ‚Ñù := MeasureTheory.volume

--TODO : seems like theorem1_1 is actually Theorem 1.2 from the paper
--TODO : check and compare to version in mathlib has_pointwise_sum_fourier_series_of_summable and similar
theorem classical_carleson {f : ‚Ñù ‚Üí ‚ÑÇ}
  (unicontf : UniformContinuous f) (periodicf : Function.Periodic f (2 * Real.pi)) (bdd_one : ‚àÄ x, Complex.abs (f x) ‚â§ 1)
  {Œµ : ‚Ñù} (hŒµ : 0 < Œµ ‚àß Œµ ‚â§ 2 * Real.pi) :
  --TODO: readd condition E ‚äÜ Set.Icc 0 (2 * Real.pi) ?
  ‚àÉ E : Set ‚Ñù, MeasurableSet E ‚àß MeasureTheory.volume E ‚â§ Œµ.toNNReal ‚àß
  ‚àÉ N‚ÇÄ, ‚àÄ x ‚àà (Set.Icc 0 (2 * Real.pi)) \ E, ‚àÄ N > N‚ÇÄ,
  Complex.abs (f x - partialFourierSum f N x) ‚â§ Œµ := by
    --TODO : use some scaled Œµ for the choose
    --TODO : ensure that we choose Œ¥ < Real.pi
    choose Œ¥ Œ¥pos hŒ¥ using Metric.uniformContinuous_iff.mp unicontf Œµ hŒµ.1
    have Œ¥ltpi : Œ¥ < Real.pi := sorry

    --definitions from section 10.1 depending on the choice of Œ¥
    set K := Nat.floor ((2 * Real.pi) / Œ¥) + 1 with Kdef
    have Kgt2 : (2 : ‚Ñù) < K := by
      rw [Kdef]
      have : 2 < 2 * Real.pi / Œ¥ := (lt_div_iff Œ¥pos).mpr ((mul_lt_mul_left (by norm_num)).mpr Œ¥ltpi)
      convert this.trans (Nat.lt_floor_add_one ((2 * Real.pi) / Œ¥))
      simp
    let f‚ÇÄ : ‚Ñù ‚Üí ‚ÑÇ := fun x ‚Ü¶ f ((2 * Real.pi * Int.floor ((K * x) / (2 * Œ¥))) / K)
    let E‚ÇÅ : Set ‚Ñù := ‚ãÉ k ‚àà range (K + 1), Set.Icc ((2 * Real.pi) / K * (k - Œµ / (16 * Real.pi))) ((2 * Real.pi) / K * (k + Œµ / (16 * Real.pi)))
    --added helper lemma
    have E‚ÇÅmeasurable : MeasurableSet E‚ÇÅ := by
      --rw [E‚ÇÅdef]
      apply measurableSet_biUnion
      intro k hk
      exact measurableSet_Icc
    have E‚ÇÅvolume : MeasureTheory.volume E‚ÇÅ ‚â§ (Œµ / 2).toNNReal := by
      calc MeasureTheory.volume E‚ÇÅ
      _ ‚â§ ‚àë k in range (K + 1), MeasureTheory.volume (Set.Icc ((2 * Real.pi) / K * (k - Œµ / (16 * Real.pi))) ((2 * Real.pi) / K * (k + Œµ / (16 * Real.pi)))) := by
        apply MeasureTheory.measure_biUnion_finset_le
      _ = ‚àë k in range (K + 1), ‚Üë(Œµ / (4 * K)).toNNReal := by
        apply sum_congr
        . trivial
        intro k hk
        rw [Real.volume_Icc]
        congr
        field_simp
        ring
      _ ‚â§ (K + 1) * ‚Üë(Œµ / (4 * K)).toNNReal := by
        rw [Finset.sum_const]
        simp
      _ = (Œµ / 2 * ((K + 1)/(2 * K))).toNNReal := by
        sorry
      _ ‚â§ (Œµ / 2).toNNReal := by sorry

    --TODO : correct size of N‚ÇÄ
    let N‚ÇÄ := Nat.ceil (K^2 / Œµ^3)
    --Lemma 10.2 from the paper
    have piecePartialFourierSumApprox {N : ‚Ñï} (hN : N > N‚ÇÄ) :
      ‚àÄ x ‚àà Set.Ico 0 (2 * Real.pi) \ E‚ÇÅ, Complex.abs (f‚ÇÄ x - partialFourierSum f‚ÇÄ N x) ‚â§ Œµ / 4:= by
      sorry
    --Lemma 10.3 from the paper
    --TODO : review measurability assumption
    have diffPartialFourierSums : ‚àÉ E‚ÇÇ, MeasurableSet E‚ÇÇ ‚àß MeasureTheory.volume E‚ÇÇ ‚â§ (Œµ / 2).toNNReal ‚àß ‚àÄ x ‚àà (Set.Ico 0 1) \ E‚ÇÇ,
      sSup {Complex.abs (partialFourierSum f‚ÇÄ N x - partialFourierSum f N x) | N : ‚Ñï} ‚â§ Œµ / 4 := by
      sorry
    obtain ‚ü®E‚ÇÇ, E‚ÇÇmeasurable, E‚ÇÇvolume, hE‚ÇÇ‚ü© := diffPartialFourierSums

    --set E := E‚ÇÅ ‚à™ E‚ÇÇ
    use E‚ÇÅ ‚à™ E‚ÇÇ
    use E‚ÇÅmeasurable.union E‚ÇÇmeasurable
    constructor
    . calc MeasureTheory.volume (E‚ÇÅ ‚à™ E‚ÇÇ)
      _ ‚â§ MeasureTheory.volume E‚ÇÅ + MeasureTheory.volume E‚ÇÇ := by apply MeasureTheory.measure_union_le
      _ ‚â§ (Œµ / 2).toNNReal + (Œµ / 2).toNNReal := by
        apply add_le_add E‚ÇÅvolume E‚ÇÇvolume
      _ = Œµ.toNNReal := by sorry
        --rw [‚Üêcoe_add]
    . use N‚ÇÄ
      intro x hx N NgtN‚ÇÄ
      --use "telescope" sum
      calc Complex.abs (f x - partialFourierSum f N x)
      _ = Complex.abs ((f x - f‚ÇÄ x) + (f‚ÇÄ x - partialFourierSum f‚ÇÄ N x) + (partialFourierSum f‚ÇÄ N x - partialFourierSum f N x)) := by congr; ring
      _ ‚â§ Complex.abs ((f x - f‚ÇÄ x) + (f‚ÇÄ x - partialFourierSum f‚ÇÄ N x)) + Complex.abs (partialFourierSum f‚ÇÄ N x - partialFourierSum f N x) := by
        apply AbsoluteValue.add_le
      _ ‚â§ Complex.abs (f x - f‚ÇÄ x) + Complex.abs (f‚ÇÄ x - partialFourierSum f‚ÇÄ N x) + Complex.abs (partialFourierSum f‚ÇÄ N x - partialFourierSum f N x) := by
        apply add_le_add_right
        apply AbsoluteValue.add_le
      _ ‚â§ (Œµ / 2) + (Œµ / 4) + (Œµ/4) := by
        apply add_le_add
        . apply add_le_add
          . sorry --obtain this from hŒ¥ somehow
          . apply piecePartialFourierSumApprox NgtN‚ÇÄ x
            simp
            constructor
            . sorry
            . have := hx.2
              simp at this
              push_neg at this
              exact this.1
        . sorry --apply hE‚ÇÇ x
      _ ‚â§ Œµ := by field_simp; ring_nf; trivial





#check classical_carleson
