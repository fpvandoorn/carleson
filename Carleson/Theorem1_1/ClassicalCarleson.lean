import Carleson.Carleson
import Carleson.HomogeneousType

import Mathlib.Analysis.Fourier.AddCircle
import Mathlib.Algebra.BigOperators.Basic


noncomputable section
local macro_rules | `($x ^ $y) => `(HPow.hPow $x $y) -- Porting note: See issue lean4#2220

#check theorem1_1C
/- Specialize this to get the usual version of Carleson's theorem,
by taking `X = ‚Ñù`, `K x y := 1 / (x - y)` and `ùì† = {linear functions}`.
-/

def K : ‚Ñù ‚Üí ‚Ñù ‚Üí ‚ÑÇ := fun x y ‚Ü¶ 1 / (x - y)

instance : IsSpaceOfHomogeneousType ‚Ñù 2 := by
  have : IsSpaceOfHomogeneousType ‚Ñù (2 ^ FiniteDimensional.finrank ‚Ñù ‚Ñù) := inferInstance
  simpa

#check theorem1_1C K (by norm_num)

#check Complex.abs

#check Finset.range

#check AddCircle (2 * Real.pi)

open BigOperators
open Finset


#check fourier
--def stdCircle : AddCircle (2 * Real.pi)

def partialFourierSum (f : ‚Ñù ‚Üí ‚ÑÇ) (N : ‚Ñï) : ‚Ñù ‚Üí ‚ÑÇ := fun x ‚Ü¶ ‚àë n in range (2 * N + 1), fourierCoeffOn Real.two_pi_pos f (n - N) * fourier (n - N) (x : AddCircle (2 * Real.pi))

--#check partialFourierSum

variable [IsSpaceOfHomogeneousType ‚Ñù 2] (Œº : MeasureTheory.Measure ‚Ñù)

--TODO : seems like theorem1_1 is actually Theorem 1.2 from the paper
--TODO : check and compare to version in mathlib has_pointwise_sum_fourier_series_of_summable and similar
theorem classical_carleson {f : ‚Ñù ‚Üí ‚ÑÇ} (unicontf : UniformContinuous f)
  (periodicf : Function.Periodic f (2 * Real.pi)) (bdd_one : ‚àÄ x, Complex.abs (f x) ‚â§ 1)
  {Œµ : ‚Ñù} (hŒµ : 0 < Œµ ‚àß Œµ ‚â§ 2 * Real.pi) :
  ‚àÉ E ‚äÜ Set.Icc 0 (2 * Real.pi), MeasurableSet E ‚àß MeasureTheory.volume.real E ‚â§ Œµ ‚àß
  ‚àÉ N‚ÇÄ > 0, ‚àÄ x ‚àà (Set.Icc 0 (2 * Real.pi)) \ E, ‚àÄ N > N‚ÇÄ,
  Complex.abs (f x - partialFourierSum f N x) ‚â§ Œµ := sorry
