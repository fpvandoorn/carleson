import Carleson.Carleson
import Carleson.HomogeneousType

import Mathlib.Analysis.Fourier.AddCircle
import Mathlib.Algebra.BigOperators.Basic


noncomputable section
local macro_rules | `($x ^ $y) => `(HPow.hPow $x $y) -- Porting note: See issue lean4#2220

#check theorem1_1C
/- Specialize this to get the usual version of Carleson's theorem,
by taking `X = ‚Ñù`, `K x y := 1 / (x - y)` and `ùì† = {linear functions}`.
-/

def K : ‚Ñù ‚Üí ‚Ñù ‚Üí ‚ÑÇ := fun x y ‚Ü¶ 1 / (x - y)

instance : IsSpaceOfHomogeneousType ‚Ñù 2 := by
  have : IsSpaceOfHomogeneousType ‚Ñù (2 ^ FiniteDimensional.finrank ‚Ñù ‚Ñù) := inferInstance
  simpa

#check theorem1_1C K (by norm_num)

#check Complex.abs

#check Finset.range

#check AddCircle (2 * Real.pi)

variable [IsSpaceOfHomogeneousType ‚Ñù 2] (Œº : MeasureTheory.Measure ‚Ñù)

open BigOperators
open Finset

#check fourier
--def stdCircle : AddCircle (2 * Real.pi)

def partialFourierSum (f : ‚Ñù ‚Üí ‚ÑÇ) (N : ‚Ñï) : ‚Ñù ‚Üí ‚ÑÇ := fun x ‚Ü¶ ‚àë n in range (2 * N + 1), fourierCoeffOn Real.two_pi_pos f (n - N) * fourier (n - N) (x : AddCircle (2 * Real.pi))
#check partialFourierSum

--section in which definitions depend on f
section f_variable
variable {f: ‚Ñù ‚Üí ‚ÑÇ} (unicontf : UniformContinuous f)
variable {Œµ : ‚Ñù} (Œµpos : Œµ > 0)


def Œ¥fromŒµ : ‚Ñù := by
  --TODO : use some scaled Œµ for the choose
  choose Œ¥ _ _ using Metric.uniformContinuous_iff.mp unicontf Œµ Œµpos
  exact Œ¥

--define the approximation by a piecewise constant function (f‚ÇÄ) as in section 10.1
variable {Œ¥ : ‚Ñù} (Œ¥def : Œ¥ = Œ¥fromŒµ unicontf Œµpos)

def KfromŒ¥ : ‚Ñï := Nat.floor ((2 * Real.pi) / Œ¥) + 1
--TODO: tidy this up
variable {K : ‚Ñï} (Kdef : K = KfromŒ¥)
-- note that K>2 ?

def piecewiseConstApprox : ‚Ñù ‚Üí ‚ÑÇ := fun x ‚Ü¶ f ((2 * Real.pi * Int.floor ((K * x) / (2 * Œ¥))) / K)

/-
def piecewiseConstApprox : ‚Ñù ‚Üí ‚ÑÇ := by
  --TODO : use some scaled Œµ for the choose
  choose Œ¥ Œ¥pos hŒ¥Œµ using Metric.uniformContinuous_iff.mp unicontf Œµ Œµpos
  let K := Int.floor ((2 * Real.pi) / Œ¥) + 1
  -- note that K>2 ?
  exact fun x ‚Ü¶ f ((2 * Real.pi * Int.floor ((K * x) / (2 * Œ¥))) / K)
-/

variable {f‚ÇÄ: ‚Ñù ‚Üí ‚ÑÇ} (unicontf : UniformContinuous f) {Œµ : ‚Ñù} (Œµpos : Œµ > 0) (f‚ÇÄdef : f‚ÇÄ = piecewiseConstApprox)

def E‚ÇÅfromK :=
  ‚ãÉ (k : range (K + 1)), Set.Icc ((2 * Real.pi) / K * (k - Œµ / (16 * Real.pi))) ((2 * Real.pi) / K * (k + Œµ / (16 * Real.pi)))

variable {E‚ÇÅ : Set ‚Ñù} (E‚ÇÅdef : E‚ÇÅ = E‚ÇÅfromK)


--Lemma 10.2 from the paper
--TODO : correct size of N
lemma piecePartialFourierSumApprox {N : ‚Ñï} (hN : N > (K^2 / Œµ^3)) :
  ‚àÄ x ‚àà Set.Ico 0 (2 * Real.pi) \ E‚ÇÅ, Complex.abs (partialFourierSum f‚ÇÄ N x - f‚ÇÄ x) ‚â§ Œµ / 4:= by
  sorry


--Lemma 10.3 from the paper
lemma diffPartialFourierSums : ‚àÉ E‚ÇÇ, MeasureTheory.volume.real E‚ÇÇ ‚â§ Œµ / 2 ‚àß ‚àÄ x ‚àà (Set.Ico 0 1) \ E‚ÇÇ,
  sSup {Complex.abs (partialFourierSum f N x - partialFourierSum f‚ÇÄ N x) | N : ‚Ñï} ‚â§ Œµ / 4 := by
  sorry

--TODO : seems like theorem1_1 is actually Theorem 1.2 from the paper
--TODO : check and compare to version in mathlib has_pointwise_sum_fourier_series_of_summable and similar
theorem classical_carleson {f : ‚Ñù ‚Üí ‚ÑÇ}
  (unicontf : UniformContinuous f) (periodicf : Function.Periodic f (2 * Real.pi)) (bdd_one : ‚àÄ x, Complex.abs (f x) ‚â§ 1)
  {Œµ : ‚Ñù} (hŒµ : 0 < Œµ ‚àß Œµ ‚â§ 2 * Real.pi) :
  ‚àÉ E ‚äÜ Set.Icc 0 (2 * Real.pi), MeasurableSet E ‚àß MeasureTheory.volume.real E ‚â§ Œµ ‚àß
  ‚àÉ N‚ÇÄ > 0, ‚àÄ x ‚àà (Set.Icc 0 (2 * Real.pi)) \ E, ‚àÄ N > N‚ÇÄ,
  Complex.abs (f x - partialFourierSum f N x) ‚â§ Œµ := by sorry
  --obtain ‚ü®E‚ÇÇ, E‚ÇÇvolume, _‚ü© := diffPartialFourierSums



#check classical_carleson
