import Carleson.Carleson
import Carleson.HomogeneousType
import Carleson.Theorem1_1.Basic
import Carleson.Theorem1_1.Approximation
import Carleson.Theorem1_1.Control_Approximation_Effect

import Mathlib.Analysis.Fourier.AddCircle


noncomputable section

/- Specialize this to get the usual version of Carleson's theorem,
by taking `X = ‚Ñù`, `K x y := 1 / (x - y)` and `ùì† = {linear functions}`.
-/

--def K : ‚Ñù ‚Üí ‚Ñù ‚Üí ‚ÑÇ := fun x y ‚Ü¶ 1 / (x - y)

theorem classical_carleson {f : ‚Ñù ‚Üí ‚ÑÇ}
    (unicontf : UniformContinuous f) (periodicf : Function.Periodic f (2 * Real.pi)) (bdd_one : ‚àÄ x, Complex.abs (f x) ‚â§ 1)
    {Œµ : ‚Ñù} (hŒµ : 0 < Œµ ‚àß Œµ ‚â§ 2 * Real.pi) :
    --need condition E ‚äÜ Set.Icc 0 (2 * Real.pi) to ensure the E has finite volume
    ‚àÉ E ‚äÜ Set.Icc 0 (2 * Real.pi), MeasurableSet E ‚àß MeasureTheory.volume.real E ‚â§ Œµ ‚àß
    ‚àÉ N‚ÇÄ, ‚àÄ x ‚àà (Set.Icc 0 (2 * Real.pi)) \ E, ‚àÄ N > N‚ÇÄ,
    Complex.abs (f x - partialFourierSum f N x) ‚â§ Œµ := by
  --TODO : use some scaled Œµ for the choose
  set Œµ' := (2 ^ (- (2 ^ 50 : ‚Ñù))) * Œµ ^ 2 with Œµ'def
  have Œµ'pos : Œµ' > 0 := by
    rw [Œµ'def]
    apply mul_pos
    . apply Real.rpow_pos_of_pos zero_lt_two
    . rw [pow_two]
      apply mul_pos <;> exact hŒµ.1
  obtain ‚ü®f‚ÇÄ, contDiff_f‚ÇÄ, periodic_f‚ÇÄ, hf‚ÇÄ‚ü© := closeSmoothApproxPeriodic unicontf periodicf Œµ'pos

  --Lemma 10.2 from the paper
  --changed interval to Icc to match the interval in the theorem
  have Œµ4pos : Œµ / 4 > 0 := by linarith
  obtain ‚ü®N‚ÇÄ, hN‚ÇÄ‚ü© := fourierConv_ofTwiceDifferentiable periodic_f‚ÇÄ ((contDiff_top.mp (contDiff_f‚ÇÄ)) 2) Œµ4pos


  set h := f‚ÇÄ - f with hdef
  have h_measurable : Measurable h := Continuous.measurable (Continuous.sub contDiff_f‚ÇÄ.continuous unicontf.continuous)
  have h_periodic : Function.Periodic h (2 * Real.pi) := Function.Periodic.sub periodic_f‚ÇÄ periodicf
  have h_bound : ‚àÄ x ‚àà Set.Icc (-Real.pi) (3 * Real.pi), Complex.abs (h x) ‚â§ Œµ' := by
    intro x _
    rw [hdef]
    simp
    rw [‚ÜêComplex.dist_eq, dist_comm, Complex.dist_eq]
    exact hf‚ÇÄ x

  --TODO : replace E‚ÇÇ by E
  obtain ‚ü®E‚ÇÇ, E‚ÇÇsubset, E‚ÇÇmeasurable, E‚ÇÇvolume, hE‚ÇÇ‚ü© := control_approximation_effect' hŒµ Œµ'pos h_measurable h_periodic h_bound

  --Definition of E changed compared to the paper
  use E‚ÇÇ, E‚ÇÇsubset, E‚ÇÇmeasurable, E‚ÇÇvolume, N‚ÇÄ
  intro x hx N NgtN‚ÇÄ
  --use "telescope" sum
  calc Complex.abs (f x - partialFourierSum f N x)
  _ = Complex.abs ((f x - f‚ÇÄ x) + (f‚ÇÄ x - partialFourierSum f‚ÇÄ N x) + (partialFourierSum f‚ÇÄ N x - partialFourierSum f N x)) := by congr; ring
  _ ‚â§ Complex.abs ((f x - f‚ÇÄ x) + (f‚ÇÄ x - partialFourierSum f‚ÇÄ N x)) + Complex.abs (partialFourierSum f‚ÇÄ N x - partialFourierSum f N x) := by
    apply AbsoluteValue.add_le
  _ ‚â§ Complex.abs (f x - f‚ÇÄ x) + Complex.abs (f‚ÇÄ x - partialFourierSum f‚ÇÄ N x) + Complex.abs (partialFourierSum f‚ÇÄ N x - partialFourierSum f N x) := by
    apply add_le_add_right
    apply AbsoluteValue.add_le
  _ ‚â§ Œµ' + (Œµ / 4) + (Œµ / 4) := by
    gcongr
    . exact hf‚ÇÄ x
    . by_cases h : x = 2 * Real.pi
      . rw [h, ‚Üêzero_add (2 * Real.pi), periodic_f‚ÇÄ, partialFourierSum_periodic]
        apply hN‚ÇÄ N NgtN‚ÇÄ 0
        simp [Real.pi_pos]
      . have : x ‚àà Set.Ico 0 (2 * Real.pi) := by
          simp
          simp at hx
          use hx.1.1
          apply lt_of_le_of_ne hx.1.2 h
        convert hN‚ÇÄ N NgtN‚ÇÄ x this
    . have := hE‚ÇÇ x hx N
      rw [hdef, partialFourierSum_sub (contDiff_f‚ÇÄ.continuous.intervalIntegrable 0 (2 * Real.pi)) (unicontf.continuous.intervalIntegrable 0 (2 * Real.pi))] at this
      apply le_trans this
      rw [C_control_approximation_effect, Œµ'def]
      sorry
  _ ‚â§ (Œµ / 2) + (Œµ / 4) + (Œµ / 4) := by
    gcongr
    rw [Œµ'def, pow_two, ‚Üêmul_assoc, le_div_iff (by norm_num), mul_comm, ‚Üêmul_assoc, ‚Üê(le_div_iff hŒµ.1), div_self hŒµ.1.ne.symm, ‚Üêmul_assoc]
    calc 2 * 2 ^ (-2 ^ 50 : ‚Ñù) * Œµ
      _ ‚â§ 2 ^ (1 - 2 ^ 50 : ‚Ñù) * (2 * Real.pi) := by
        gcongr
        . exact hŒµ.1.le
        . apply le_of_eq
          rw [sub_eq_neg_add, Real.rpow_add (by norm_num), Real.rpow_one, mul_comm]
        . exact hŒµ.2
      _ ‚â§ 2 ^ (1 - 2 ^ 50 : ‚Ñù) * (2 * 4) := by
        gcongr
        exact Real.pi_le_four
      _ = 2 ^ (1 - 2 ^ 50 : ‚Ñù) * 2 ^ (3 : ‚Ñù) := by
        congr
        norm_num
      _ = 2 ^ (1 - (2 ^ 50 : ‚Ñù) + 3) := by
        rw [Real.rpow_add (by norm_num)]
      _ ‚â§ 1 := by
        apply Real.rpow_le_one_of_one_le_of_nonpos <;> norm_num
  _ ‚â§ Œµ := by linarith
