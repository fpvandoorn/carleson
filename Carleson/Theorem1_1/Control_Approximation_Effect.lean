/- This file formalizes section 10.8 (The error bound) from the paper. -/
import Carleson.MetricCarleson
import Carleson.Theorem1_1.Basic
import Carleson.Theorem1_1.Hilbert_kernel
import Carleson.Theorem1_1.Dirichlet_kernel
import Carleson.Theorem1_1.CarlesonOperatorReal
import Carleson.Theorem1_1.Carleson_on_the_real_line

import Mathlib.Analysis.Fourier.AddCircle
--import Mathlib.Analysis.RCLike.Basic

noncomputable section

local notation "T" => CarlesonOperatorReal K
local notation "T'" => CarlesonOperatorReal' K

/- TODO: might be generalized. -/
lemma ENNReal.le_on_subset {X : Type} [MeasurableSpace X] (Œº : MeasureTheory.Measure X) {f g : X ‚Üí ENNReal} {E : Set X} (hE : MeasurableSet E)
    (hf : Measurable f) (hg : Measurable g) {a : ENNReal} (h : ‚àÄ x ‚àà E, a ‚â§ f x + g x) :
    ‚àÉ E' ‚äÜ E, MeasurableSet E' ‚àß Œº E ‚â§ 2 * Œº E' ‚àß ((‚àÄ x ‚àà E', a / 2 ‚â§ f x) ‚à® (‚àÄ x ‚àà E', a / 2 ‚â§ g x)) := by
  set Ef := E ‚à© f‚Åª¬π' (Set.Ici (a / 2)) with Ef_def
  set Eg := E ‚à© g‚Åª¬π' (Set.Ici (a / 2)) with Eg_def
  have : E ‚äÜ Ef ‚à™ Eg := by
    intro x hx
    rw [Ef_def, Eg_def]
    simp
    by_contra hx'
    push_neg at hx'
    absurd le_refl a
    push_neg
    calc a
      _ ‚â§ f x + g x := h x hx
      _ < a / 2 + a / 2 := by
        gcongr
        . exact hx'.1 hx
        . exact hx'.2 hx
      _ = a := by
        ring_nf
        apply ENNReal.div_mul_cancel <;> norm_num
  have : Œº E ‚â§ 2 * Œº Ef ‚à® Œº E ‚â§ 2 * Œº Eg := by
    by_contra hEfg
    push_neg at hEfg
    absurd le_refl (2 * Œº E)
    push_neg
    calc 2 * Œº E
    _ ‚â§ 2 * Œº (Ef ‚à™ Eg) := by
      gcongr
    _ ‚â§ 2 * (Œº Ef + Œº Eg) := by
      gcongr
      exact MeasureTheory.measure_union_le _ _
    _ = 2 * Œº Ef + 2 * Œº Eg := by ring
    _ < Œº E + Œº E := by
      gcongr
      . exact hEfg.1
      . exact hEfg.2
    _ = 2 * Œº E := by ring
  rcases this with hEf | hEg
  . use Ef
    constructor
    . exact Set.inter_subset_left
    constructor
    . apply MeasurableSet.inter hE
      exact hf measurableSet_Ici
    use hEf
    left
    rw [Ef_def]
    simp
  . use Eg
    constructor
    . exact Set.inter_subset_left
    constructor
    . apply MeasurableSet.inter hE
      exact hg measurableSet_Ici
    use hEg
    right
    rw [Eg_def]
    simp

open Complex

/-TODO: might go to mathlib-/
lemma intervalIntegral.integral_conj' {Œº : MeasureTheory.Measure ‚Ñù} {ùïú : Type} [RCLike ùïú] {f : ‚Ñù ‚Üí ùïú} {a b : ‚Ñù}:
    ‚à´ x in a..b, (starRingEnd ùïú) (f x) ‚àÇŒº = (starRingEnd ùïú) (‚à´ x in a..b, f x ‚àÇŒº) := by
  rw [intervalIntegral_eq_integral_uIoc, integral_conj, intervalIntegral_eq_integral_uIoc,
      RCLike.real_smul_eq_coe_mul, RCLike.real_smul_eq_coe_mul, map_mul]
  simp

-- Corrected rewrite
lemma dirichlet_Hilbert_eq {N : ‚Ñï} {x y : ‚Ñù} :
    (max (1 - |x - y|) 0) * dirichletKernel' N (x - y) = exp (I * (-N * x)) * K x y * exp (I * N * y) + (starRingEnd ‚ÑÇ) (exp (I * (-N * x)) * K x y * exp (I * N * y)) := by
  simp [dirichletKernel', K, k, conj_ofReal, ‚Üêexp_conj, mul_comm, ‚Üêmul_assoc, ‚Üêexp_add]
  ring_nf

section
open Filter Topology

--TODO: proof might be improved
lemma le_iSup_of_tendsto {Œ± Œ≤} [TopologicalSpace Œ±] [CompleteLinearOrder Œ±] [OrderTopology Œ±]
    [Nonempty Œ≤] [SemilatticeSup Œ≤] {f : Œ≤ ‚Üí Œ±} {a : Œ±} (ha : Tendsto f atTop (ùìù a)) : a ‚â§ iSup f := by
  apply le_of_forall_lt
  intro c hc
  have : ‚àÄ·∂† (x : Œ≤) in atTop, c < f x := by
    apply eventually_gt_of_tendsto_gt hc ha
  rcases this.exists with ‚ü®x, hx‚ü©
  apply lt_of_lt_of_le hx
  exact le_iSup _ _

lemma integrable_annulus {x : ‚Ñù} (hx : x ‚àà Set.Icc 0 (2 * Real.pi)) {f : ‚Ñù ‚Üí ‚ÑÇ} (hf : IntervalIntegrable f MeasureTheory.volume (-Real.pi) (3 * Real.pi)) {r : ‚Ñù} (r_nonneg : 0 ‚â§ r) (rle1 : r < 1) :
    MeasureTheory.Integrable (fun x ‚Ü¶ f x) (MeasureTheory.volume.restrict {y | dist x y ‚àà Set.Ioo r 1}) := by
  rw [‚Üê MeasureTheory.IntegrableOn, annulus_real_eq r_nonneg]
  apply MeasureTheory.IntegrableOn.union <;>
  . rw [‚Üê intervalIntegrable_iff_integrableOn_Ioo_of_le (by linarith)]
    apply hf.mono_set
    rw [Set.uIcc_of_le (by linarith), Set.uIcc_of_le (by linarith [Real.pi_pos])]
    intro y hy
    constructor <;> linarith [hx.1, hx.2, hy.1, hy.2, Real.two_le_pi]

lemma integrableOn_mul_dirichletKernel'_max {x : ‚Ñù} (hx : x ‚àà Set.Icc 0 (2 * Real.pi)) {f : ‚Ñù ‚Üí ‚ÑÇ} (hf : IntervalIntegrable f MeasureTheory.volume (-Real.pi) (3 * Real.pi)) {N : ‚Ñï} :
    MeasureTheory.IntegrableOn (fun y ‚Ü¶ f y * ‚Üë(max (1 - |x - y|) 0) * dirichletKernel' N (x - y)) (Set.Icc (x - Real.pi) (x + Real.pi)) MeasureTheory.volume := by
  conv => pattern ((f _) * _ * _); rw [mul_assoc, mul_comm]
  rw [intervalIntegrable_iff_integrableOn_Icc_of_le (by linarith [Real.pi_pos])] at hf
  apply MeasureTheory.Integrable.bdd_mul'
  . apply hf.mono_set
    intro y hy
    constructor <;> linarith [hx.1, hx.2, hy.1, hy.2, Real.two_le_pi]
  . apply Measurable.aestronglyMeasurable
    apply Measurable.mul
    . apply Complex.measurable_ofReal.comp
      apply Measurable.max
      apply Measurable.const_sub
      apply _root_.continuous_abs.measurable.comp
      apply measurable_id.const_sub
      exact measurable_const
    . apply dirichletKernel'_measurable.comp
      exact measurable_id.const_sub _
  . rw [MeasureTheory.ae_restrict_iff' measurableSet_Icc]
    apply eventually_of_forall
    intro y _
    calc ‚Äñ(max (1 - |x - y|) 0) * dirichletKernel' N (x - y)‚Äñ
      _ = ‚Äñmax (1 - |x - y|) 0‚Äñ * ‚ÄñdirichletKernel' N (x - y)‚Äñ := by
        rw [norm_mul, Complex.norm_real]
      _ ‚â§ 1 * (2 * N + 1) := by
        gcongr
        . rw [Real.norm_of_nonneg]
          apply max_le
          linarith [abs_nonneg (x - y)]
          norm_num
          exact le_max_right _ _
        exact norm_dirichletKernel'_le

/-TODO : only slightly different from previous lemma; unify the proofs of the two-/
lemma integrableOn_mul_dirichletKernel'_min {x : ‚Ñù} (hx : x ‚àà Set.Icc 0 (2 * Real.pi)) {f : ‚Ñù ‚Üí ‚ÑÇ} (hf : IntervalIntegrable f MeasureTheory.volume (-Real.pi) (3 * Real.pi)) {N : ‚Ñï} :
    MeasureTheory.IntegrableOn (fun y ‚Ü¶ f y * ‚Üë(min |x - y| 1) * dirichletKernel' N (x - y)) (Set.Icc (x - Real.pi) (x + Real.pi)) MeasureTheory.volume := by
  conv => pattern ((f _) * _ * _); rw [mul_assoc, mul_comm]
  rw [intervalIntegrable_iff_integrableOn_Icc_of_le (by linarith [Real.pi_pos])] at hf
  apply MeasureTheory.Integrable.bdd_mul'
  . apply hf.mono_set
    intro y hy
    constructor <;> linarith [hx.1, hx.2, hy.1, hy.2, Real.two_le_pi]
  . apply Measurable.aestronglyMeasurable
    apply Measurable.mul
    . apply Complex.measurable_ofReal.comp
      apply Measurable.min
      apply _root_.continuous_abs.measurable.comp
      apply measurable_id.const_sub
      exact measurable_const
    . apply dirichletKernel'_measurable.comp
      exact measurable_id.const_sub _
  . rw [MeasureTheory.ae_restrict_iff' measurableSet_Icc]
    apply eventually_of_forall
    intro y _
    calc ‚Äñ(min |x - y| 1) * dirichletKernel' N (x - y)‚Äñ
      _ = ‚Äñmin |x - y| 1‚Äñ * ‚ÄñdirichletKernel' N (x - y)‚Äñ := by
        rw [norm_mul, Complex.norm_real]
      _ ‚â§ 1 * (2 * N + 1) := by
        gcongr
        . rw [Real.norm_of_nonneg]
          apply min_le_right
          apply le_min
          linarith [abs_nonneg (x - y)]
          norm_num
        exact norm_dirichletKernel'_le


lemma integrableOn_mul_dirichletKernel'_specific {x : ‚Ñù} (hx : x ‚àà Set.Icc 0 (2 * Real.pi)) {f : ‚Ñù ‚Üí ‚ÑÇ} (hf : IntervalIntegrable f MeasureTheory.volume (-Real.pi) (3 * Real.pi)) {N : ‚Ñï} :
    MeasureTheory.IntegrableOn (fun y ‚Ü¶ f y * ‚Üë(max (1 - |x - y|) 0) * dirichletKernel' N (x - y)) {y | dist x y ‚àà Set.Ioo 0 1} MeasureTheory.volume := by
  apply (integrableOn_mul_dirichletKernel'_max hx hf).mono_set
  intro y hy
  rw [annulus_real_eq (by rfl)] at hy
  rcases hy with h | h <;> constructor <;> linarith [h.1, h.2, hx.1, hx.2, Real.two_le_pi]

lemma le_CarlesonOperatorReal' {f : ‚Ñù ‚Üí ‚ÑÇ} (hf : IntervalIntegrable f MeasureTheory.volume (-Real.pi) (3 * Real.pi)) {N : ‚Ñï} :
    ‚àÄ x ‚àà Set.Icc 0 (2 * Real.pi),
    ‚Äñ‚à´ (y : ‚Ñù) in {y | dist x y ‚àà Set.Ioo 0 1}, f y * (max (1 - |x - y|) 0) * dirichletKernel' N (x - y)‚Äñ‚Çä ‚â§ T' f x + T' ((starRingEnd ‚ÑÇ) ‚àò f) x := by
  intro x hx
  set s : ‚Ñï ‚Üí Set ‚Ñù := fun n ‚Ü¶ {y | dist x y ‚àà Set.Ioo (1 / (n + 2 : ‚Ñù)) 1} with sdef
  have hs : {y | dist x y ‚àà Set.Ioo 0 1} = ‚ãÉ n, s n := by
    ext y
    constructor
    . intro hy
      rw [Set.mem_setOf_eq, Set.mem_Ioo] at hy
      obtain ‚ü®n, hn‚ü© := exists_nat_gt (1 / dist x y)
      simp
      use n
      rw [sdef]
      simp
      constructor
      . rw [inv_lt, inv_eq_one_div]
        apply lt_trans hn
        linarith
        linarith
        exact hy.1
      . exact hy.2
    . intro hy
      simp at hy
      rcases hy with ‚ü®n, hn‚ü©
      rw [sdef] at hn
      simp at hn
      constructor
      . apply lt_trans' hn.1
        norm_num
        linarith
      . exact hn.2
  have : Tendsto (fun i => ‚à´ y in s i, f y * (max (1 - |x - y|) 0) * dirichletKernel' N (x - y)) atTop (ùìù (‚à´ y in ‚ãÉ n, s n, f y * (max (1 - |x - y|) 0) * dirichletKernel' N (x - y))) := by
    apply MeasureTheory.tendsto_setIntegral_of_monotone
    . intro n
      exact annulus_measurableSet
    . intro n m nlem
      simp
      intro y hy
      rw [sdef]
      rw [sdef] at hy
      simp
      simp at hy
      constructor
      . apply lt_of_le_of_lt _ hy.1
        rw [inv_le_inv]
        norm_cast
        all_goals linarith
      . exact hy.2
    . rw [‚Üê hs]
      --uses that dirichletKernel' is bounded
      exact integrableOn_mul_dirichletKernel'_specific hx hf
  calc ENNReal.ofNNReal ‚Äñ‚à´ (y : ‚Ñù) in {y | dist x y ‚àà Set.Ioo 0 1}, f y * (max (1 - |x - y|) 0) * dirichletKernel' N (x - y)‚Äñ‚Çä
    _ = ‚Äñ‚à´ y in ‚ãÉ n, s n, f y * (max (1 - |x - y|) 0) * dirichletKernel' N (x - y)‚Äñ‚Çä := by congr
    _ ‚â§ ‚®Ü (i : ‚Ñï), ‚Üë‚Äñ‚à´ y in s i, f y * (max (1 - |x - y|) 0) * dirichletKernel' N (x - y)‚Äñ‚Çä := by
      apply le_iSup_of_tendsto
      rw [ENNReal.tendsto_coe]
      exact Tendsto.nnnorm this
    _ ‚â§ ‚®Ü (r : ‚Ñù) (_ : 0 < r) (_ : r < 1), ‚Üë‚Äñ‚à´ y in {y | dist x y ‚àà Set.Ioo r 1}, f y * (max (1 - |x - y|) 0) * dirichletKernel' N (x - y)‚Äñ‚Çä := by
      apply iSup_le
      intro n
      apply le_iSup_of_le (1 / (n + 2 : ‚Ñù))
      apply le_iSup‚ÇÇ_of_le (by simp; linarith) (by rw [div_lt_iff] <;> linarith)
      rfl
    _ = ‚®Ü (r : ‚Ñù) (_ : 0 < r) (_ : r < 1), ‚Üë‚Äñ‚à´ y in {y | dist x y ‚àà Set.Ioo r 1}, f y * (exp (I * (-(Int.ofNat N) * x)) * K x y * exp (I * N * y) + (starRingEnd ‚ÑÇ) (exp (I * (-(Int.ofNat N) * x)) * K x y * exp (I * (Int.ofNat N) * y)))‚Äñ‚Çä := by
      apply iSup_congr
      intro r
      apply iSup_congr
      intro _
      apply iSup_congr
      intro _
      congr with y
      rw [mul_assoc, dirichlet_Hilbert_eq]
      norm_cast
    _ ‚â§ ‚®Ü (n : ‚Ñ§) (r : ‚Ñù) (_ : 0 < r) (_ : r < 1), ‚Üë‚Äñ‚à´ y in {y | dist x y ‚àà Set.Ioo r 1}, f y * (exp (I * (-n * x)) * K x y * exp (I * n * y) + (starRingEnd ‚ÑÇ) (exp (I * (-n * x)) * K x y * exp (I * n * y)))‚Äñ‚Çä := by
      let F : ‚Ñ§ ‚Üí ENNReal := fun (n : ‚Ñ§) ‚Ü¶ ‚®Ü (r : ‚Ñù) (_ : 0 < r) (_ : r < 1), ‚Üë‚Äñ‚à´ y in {y | dist x y ‚àà Set.Ioo r 1}, f y * (exp (I * (-n * x)) * K x y * exp (I * n * y) + (starRingEnd ‚ÑÇ) (exp (I * (-n * x)) * K x y * exp (I * n * y)))‚Äñ‚Çä
      exact le_iSup F ((Int.ofNat N))
    _ ‚â§ ‚®Ü (n : ‚Ñ§) (r : ‚Ñù) (_ : 0 < r) (_ : r < 1), (  ‚Üë‚Äñ‚à´ y in {y | dist x y ‚àà Set.Ioo r 1}, f y * K x y * exp (I * n * y)‚Äñ‚Çä
                                                    + ‚Üë‚Äñ‚à´ y in {y | dist x y ‚àà Set.Ioo r 1}, ((starRingEnd ‚ÑÇ) ‚àò f) y * K x y * exp (I * n * y)‚Äñ‚Çä) := by
      apply iSup‚ÇÇ_mono
      intro n r
      apply iSup‚ÇÇ_mono
      intro rpos rle1
      norm_cast
      push_cast
      calc ‚Äñ‚à´ y in {y | dist x y ‚àà Set.Ioo r 1}, f y * (exp (I * (-n * x)) * K x y * exp (I * n * y) + (starRingEnd ‚ÑÇ) (exp (I * (-n * x)) * K x y * exp (I * n * y)))‚Äñ‚Çä
        _ = ‚Äñ‚à´ y in {y | dist x y ‚àà Set.Ioo r 1}, f y * (exp (I * (-n * x)) * K x y * exp (I * n * y)) + f y * (starRingEnd ‚ÑÇ) (exp (I * (-n * x)) * K x y * exp (I * n * y))‚Äñ‚Çä := by
          congr with y
          rw [mul_add]
        _ = ‚Äñ (‚à´ y in {y | dist x y ‚àà Set.Ioo r 1}, f y * (exp (I * (-n * x)) * K x y * exp (I * n * y)))
             + ‚à´ y in {y | dist x y ‚àà Set.Ioo r 1}, f y * (starRingEnd ‚ÑÇ) (exp (I * (-n * x)) * K x y * exp (I * n * y))‚Äñ‚Çä := by
          congr
          -- Integrability follows from r > 0
          have measurable‚ÇÅ : Measurable fun x_1 ‚Ü¶ (I * (-‚Üën * ‚Üëx)).exp * K x x_1 * (I * ‚Üën * ‚Üëx_1).exp := by
            apply Measurable.mul
            apply Measurable.mul
            measurability
            apply Measurable.of_uncurry_left
            exact Hilbert_kernel_measurable
            measurability
          have boundedness‚ÇÅ {y : ‚Ñù} (h : r ‚â§ dist x y) : ‚Äñ(I * (-‚Üën * ‚Üëx)).exp * K x y * (I * ‚Üën * ‚Üëy).exp‚Äñ ‚â§ (2 ^ (2 : ‚Ñù) / (2 * r)) := by
            calc ‚Äñ(I * (-‚Üën * ‚Üëx)).exp * K x y * (I * ‚Üën * ‚Üëy).exp‚Äñ
              _ = ‚Äñ(I * (-‚Üën * ‚Üëx)).exp‚Äñ * ‚ÄñK x y‚Äñ * ‚Äñ(I * ‚Üën * ‚Üëy).exp‚Äñ := by
                rw [norm_mul, norm_mul]
              _ ‚â§ 1 * (2 ^ (2 : ‚Ñù) / (2 * |x - y|)) * 1 := by
                gcongr
                . rw [norm_eq_abs, mul_comm]
                  norm_cast
                  rw [abs_exp_ofReal_mul_I]
                . exact Hilbert_kernel_bound
                . rw [norm_eq_abs, mul_assoc, mul_comm]
                  norm_cast
                  rw [abs_exp_ofReal_mul_I]
              _ ‚â§ (2 ^ (2 : ‚Ñù) / (2 * r)) := by
                rw [one_mul, mul_one, ‚Üê Real.dist_eq]
                gcongr
          have integrable‚ÇÅ := (integrable_annulus hx hf rpos.le rle1)
          rw [MeasureTheory.integral_add]
          . conv => pattern ((f _) * _); rw [mul_comm]
            apply MeasureTheory.Integrable.bdd_mul' integrable‚ÇÅ measurable‚ÇÅ.aestronglyMeasurable
            . rw [MeasureTheory.ae_restrict_iff' annulus_measurableSet]
              apply eventually_of_forall
              exact fun _ hy ‚Ü¶ boundedness‚ÇÅ hy.1.le
          . conv => pattern ((f _) * _); rw [mul_comm]
            apply MeasureTheory.Integrable.bdd_mul' integrable‚ÇÅ
            . apply Measurable.aestronglyMeasurable
              exact continuous_star.measurable.comp measurable‚ÇÅ
            . rw [MeasureTheory.ae_restrict_iff' annulus_measurableSet]
              apply eventually_of_forall
              intro y hy
              rw [RCLike.norm_conj]
              exact boundedness‚ÇÅ hy.1.le
        _ ‚â§   ‚Äñ‚à´ y in {y | dist x y ‚àà Set.Ioo r 1}, f y * (exp (I * (-n * x)) * K x y * exp (I * n * y))‚Äñ‚Çä
            + ‚Äñ‚à´ y in {y | dist x y ‚àà Set.Ioo r 1}, f y * (starRingEnd ‚ÑÇ) (exp (I * (-n * x)) * K x y * exp (I * n * y))‚Äñ‚Çä := by
          apply nnnorm_add_le
        _ =   ‚Äñ‚à´ y in {y | dist x y ‚àà Set.Ioo r 1}, exp (I * (-n * x)) * (f y * K x y * exp (I * n * y))‚Äñ‚Çä
            + ‚Äñ‚à´ y in {y | dist x y ‚àà Set.Ioo r 1}, exp (I * (-n * x)) * (((starRingEnd ‚ÑÇ) ‚àò f) y *  K x y * exp (I * n * y))‚Äñ‚Çä := by
            congr 1
            . congr with y
              ring
            . rw [‚Üênnnorm_star, ‚ÜêstarRingEnd_apply, ‚Üêintegral_conj]
              congr with y
              simp
              ring
        _ =   ‚Äñ‚à´ y in {y | dist x y ‚àà Set.Ioo r 1}, f y * K x y * exp (I * n * y)‚Äñ‚Çä
            + ‚Äñ‚à´ y in {y | dist x y ‚àà Set.Ioo r 1}, ((starRingEnd ‚ÑÇ) ‚àò f) y * K x y * exp (I * n * y)‚Äñ‚Çä := by
          rw [‚Üê NNReal.coe_inj]
          push_cast
          norm_cast
          congr 1 <;>
          . rw [MeasureTheory.integral_mul_left, norm_mul, norm_eq_abs, mul_comm I, abs_exp_ofReal_mul_I, one_mul]
    _ ‚â§ T' f x + T' ((starRingEnd ‚ÑÇ) ‚àò f) x := by
      rw [CarlesonOperatorReal', CarlesonOperatorReal']
      apply iSup‚ÇÇ_le
      intro n r
      apply iSup‚ÇÇ_le
      intro rpos rle1
      gcongr <;>
      . apply le_iSup‚ÇÇ_of_le n r
        apply le_iSup‚ÇÇ_of_le rpos rle1
        trivial

end section

theorem rcarleson_exceptional_set_estimate {Œ¥ : ‚Ñù} (Œ¥pos : 0 < Œ¥) {f : ‚Ñù ‚Üí ‚ÑÇ} {F : Set ‚Ñù} (measurableSetF : MeasurableSet F) (hf : ‚àÄ x, ‚Äñf x‚Äñ ‚â§ Œ¥ * F.indicator 1 x)
    {E : Set ‚Ñù} (measurableSetE : MeasurableSet E) {Œµ : ENNReal} (hE : ‚àÄ x ‚àà E, Œµ ‚â§ T' f x) :
      Œµ * MeasureTheory.volume E ‚â§ ENNReal.ofReal (Œ¥ * C1_2 4 2) * MeasureTheory.volume F ^ (2 : ‚Ñù)‚Åª¬π * MeasureTheory.volume E ^ (2 : ‚Ñù)‚Åª¬π := by
  calc Œµ * MeasureTheory.volume E
    _ = ‚à´‚Åª _ in E, Œµ := by
      symm
      apply MeasureTheory.set_lintegral_const
    _ ‚â§ ‚à´‚Åª x in E, T' f x := by
      apply MeasureTheory.set_lintegral_mono' measurableSetE hE
    _ = ENNReal.ofReal Œ¥ * ‚à´‚Åª x in E, T' (fun x ‚Ü¶ (1 / Œ¥) * f x) x := by
      rw [‚Üê MeasureTheory.lintegral_const_mul']
      congr with x
      rw [CarlesonOperatorReal'_mul Œ¥pos]
      congr
      exact ENNReal.ofReal_ne_top
    _ ‚â§ ENNReal.ofReal Œ¥ * (ENNReal.ofReal (C1_2 4 2) * (MeasureTheory.volume E) ^ (2 : ‚Ñù)‚Åª¬π * (MeasureTheory.volume F) ^ (2 : ‚Ñù)‚Åª¬π) := by
      gcongr
      apply rcarleson' measurableSetF measurableSetE
      intro x
      simp
      rw [_root_.abs_of_nonneg Œ¥pos.le, inv_mul_le_iff Œ¥pos]
      exact hf x
    _ = ENNReal.ofReal (Œ¥ * C1_2 4 2) * (MeasureTheory.volume F) ^ (2 : ‚Ñù)‚Åª¬π * (MeasureTheory.volume E) ^ (2 : ‚Ñù)‚Åª¬π := by
      rw [ENNReal.ofReal_mul Œ¥pos.le]
      ring

theorem rcarleson_exceptional_set_estimate_specific {Œ¥ : ‚Ñù} (Œ¥pos : 0 < Œ¥) {f : ‚Ñù ‚Üí ‚ÑÇ} (hf : ‚àÄ x, ‚Äñf x‚Äñ ‚â§ Œ¥ * Set.indicator (Set.Icc (-Real.pi) (3 * Real.pi)) 1 x)
    {E : Set ‚Ñù} (measurableSetE : MeasurableSet E) {Œµ : ENNReal} (hE : ‚àÄ x ‚àà E, Œµ ‚â§ T' f x) :
      Œµ * MeasureTheory.volume E ‚â§ ENNReal.ofReal (Œ¥ * C1_2 4 2 * (4 * Real.pi) ^ (2 : ‚Ñù)‚Åª¬π) * MeasureTheory.volume E ^ (2 : ‚Ñù)‚Åª¬π := by
  rw [ENNReal.ofReal_mul (by apply mul_nonneg Œ¥pos.le; rw [C1_2]; norm_num), ‚Üê ENNReal.ofReal_rpow_of_pos (by linarith [Real.pi_pos])]
  convert rcarleson_exceptional_set_estimate Œ¥pos measurableSet_Icc hf measurableSetE hE
  rw [Real.volume_Icc]
  ring_nf

def C_control_approximation_effect (Œµ : ‚Ñù) := (C1_2 4 2 * (8 / (Real.pi * Œµ)) ^ (2 : ‚Ñù)‚Åª¬π) + Real.pi

lemma lt_C_control_approximation_effect {Œµ : ‚Ñù} (Œµpos : 0 < Œµ) : Real.pi < C_control_approximation_effect Œµ := by
  rw [C_control_approximation_effect]
  apply lt_add_of_pos_of_le _ (by rfl)
  apply mul_pos (C1_2_pos (by norm_num))
  apply Real.rpow_pos_of_pos
  apply div_pos (by norm_num)
  apply mul_pos Real.pi_pos Œµpos

lemma C_control_approximation_effect_pos {Œµ : ‚Ñù} (Œµpos : 0 < Œµ) : 0 < C_control_approximation_effect Œµ := lt_trans' (lt_C_control_approximation_effect Œµpos) Real.pi_pos

lemma C_control_approximation_effect_eq {Œµ : ‚Ñù} {Œ¥ : ‚Ñù} (Œµ_nonneg : 0 ‚â§ Œµ) : C_control_approximation_effect Œµ * Œ¥ = ((Œ¥ * C1_2 4 2 * (4 * Real.pi) ^ (2 : ‚Ñù)‚Åª¬π * (2 / Œµ) ^ (2 : ‚Ñù)‚Åª¬π) / Real.pi) + Real.pi * Œ¥ := by
  symm
  rw [C_control_approximation_effect, mul_comm, mul_div_right_comm, mul_comm Œ¥, mul_assoc,
    mul_comm Œ¥, ‚Üê mul_assoc, ‚Üê mul_assoc, ‚Üê add_mul, mul_comm _ (C1_2 4 2), mul_assoc]
  congr
  rw [Real.div_rpow, Real.div_rpow _ (mul_nonneg _ _), Real.mul_rpow, Real.mul_rpow]
  ring_nf
  rw [mul_assoc, mul_comm (2 ^ _), mul_assoc, mul_assoc, mul_assoc, mul_comm (4 ^ _), ‚Üê mul_assoc Real.pi‚Åª¬π,
      ‚Üê Real.rpow_neg_one Real.pi, ‚Üê Real.rpow_add, mul_comm (Real.pi ^ _), ‚Üê mul_assoc (2 ^ _), ‚Üê Real.mul_rpow]
  congr
  norm_num
  ring_nf
  rw [neg_div, Real.rpow_neg]
  all_goals linarith [Real.pi_pos]

/-ENNReal version of a generalized Lemma 10.3 (control approximation effect).-/
--TODO : review measurability assumption
--added subset assumption
--changed interval to match the interval in the theorem
lemma control_approximation_effect' {Œµ : ‚Ñù} (hŒµ : 0 < Œµ ‚àß Œµ ‚â§ 2 * Real.pi) {Œ¥ : ‚Ñù} (hŒ¥ : 0 < Œ¥)
    {h : ‚Ñù ‚Üí ‚ÑÇ} (h_measurable : Measurable h) (h_periodic : Function.Periodic h (2 * Real.pi)) (h_bound : ‚àÄ x ‚àà Set.Icc (-Real.pi) (3 * Real.pi), abs (h x) ‚â§ Œ¥ ) :
    ‚àÉ E ‚äÜ Set.Icc 0 (2 * Real.pi), MeasurableSet E ‚àß MeasureTheory.volume.real E ‚â§ Œµ ‚àß ‚àÄ x ‚àà Set.Icc 0 (2 * Real.pi) \ E,
      ‚àÄ N, abs (partialFourierSum h N x) ‚â§ C_control_approximation_effect Œµ * Œ¥ := by
  --TODO: change later
  set Œµ' := C_control_approximation_effect Œµ * Œ¥ with Œµ'def
  set E := {x ‚àà Set.Icc 0 (2 * Real.pi) | ‚àÉ N, Œµ' < abs (partialFourierSum h N x)} with Edef
  have E_eq: E = Set.Icc 0 (2 * Real.pi) ‚à© ‚ãÉ N : ‚Ñï, {x | Œµ' < ‚ÄñpartialFourierSum h N x‚Äñ} := by
      rw [Edef]
      ext x
      simp
  have measurableSetE : MeasurableSet E := by
    rw [E_eq]
    apply MeasurableSet.inter
    . exact measurableSet_Icc
    apply MeasurableSet.iUnion
    intro N
    apply measurableSet_lt
    . exact measurable_const
    apply Measurable.norm
    exact partialFourierSum_uniformContinuous.continuous.measurable
  use E
  constructor
  . intro x hx
    rw [Edef] at hx
    simp at hx
    exact hx.1
  use measurableSetE
  --Change order of proofs to start with the simple part
  rw [and_comm]
  constructor
  . rw [Edef]
    simp
    exact fun x x_nonneg x_le_two_pi h ‚Ü¶ h x_nonneg x_le_two_pi
  have h_intervalIntegrable : IntervalIntegrable h MeasureTheory.volume (-Real.pi) (3 * Real.pi) := by
    apply @IntervalIntegrable.mono_fun' _ _ _ _ _ _ (fun _ ‚Ü¶ Œ¥)
    apply intervalIntegrable_const
    exact h_measurable.aestronglyMeasurable
    rw [Filter.EventuallyLE, ae_restrict_iff_subtype]
    apply Filter.eventually_of_forall
    simp only [norm_eq_abs, Subtype.forall]
    intro x hx
    apply h_bound x
    apply Set.Ioc_subset_Icc_self
    rw [Set.uIoc_of_le (by linarith)] at hx
    constructor <;> linarith [hx.1, hx.2]
    exact measurableSet_uIoc
  set F := Set.Icc (-Real.pi) (3 * Real.pi) with Fdef
  set f := fun x ‚Ü¶ h x * F.indicator 1 x with fdef
  have f_measurable : Measurable f := by
    apply h_measurable.mul
    exact measurable_const.indicator measurableSet_Icc
  --TODO : improve this proof, should be much easier...
  have f_integrable : IntervalIntegrable f MeasureTheory.volume (-Real.pi) (3 * Real.pi) := by
    rw [fdef, intervalIntegrable_iff_integrableOn_Ioo_of_le (by linarith [Real.pi_pos])]
    conv => pattern (h _) * _; rw [mul_comm]
    apply MeasureTheory.Integrable.bdd_mul'
    rwa [‚Üê MeasureTheory.IntegrableOn, ‚Üê intervalIntegrable_iff_integrableOn_Ioo_of_le (by linarith [Real.pi_pos])]
    apply Measurable.aestronglyMeasurable
    apply measurable_const.indicator measurableSet_Icc
    apply Filter.eventually_of_forall
    intro x
    rw [norm_indicator_eq_indicator_norm]
    simp
    calc F.indicator (fun _ ‚Ü¶ (1 : ‚Ñù)) x
      _ ‚â§ 1 := by
        apply Set.indicator_apply_le'
        intro _
        rfl
        intro _
        norm_num
  have le_operator_add : ‚àÄ x ‚àà E, ENNReal.ofReal ((Œµ' - Real.pi * Œ¥) * (2 * Real.pi)) ‚â§ T' f x + T' ((starRingEnd ‚ÑÇ) ‚àò f) x := by
    have h_intervalIntegrable' : IntervalIntegrable h MeasureTheory.volume 0 (2 * Real.pi) := by
      apply h_intervalIntegrable.mono_set
      rw [Set.uIcc_of_le (by linarith [Real.pi_pos]), Set.uIcc_of_le (by linarith [Real.pi_pos])]
      intro y hy
      constructor <;> linarith [hy.1, hy.2]
    intro x hx
    --set S := {y | dist x y ‚àà Set.Ioo 0 Real.pi} with Sdef
    --set S := Set.Ioo (x - Real.pi) (x + Real.pi) with Sdef
    obtain ‚ü®xIcc, N, hN‚ü© := hx
    rw [partialFourierSum_eq_conv_dirichletKernel' h_intervalIntegrable'] at hN
    have : ENNReal.ofReal (Real.pi * Œ¥ * (2 * Real.pi)) ‚â† ‚ä§ := ENNReal.ofReal_ne_top
    rw [‚Üê (ENNReal.add_le_add_iff_right this)]
    calc ENNReal.ofReal ((Œµ' - Real.pi * Œ¥) * (2 * Real.pi)) + ENNReal.ofReal (Real.pi * Œ¥ * (2 * Real.pi))
      _ = ENNReal.ofReal ((2 * Real.pi) * Œµ') := by
        rw [‚Üê ENNReal.ofReal_add]
        . ring_nf
        . apply mul_nonneg _ Real.two_pi_pos.le
          rw [Œµ'def, C_control_approximation_effect_eq hŒµ.1.le, add_sub_cancel_right]
          apply div_nonneg _ Real.pi_pos.le
          apply mul_nonneg
          . rw [mul_assoc]
            apply mul_nonneg hŒ¥.le
            rw [C1_2]
            apply mul_nonneg (by norm_num)
            apply Real.rpow_nonneg
            linarith [Real.pi_pos]
          . apply Real.rpow_nonneg (div_nonneg (by norm_num) hŒµ.1.le)
        . apply mul_nonneg (mul_nonneg Real.pi_pos.le hŒ¥.le) Real.two_pi_pos.le
      _ ‚â§ ENNReal.ofReal ((2 * Real.pi) * abs (1 / (2 * Real.pi) * ‚à´ (y : ‚Ñù) in (0 : ‚Ñù)..(2 * Real.pi), h y * dirichletKernel' N (x - y))) := by gcongr
      _ = ‚Äñ‚à´ (y : ‚Ñù) in (0 : ‚Ñù)..(2 * Real.pi), h y * dirichletKernel' N (x - y)‚Äñ‚Çä  := by
        rw [map_mul, map_div‚ÇÄ, ‚Üêmul_assoc]
        rw [ENNReal.ofReal, ‚Üê norm_toNNReal]
        conv => rhs; rw [‚Üê one_mul ‚Äñ_‚Äñ]
        simp
        rw [_root_.abs_of_nonneg Real.pi_pos.le]
        field_simp
        ring
      _ = ‚Äñ‚à´ (y : ‚Ñù) in (x - Real.pi)..(x + Real.pi), h y * dirichletKernel' N (x - y)‚Äñ‚Çä := by
        --Shift domain of integration using periodicity
        congr 2
        rw [‚Üê zero_add (2 * Real.pi), Function.Periodic.intervalIntegral_add_eq _ 0 (x - Real.pi)]
        congr 1
        ring
        apply Function.Periodic.mul h_periodic
        exact Function.Periodic.const_sub dirichletKernel'_periodic _
      _ = ‚Äñ  (‚à´ (y : ‚Ñù) in (x - Real.pi)..(x + Real.pi), h y * (max (1 - |x - y|) 0) * dirichletKernel' N (x - y))
           + (‚à´ (y : ‚Ñù) in (x - Real.pi)..(x + Real.pi), h y * (min |x - y| 1) * dirichletKernel' N (x - y))      ‚Äñ‚Çä := by
        --Split into two parts
        rw [‚Üê intervalIntegral.integral_add]
        . congr with y
          rw [‚Üêadd_mul, ‚Üêmul_add]
          conv => lhs; rw [‚Üêmul_one (h y)]
          norm_cast
          rw [min_def]
          split_ifs
          . rw [max_eq_left (by linarith)]
            simp
          . rw [max_eq_right (by linarith)]
            simp
        --use lemma that dirichletKernel is bounded
        rw [intervalIntegrable_iff_integrableOn_Icc_of_le (by linarith [Real.pi_pos])]
        apply integrableOn_mul_dirichletKernel'_max xIcc h_intervalIntegrable
        rw [intervalIntegrable_iff_integrableOn_Icc_of_le (by linarith [Real.pi_pos])]
        apply integrableOn_mul_dirichletKernel'_min xIcc h_intervalIntegrable
      _ ‚â§   ‚Äñ‚à´ (y : ‚Ñù) in (x - Real.pi)..(x + Real.pi), h y * (max (1 - |x - y|) 0) * dirichletKernel' N (x - y)‚Äñ‚Çä
          + ‚Äñ‚à´ (y : ‚Ñù) in (x - Real.pi)..(x + Real.pi), h y * (min |x - y| 1) * dirichletKernel' N (x - y)‚Äñ‚Çä := by
        --apply abs.isAbsoluteValue.abv_add
        norm_cast
        apply nnnorm_add_le
      _ ‚â§ (T' f x + T' ((starRingEnd ‚ÑÇ) ‚àò f) x) + ENNReal.ofReal (Real.pi * Œ¥ * (2 * Real.pi)) := by
        --Estimate the two parts
        gcongr
        . --first part
          calc ENNReal.ofNNReal ‚Äñ‚à´ (y : ‚Ñù) in (x - Real.pi)..(x + Real.pi), h y * (max (1 - |x - y|) 0) * dirichletKernel' N (x - y)‚Äñ‚Çä
            _ = ‚Äñ‚à´ (y : ‚Ñù) in (x - Real.pi)..(x + Real.pi), f y * (max (1 - |x - y|) 0) * dirichletKernel' N (x - y)‚Äñ‚Çä := by
              --Exchange h for f
              congr 2
              apply intervalIntegral.integral_congr
              intro y hy
              simp
              rw [Set.uIcc_of_le (by linarith)] at hy
              left
              left
              rw [fdef, ‚Üêmul_one (h y)]
              congr
              rw [Set.indicator_apply]
              have : y ‚àà F := by
                rw [Fdef]
                simp
                constructor <;> linarith [xIcc.1, xIcc.2, hy.1, hy.2]
              simp [this]
            _ = ‚Äñ‚à´ (y : ‚Ñù) in {y | dist x y ‚àà Set.Ioo 0 Real.pi}, f y * (max (1 - |x - y|) 0) * dirichletKernel' N (x - y)‚Äñ‚Çä := by
              rw [annulus_real_eq (le_refl 0), MeasureTheory.integral_union (by simp), ‚Üê MeasureTheory.integral_Ioc_eq_integral_Ioo, ‚Üê MeasureTheory.integral_union,
                intervalIntegral.integral_of_le (by linarith), MeasureTheory.integral_Ioc_eq_integral_Ioo]
              simp
              rw [Set.Ioc_union_Ioo_eq_Ioo (by linarith) (by linarith)]
              . simp
                apply Set.disjoint_of_subset_right Set.Ioo_subset_Ioc_self
                simp
              . exact measurableSet_Ioo
              -- Many similar goals => improve this?
              . apply (integrableOn_mul_dirichletKernel'_max xIcc f_integrable).mono_set
                intro y hy
                constructor <;> linarith [hy.1, hy.2, Real.pi_pos]
              . apply (integrableOn_mul_dirichletKernel'_max xIcc f_integrable).mono_set
                intro y hy
                constructor <;> linarith [hy.1, hy.2, Real.pi_pos]
              . exact measurableSet_Ioo
              . apply (integrableOn_mul_dirichletKernel'_max xIcc f_integrable).mono_set
                intro y hy
                constructor <;> linarith [hy.1, hy.2, Real.pi_pos]
              . apply (integrableOn_mul_dirichletKernel'_max xIcc f_integrable).mono_set
                intro y hy
                constructor <;> linarith [hy.1, hy.2, Real.pi_pos]

            _ = ‚Äñ‚à´ (y : ‚Ñù) in {y | dist x y ‚àà Set.Ioo 0 1}, f y * (max (1 - |x - y|) 0) * dirichletKernel' N (x - y)‚Äñ‚Çä := by
              --Adjust integration domain
              congr 2
              rw [‚ÜêMeasureTheory.integral_indicator annulus_measurableSet, ‚ÜêMeasureTheory.integral_indicator annulus_measurableSet]
              congr with y
              rw [Set.indicator_apply, Set.indicator_apply, mul_assoc, dirichlet_Hilbert_eq, K]
              split_ifs with h‚ÇÄ h‚ÇÅ h‚ÇÇ
              . trivial
              . dsimp at h‚ÇÄ
                dsimp at h‚ÇÅ
                rw [Real.dist_eq, Set.mem_Ioo] at h‚ÇÄ
                rw [Real.dist_eq, Set.mem_Ioo] at h‚ÇÅ
                push_neg at h‚ÇÅ
                rw [k_of_one_le_abs (h‚ÇÅ h‚ÇÄ.1)]
                simp
              . rw [k_of_one_le_abs]
                simp
                dsimp at h‚ÇÄ
                dsimp at h‚ÇÇ
                rw [Real.dist_eq, Set.mem_Ioo] at h‚ÇÄ
                rw [Real.dist_eq, Set.mem_Ioo] at h‚ÇÇ
                push_neg at h‚ÇÄ
                apply le_trans' (h‚ÇÄ h‚ÇÇ.1)
                linarith [Real.two_le_pi]
              . trivial
            _ ‚â§ (T' f x + T' ((starRingEnd ‚ÑÇ) ‚àò f) x) := by
              apply le_CarlesonOperatorReal' f_integrable x xIcc
        . --second part
          rw [ENNReal.ofReal]
          norm_cast
          apply NNReal.le_toNNReal_of_coe_le
          rw [coe_nnnorm]
          calc ‚Äñ‚à´ (y : ‚Ñù) in (x - Real.pi)..(x + Real.pi), h y * (min |x - y| 1) * dirichletKernel' N (x - y)‚Äñ
            _ ‚â§ (Œ¥ * Real.pi) * |(x + Real.pi) - (x - Real.pi)| := by
              apply intervalIntegral.norm_integral_le_of_norm_le_const
              intro y hy
              rw [Set.uIoc_of_le (by linarith)] at hy
              rw [mul_assoc, norm_mul]
              gcongr
              . rw [norm_eq_abs]
                apply h_bound
                rw [Fdef]
                simp
                constructor <;> linarith [xIcc.1, xIcc.2, hy.1, hy.2]
              rw [dirichletKernel', mul_add]
              set z := x - y with zdef
              calc ‚Äñ  (min |z| 1) * (exp (I * N * z) / (1 - exp (-I * z)))
                    + (min |z| 1) * (exp (-I * N * z) / (1 - exp (I * z)))‚Äñ
                _ ‚â§   ‚Äñ(min |z| 1) * (exp (I * N * z) / (1 - exp (-I * z)))‚Äñ
                    + ‚Äñ(min |z| 1) * (exp (-I * N * z) / (1 - exp (I * z)))‚Äñ := by
                  apply norm_add_le
                _ = min |z| 1 * 1 / ‚Äñ1 - exp (I * z)‚Äñ + min |z| 1 * 1 / ‚Äñ1 - exp (I * z)‚Äñ := by
                  simp
                  congr
                  . simp
                  . rw [mul_assoc I, mul_comm I]
                    norm_cast
                    rw [abs_exp_ofReal_mul_I, one_div, ‚Üêabs_conj, map_sub, map_one, ‚Üêexp_conj, ‚Üê neg_mul, map_mul,
                          conj_neg_I, conj_ofReal]
                  . /-Duplicate from above:
                    TODO: how to remove duplicate goals? -/
                    simp only [abs_eq_self, le_min_iff, abs_nonneg, zero_le_one, and_self]
                  . rw [mul_assoc I, mul_comm I, ‚Üêneg_mul]
                    norm_cast
                    rw [abs_exp_ofReal_mul_I, one_div]
                _ = 2 * (min |z| 1 / ‚Äñ1 - exp (I * z)‚Äñ) := by ring
                _ ‚â§ 2 * (Real.pi / 2) := by
                  gcongr 2 * ?_
                  --. apply min_le_right
                  . by_cases h : (1 - exp (I * z)) = 0
                    . rw [h, norm_zero, div_zero]
                      linarith [Real.pi_pos]
                    rw [div_le_iff', ‚Üêdiv_le_iff, div_div_eq_mul_div, mul_div_assoc, mul_comm]
                    apply lower_secant_bound'
                    . exact min_le_left _ _
                    . have : |z| ‚â§ Real.pi := by
                        rw [abs_le, zdef]
                        constructor <;> linarith [hy.1, hy.2]
                      rw [min_def]
                      split_ifs <;> linarith
                    . linarith [Real.pi_pos]
                    . rwa [norm_pos_iff]
                _ = Real.pi := by ring
            _ = Real.pi * Œ¥ * (2 * Real.pi) := by
              simp
              rw [‚Üêtwo_mul, _root_.abs_of_nonneg Real.two_pi_pos.le]
              ring
  have Evolume : MeasureTheory.volume E < ‚ä§ := by
    calc MeasureTheory.volume E
      _ ‚â§ MeasureTheory.volume (Set.Icc 0 (2 * Real.pi)) := by
        apply MeasureTheory.measure_mono
        rw [E_eq]
        apply Set.inter_subset_left
      _ = ENNReal.ofReal (2 * Real.pi) := by
        rw [Real.volume_Icc, sub_zero]
      _ < ‚ä§ := ENNReal.ofReal_lt_top
  obtain ‚ü®E', E'subset, measurableSetE', E'measure, h‚ü© := ENNReal.le_on_subset MeasureTheory.volume measurableSetE (CarlesonOperatorReal'_measurable f_measurable) (CarlesonOperatorReal'_measurable (continuous_star.measurable.comp f_measurable)) le_operator_add
  have E'volume : MeasureTheory.volume E' < ‚ä§ := lt_of_le_of_lt (MeasureTheory.measure_mono E'subset) Evolume
  have : ENNReal.ofReal (Real.pi * (Œµ' - Real.pi * Œ¥)) * MeasureTheory.volume E' ‚â§ ENNReal.ofReal (Œ¥ * C1_2 4 2 * (4 * Real.pi) ^ (2 : ‚Ñù)‚Åª¬π) * (MeasureTheory.volume E') ^ (2 : ‚Ñù)‚Åª¬π := by
    calc ENNReal.ofReal (Real.pi * (Œµ' - Real.pi * Œ¥)) * MeasureTheory.volume E'
    _ = ENNReal.ofReal ((Œµ' - Real.pi * Œ¥) * (2 * Real.pi)) / 2 * MeasureTheory.volume E' := by
      rw [‚Üê ENNReal.ofReal_ofNat, ‚Üê ENNReal.ofReal_div_of_pos (by norm_num)]
      ring_nf
    _ ‚â§ ENNReal.ofReal (Œ¥ * C1_2 4 2 * (4 * Real.pi) ^ (2 : ‚Ñù)‚Åª¬π) * (MeasureTheory.volume E') ^ (2 : ‚Ñù)‚Åª¬π := by
      rcases h with hE' | hE' <;>
      . apply rcarleson_exceptional_set_estimate_specific hŒ¥  _ measurableSetE' hE'
        intro x
        rw [fdef, ‚Üê Fdef]
        simp (config := { failIfUnchanged := false }) only [RCLike.star_def, Function.comp_apply,
          map_mul, norm_mul, RingHomIsometric.is_iso]
        rw [norm_indicator_eq_indicator_norm]
        simp only [norm_eq_abs, Pi.one_apply, norm_one]
        rw [Set.indicator_apply, Set.indicator_apply]
        split_ifs with inF
        . simp [h_bound x inF]
        . simp
  have Œ¥_mul_const_pos : 0 < Œ¥ * C1_2 4 2 * (4 * Real.pi) ^ (2 : ‚Ñù)‚Åª¬π := by
    apply mul_pos
    apply mul_pos hŒ¥ (by rw [C1_2]; norm_num)
    apply Real.rpow_pos_of_pos
    linarith [Real.two_pi_pos]
  have Œµ'_Œ¥_expression_pos : 0 < Real.pi * (Œµ' - Real.pi * Œ¥) := by
    rw [Œµ'def, C_control_approximation_effect_eq hŒµ.1.le, add_sub_cancel_right, mul_div_cancel‚ÇÄ _ Real.pi_pos.ne.symm]
    apply mul_pos Œ¥_mul_const_pos
    apply Real.rpow_pos_of_pos
    apply div_pos (by norm_num) hŒµ.1
  calc MeasureTheory.volume.real E
    _ ‚â§ 2 * MeasureTheory.volume.real E' := by
      -- uses E'measure
      rwa [MeasureTheory.measureReal_def, MeasureTheory.measureReal_def, ‚Üê@ENNReal.toReal_ofReal 2 (by norm_num),
        ‚ÜêENNReal.toReal_mul, ENNReal.toReal_le_toReal Evolume.ne, ENNReal.ofReal_ofNat]
      apply ENNReal.mul_ne_top ENNReal.ofReal_ne_top E'volume.ne
    _ = 2 * MeasureTheory.volume.real E' ^ ((1 + -(2 : ‚Ñù)‚Åª¬π) * 2) := by
      conv => lhs; rw [‚ÜêReal.rpow_one (MeasureTheory.volume.real E')]
      norm_num
    _ ‚â§ 2 * (Œ¥ * C1_2 4 2 * (4 * Real.pi) ^ (2 : ‚Ñù)‚Åª¬π / (Real.pi * (Œµ' - Real.pi * Œ¥))) ^ (2 : ‚Ñù) := by
      rw [Real.rpow_mul MeasureTheory.measureReal_nonneg]
      gcongr
      rw [Real.rpow_add' MeasureTheory.measureReal_nonneg (by norm_num), Real.rpow_one, le_div_iff' Œµ'_Œ¥_expression_pos, ‚Üê mul_assoc]
      apply mul_le_of_nonneg_of_le_div Œ¥_mul_const_pos.le
      apply Real.rpow_nonneg MeasureTheory.measureReal_nonneg
      rw[Real.rpow_neg MeasureTheory.measureReal_nonneg, div_inv_eq_mul]
      rw [‚Üê ENNReal.ofReal_le_ofReal_iff, ENNReal.ofReal_mul Œµ'_Œ¥_expression_pos.le, MeasureTheory.measureReal_def, ENNReal.ofReal_toReal E'volume.ne]
      --here, we use this
      apply le_trans this
      rw [ENNReal.ofReal_mul Œ¥_mul_const_pos.le, ‚Üê ENNReal.ofReal_rpow_of_nonneg ENNReal.toReal_nonneg (by norm_num), ENNReal.ofReal_toReal E'volume.ne]
      --small goal remaining
      apply mul_nonneg Œ¥_mul_const_pos.le
      apply Real.rpow_nonneg MeasureTheory.measureReal_nonneg
    _ = Œµ := by
      --choose Œµ' such that this works
      rw [Œµ'def, C_control_approximation_effect_eq hŒµ.1.le, add_sub_cancel_right, mul_div_cancel‚ÇÄ,
          div_mul_eq_div_div, div_self, one_div, Real.inv_rpow, ‚Üê Real.rpow_mul, inv_mul_cancel, Real.rpow_one, inv_div]
      ring
      norm_num
      apply div_nonneg <;> linarith [hŒµ.1]
      apply Real.rpow_nonneg
      apply div_nonneg <;> linarith [hŒµ.1]
      exact Œ¥_mul_const_pos.ne.symm
      exact Real.pi_pos.ne.symm
