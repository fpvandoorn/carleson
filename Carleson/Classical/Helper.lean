/- This file contains helper lemmas. Either they should be replaced by a mathlib version if there is
   one or they might be candidates to go there, possibly in a generalized form. -/

import Carleson.ToMathlib.Misc
import Mathlib.MeasureTheory.Integral.IntervalIntegral

open MeasureTheory

theorem Real.volume_uIoc {a b : ‚Ñù} : volume (Set.uIoc a b) = ENNReal.ofReal |b - a| := by
  /- Cf. proof of Real.volume_interval-/
  rw [Set.uIoc, volume_Ioc, max_sub_min_eq_abs]

lemma intervalIntegral.integral_conj' {Œº : Measure ‚Ñù} {ùïú : Type} [RCLike ùïú] {f : ‚Ñù ‚Üí ùïú} {a b : ‚Ñù}:
    ‚à´ x in a..b, (starRingEnd ùïú) (f x) ‚àÇŒº = (starRingEnd ùïú) (‚à´ x in a..b, f x ‚àÇŒº) := by
  rw [intervalIntegral_eq_integral_uIoc, integral_conj, intervalIntegral_eq_integral_uIoc,
      RCLike.real_smul_eq_coe_mul, RCLike.real_smul_eq_coe_mul, map_mul, RCLike.conj_ofReal]

lemma intervalIntegrable_of_bdd {a b : ‚Ñù} {Œ¥ : ‚Ñù} {g : ‚Ñù ‚Üí ‚ÑÇ} (measurable_g : Measurable g) (bddg : ‚àÄ x, ‚Äñg x‚Äñ ‚â§ Œ¥) : IntervalIntegrable g volume a b := by
  apply @IntervalIntegrable.mono_fun' _ _ _ _ _ _ (fun _ ‚Ü¶ Œ¥)
  ¬∑ exact intervalIntegrable_const
  ¬∑ exact measurable_g.aestronglyMeasurable
  ¬∑ rw [Filter.EventuallyLE, ae_restrict_iff_subtype measurableSet_uIoc]
    apply Filter.Eventually.of_forall
    rw [Subtype.forall]
    exact fun x _ ‚Ü¶ bddg x

lemma IntervalIntegrable.bdd_mul {F : Type} [NormedDivisionRing F] {f g : ‚Ñù ‚Üí F} {a b : ‚Ñù} {Œº : Measure ‚Ñù}
    (hg : IntervalIntegrable g Œº a b) (hm : AEStronglyMeasurable f Œº) (hfbdd : ‚àÉ C, ‚àÄ x, ‚Äñf x‚Äñ ‚â§ C) : IntervalIntegrable (fun x ‚Ü¶ f x * g x) Œº a b := by
  rw [intervalIntegrable_iff, IntegrableOn]
  apply Integrable.bdd_mul _ hm.restrict hfbdd
  rwa [‚Üê IntegrableOn, ‚Üê intervalIntegrable_iff]

lemma IntervalIntegrable.mul_bdd {F : Type} [NormedField F] {f g : ‚Ñù ‚Üí F} {a b : ‚Ñù} {Œº : Measure ‚Ñù}
    (hf : IntervalIntegrable f Œº a b) (hm : AEStronglyMeasurable g Œº) (hgbdd : ‚àÉ C, ‚àÄ x, ‚Äñg x‚Äñ ‚â§ C) : IntervalIntegrable (fun x ‚Ü¶ f x * g x) Œº a b := by
  conv => pattern (fun x ‚Ü¶ f x * g x); ext x; rw [mul_comm]
  exact hf.bdd_mul hm hgbdd

lemma IntegrableOn.sub {Œ± : Type} {Œ≤ : Type} {m : MeasurableSpace Œ±}
    {Œº : Measure Œ±} [NormedAddCommGroup Œ≤] {s : Set Œ±} {f g : Œ± ‚Üí Œ≤} (hf : IntegrableOn f s Œº) (hg : IntegrableOn g s Œº) : IntegrableOn (f - g) s Œº := by
  apply Integrable.sub <;> rwa [‚Üê IntegrableOn]


lemma ConditionallyCompleteLattice.le_biSup {Œ± : Type} [ConditionallyCompleteLinearOrder Œ±] {Œπ : Type} [Nonempty Œπ]
    {f : Œπ ‚Üí Œ±} {s : Set Œπ} {a : Œ±} (hfs : BddAbove (f '' s)) (ha : ‚àÉ i ‚àà s, f i = a) :
    a ‚â§ ‚®Ü i ‚àà s, f i := by
  apply ConditionallyCompleteLattice.le_csSup
  ¬∑ --TODO: improve this
    rw [bddAbove_def] at *
    rcases hfs with ‚ü®x, hx‚ü©
    use (max x (sSup ‚àÖ))
    intro y hy
    simp only [Set.mem_range] at hy
    rcases hy with ‚ü®z, hz‚ü©
    rw [iSup] at hz
    by_cases h : z ‚àà s
    ¬∑ have : (@Set.range Œ± (z ‚àà s) fun _ ‚Ü¶ f z) = {f z} := by
        rw [Set.eq_singleton_iff_unique_mem]
        exact ‚ü®Set.mem_range_self h, fun x hx ‚Ü¶ hx.2.symm‚ü©
      rw [this, csSup_singleton _] at hz
      have : f z ‚â§ x := by
        simp only [Set.mem_image, forall_exists_index, and_imp, forall_apply_eq_imp_iff‚ÇÇ] at hx
        exact hx z h
      rw [hz] at this
      exact le_max_of_le_left this
    have : (@Set.range Œ± (z ‚àà s) fun _ ‚Ü¶ f z) = ‚àÖ := by simpa
    rw [this] at hz
    exact hz ‚ñ∏ le_max_right x y
  rw [Set.mem_range]
  rcases ha with ‚ü®i, hi, fia‚ü©
  use i
  rw [iSup]
  convert csSup_singleton _
  rw [Set.eq_singleton_iff_unique_mem]
  refine ‚ü®‚ü®hi, fia‚ü©, fun x hx ‚Ü¶ ?_‚ü©
  simp only [Set.mem_range, exists_prop] at hx
  rwa [hx.2] at fia


/-Adapted from mathlib Function.Periodic.exists_mem_Ico‚ÇÄ-/
theorem Function.Periodic.exists_mem_Ico‚ÇÄ' {Œ± : Type} {Œ≤ : Type} {f : Œ± ‚Üí Œ≤} {c : Œ±}
  [LinearOrderedAddCommGroup Œ±] [Archimedean Œ±] (h : Periodic f c) (hc : 0 < c) (x : Œ±) : ‚àÉ (n : ‚Ñ§), (x - n ‚Ä¢ c) ‚àà Set.Ico 0 c ‚àß f x = f (x - n ‚Ä¢ c) :=
  let ‚ü®n, H, _‚ü© := existsUnique_zsmul_near_of_pos' hc x
  ‚ü®n, H, (h.sub_zsmul_eq n).symm‚ü©

/-Adapted from mathlib Function.Periodic.exists_mem_Ico‚ÇÄ-/
theorem Function.Periodic.exists_mem_Ico' {Œ± : Type} {Œ≤ : Type} {f : Œ± ‚Üí Œ≤} {c : Œ±}
  [LinearOrderedAddCommGroup Œ±] [Archimedean Œ±] (h : Periodic f c) (hc : 0 < c) (x a: Œ±) : ‚àÉ (n : ‚Ñ§), (x - n ‚Ä¢ c) ‚àà Set.Ico a (a + c) ‚àß f x = f (x - n ‚Ä¢ c) :=
  let ‚ü®n, H, _‚ü© := existsUnique_sub_zsmul_mem_Ico hc x a
  ‚ü®n, H, (h.sub_zsmul_eq n).symm‚ü©
