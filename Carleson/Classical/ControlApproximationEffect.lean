/- This file formalizes section 11.6 (The error bound) from the paper. -/
import Carleson.MetricCarleson
import Carleson.Classical.Helper
import Carleson.Classical.Basic
import Carleson.Classical.HilbertKernel
import Carleson.Classical.DirichletKernel
import Carleson.Classical.CarlesonOperatorReal
import Carleson.Classical.CarlesonOnTheRealLine

import Mathlib.Analysis.Fourier.AddCircle


noncomputable section

local notation "T" => CarlesonOperatorReal K
local notation "S_" => partialFourierSum



/- TODO: might be generalized. -/
lemma ENNReal.le_on_subset {X : Type} [MeasurableSpace X] (Œº : MeasureTheory.Measure X) {f g : X ‚Üí ENNReal} {E : Set X} (hE : MeasurableSet E)
    (hf : Measurable f) (hg : Measurable g) {a : ENNReal} (h : ‚àÄ x ‚àà E, a ‚â§ f x + g x) :
    ‚àÉ E' ‚äÜ E, MeasurableSet E' ‚àß Œº E ‚â§ 2 * Œº E' ‚àß ((‚àÄ x ‚àà E', a / 2 ‚â§ f x) ‚à® (‚àÄ x ‚àà E', a / 2 ‚â§ g x)) := by
  set Ef := E ‚à© f‚Åª¬π' (Set.Ici (a / 2)) with Ef_def
  set Eg := E ‚à© g‚Åª¬π' (Set.Ici (a / 2)) with Eg_def
  have : E ‚äÜ Ef ‚à™ Eg := by
    intro x hx
    rw [Ef_def, Eg_def]
    simp
    by_contra hx'
    push_neg at hx'
    absurd le_refl a
    push_neg
    calc a
      _ ‚â§ f x + g x := h x hx
      _ < a / 2 + a / 2 := by
        gcongr
        ¬∑ exact hx'.1 hx
        ¬∑ exact hx'.2 hx
      _ = a := by
        ring_nf
        apply ENNReal.div_mul_cancel <;> norm_num
  have : Œº E ‚â§ 2 * Œº Ef ‚à® Œº E ‚â§ 2 * Œº Eg := by
    by_contra hEfg
    push_neg at hEfg
    absurd le_refl (2 * Œº E)
    push_neg
    calc 2 * Œº E
    _ ‚â§ 2 * Œº (Ef ‚à™ Eg) := by
      gcongr
    _ ‚â§ 2 * (Œº Ef + Œº Eg) := by
      gcongr
      exact MeasureTheory.measure_union_le _ _
    _ = 2 * Œº Ef + 2 * Œº Eg := by ring
    _ < Œº E + Œº E := by
      gcongr
      ¬∑ exact hEfg.1
      ¬∑ exact hEfg.2
    _ = 2 * Œº E := by ring
  rcases this with hEf | hEg
  ¬∑ use Ef
    constructor
    ¬∑ exact Set.inter_subset_left
    constructor
    ¬∑ apply MeasurableSet.inter hE
      exact hf measurableSet_Ici
    use hEf
    left
    rw [Ef_def]
    simp
  ¬∑ use Eg
    constructor
    ¬∑ exact Set.inter_subset_left
    constructor
    ¬∑ apply MeasurableSet.inter hE
      exact hg measurableSet_Ici
    use hEg
    right
    rw [Eg_def]
    simp


open Complex ComplexConjugate

lemma Dirichlet_Hilbert_eq {N : ‚Ñï} {x : ‚Ñù} :
    (max (1 - |x|) 0) * dirichletKernel' N (x) = exp (I * (-N * x)) * k x + conj (exp (I * (-N * x)) * k x) := by
  simp [dirichletKernel', K, k, conj_ofReal, ‚Üêexp_conj, mul_comm, ‚Üêmul_assoc, ‚Üêexp_add]
  ring_nf

lemma Dirichlet_Hilbert_diff {N : ‚Ñï} {x : ‚Ñù} (hx : x ‚àà Set.Icc (-Real.pi) Real.pi):
    ‚ÄñdirichletKernel' N (x) - (exp (I * (-N * x)) * k x + conj (exp (I * (-N * x)) * k x))‚Äñ ‚â§ Real.pi := by
  rw [‚Üê Dirichlet_Hilbert_eq]
  by_cases h : 1 - cexp (I * ‚Üëx) = 0
  ¬∑ rw [sub_eq_zero] at h
    rw [dirichletKernel'_eq_zero h.symm]
    simp [Real.pi_pos.le]
  push_neg at h
  conv => pattern (dirichletKernel' N x); rw [‚Üê (one_mul (dirichletKernel' N x))]
  rw [‚Üê sub_mul]
  norm_cast
  rw [‚Üê min_sub_sub_left]
  simp only [sub_sub_cancel, sub_zero]
  rw [dirichletKernel', mul_add]
  calc ‚Äñ  (min |x| 1) * (exp (I * N * x) / (1 - exp (-I * x)))
        + (min |x| 1) * (exp (-I * N * x) / (1 - exp (I * x)))‚Äñ
    _ ‚â§   ‚Äñ(min |x| 1) * (exp (I * N * x) / (1 - exp (-I * x)))‚Äñ
        + ‚Äñ(min |x| 1) * (exp (-I * N * x) / (1 - exp (I * x)))‚Äñ := by
      apply norm_add_le
    _ ‚â§ |x| * (1 / ‚Äñ1 - exp (I * x)‚Äñ) + |x| * (1 / ‚Äñ1 - exp (I * x)‚Äñ) := by
      simp only [neg_mul, norm_mul, norm_eq_abs, abs_ofReal, norm_div]
      rw [_root_.abs_of_nonneg (by simp)]
      gcongr
      ¬∑ apply min_le_left
      ¬∑ simpa
      ¬∑ rw [mul_assoc I, mul_comm I]
        norm_cast
        rw [abs_exp_ofReal_mul_I]
      . rw [‚Üêabs_conj, map_sub, map_one, ‚Üêexp_conj, ‚Üê neg_mul, map_mul, conj_I, conj_ofReal]
      . apply min_le_left
      . /-Duplicate from above:
        TODO: how to remove duplicate goals? -/
        rw [mul_assoc I, mul_comm I, ‚Üê neg_mul]
        norm_cast
        rw [abs_exp_ofReal_mul_I]
    _ = 2 * (|x| / ‚Äñ1 - exp (I * x)‚Äñ) := by ring
    _ ‚â§ 2 * (Real.pi / 2) := by
      gcongr 2 * ?_
      rw [div_le_iff' (by rwa [norm_pos_iff]), ‚Üêdiv_le_iff (by linarith [Real.pi_pos]), div_div_eq_mul_div, mul_div_assoc, mul_comm]
      apply lower_secant_bound' (by rfl)
      have : |x| ‚â§ Real.pi := by
        rwa [abs_le]
      linarith
    _ = Real.pi := by ring


section
open Filter Topology

--TODO: proof might be improved
lemma le_iSup_of_tendsto {Œ± Œ≤} [TopologicalSpace Œ±] [CompleteLinearOrder Œ±] [OrderTopology Œ±]
    [Nonempty Œ≤] [SemilatticeSup Œ≤] {f : Œ≤ ‚Üí Œ±} {a : Œ±} (ha : Tendsto f atTop (ùìù a)) : a ‚â§ iSup f := by
  apply le_of_forall_lt
  intro c hc
  have : ‚àÄ·∂† (x : Œ≤) in atTop, c < f x := eventually_gt_of_tendsto_gt hc ha
  rcases this.exists with ‚ü®x, hx‚ü©
  exact lt_of_lt_of_le hx (le_iSup _ _)

lemma integrable_annulus {x : ‚Ñù} (hx : x ‚àà Set.Icc 0 (2 * Real.pi)) {f : ‚Ñù ‚Üí ‚ÑÇ} (hf : IntervalIntegrable f MeasureTheory.volume (-Real.pi) (3 * Real.pi)) {r : ‚Ñù} (r_nonneg : 0 ‚â§ r) (rle1 : r < 1) :
    MeasureTheory.Integrable (fun x ‚Ü¶ f x) (MeasureTheory.volume.restrict {y | dist x y ‚àà Set.Ioo r 1}) := by
  rw [‚Üê MeasureTheory.IntegrableOn, annulus_real_eq r_nonneg]
  apply MeasureTheory.IntegrableOn.union <;>
  ¬∑ rw [‚Üê intervalIntegrable_iff_integrableOn_Ioo_of_le (by linarith)]
    apply hf.mono_set
    rw [Set.uIcc_of_le (by linarith), Set.uIcc_of_le (by linarith [Real.pi_pos])]
    intro y hy
    constructor <;> linarith [hx.1, hx.2, hy.1, hy.2, Real.two_le_pi]

lemma intervalIntegrable_mul_dirichletKernel' {x : ‚Ñù} (hx : x ‚àà Set.Icc 0 (2 * Real.pi)) {f : ‚Ñù ‚Üí ‚ÑÇ} (hf : IntervalIntegrable f MeasureTheory.volume (-Real.pi) (3 * Real.pi)) {N : ‚Ñï} :
    IntervalIntegrable (fun y ‚Ü¶ f y * dirichletKernel' N (x - y)) MeasureTheory.volume (x - Real.pi) (x + Real.pi) := by
  apply (hf.mono_set _).mul_bdd (dirichletKernel'_measurable.comp (measurable_id.const_sub _)).aestronglyMeasurable
  ¬∑ use (2 * N + 1)
    intro y
    apply norm_dirichletKernel'_le
  ¬∑ rw [Set.uIcc_of_le, Set.uIcc_of_le]
    apply Set.Icc_subset_Icc
    all_goals linarith [hx.1, hx.2, Real.pi_pos]

lemma intervalIntegrable_mul_dirichletKernel'_max {x : ‚Ñù} (hx : x ‚àà Set.Icc 0 (2 * Real.pi)) {f : ‚Ñù ‚Üí ‚ÑÇ} (hf : IntervalIntegrable f MeasureTheory.volume (-Real.pi) (3 * Real.pi)) {N : ‚Ñï} :
    IntervalIntegrable (fun y ‚Ü¶ f y * ((max (1 - |x - y|) 0) * dirichletKernel' N (x - y))) MeasureTheory.volume (x - Real.pi) (x + Real.pi) := by
  conv => pattern ((f _) * _); rw [‚Üê mul_assoc]
  apply intervalIntegrable_mul_dirichletKernel' hx (IntervalIntegrable.mul_bdd hf (Complex.measurable_ofReal.comp ((Measurable.const_sub (_root_.continuous_abs.measurable.comp (measurable_id.const_sub _)) _).max measurable_const)).aestronglyMeasurable _)
  use 1
  intro y
  simp only [id_eq, Function.comp_apply, norm_eq_abs, abs_ofReal]
  rw [_root_.abs_of_nonneg (le_max_right _ _)]
  simp

lemma intervalIntegrable_mul_dirichletKernel'_max' {x : ‚Ñù} (hx : x ‚àà Set.Icc 0 (2 * Real.pi)) {f : ‚Ñù ‚Üí ‚ÑÇ} (hf : IntervalIntegrable f MeasureTheory.volume (-Real.pi) (3 * Real.pi)) {N : ‚Ñï} :
    IntervalIntegrable (fun y ‚Ü¶ f y * (dirichletKernel' N (x - y) - (max (1 - |x - y|) 0) * dirichletKernel' N (x - y))) MeasureTheory.volume (x - Real.pi) (x + Real.pi) := by
  conv => pattern ((f _) * _); rw [mul_sub]
  exact (intervalIntegrable_mul_dirichletKernel' hx hf).sub (intervalIntegrable_mul_dirichletKernel'_max hx hf)

lemma domain_reformulation {g : ‚Ñù ‚Üí ‚ÑÇ} (hg : IntervalIntegrable g MeasureTheory.volume (-Real.pi) (3 * Real.pi)) {N : ‚Ñï} {x : ‚Ñù} (hx : x ‚àà Set.Icc 0 (2 * Real.pi)) :
      ‚à´ (y : ‚Ñù) in x - Real.pi..x + Real.pi,
        g y * ((max (1 - |x - y|) 0) * dirichletKernel' N (x - y))
    = ‚à´ (y : ‚Ñù) in {y | dist x y ‚àà Set.Ioo 0 1},
        g y * ((max (1 - |x - y|) 0) * dirichletKernel' N (x - y)) := by
  calc _
    _ = ‚à´ (y : ‚Ñù) in {y | dist x y ‚àà Set.Ioo 0 Real.pi}, g y * ((max (1 - |x - y|) 0) * dirichletKernel' N (x - y)) := by
      rw [annulus_real_eq (le_refl 0), MeasureTheory.integral_union (by simp) measurableSet_Ioo, ‚Üê MeasureTheory.integral_Ioc_eq_integral_Ioo, ‚Üê MeasureTheory.integral_union (Set.disjoint_of_subset_right Set.Ioo_subset_Ioc_self (by simp)) measurableSet_Ioo,
        intervalIntegral.integral_of_le (by linarith [Real.pi_pos]), MeasureTheory.integral_Ioc_eq_integral_Ioo,
        sub_zero, add_zero, Set.Ioc_union_Ioo_eq_Ioo (by linarith [Real.pi_pos]) (by linarith [Real.pi_pos])]
      --TODO: Many similar goals => improve this further?
      ¬∑ rw [‚Üê intervalIntegrable_iff_integrableOn_Ioc_of_le (by linarith [Real.pi_pos])]
        apply (intervalIntegrable_mul_dirichletKernel'_max hx hg).mono_set
        rw [Set.uIcc_of_le (by linarith [Real.pi_pos]), Set.uIcc_of_le (by linarith [Real.pi_pos])]
        apply Set.Icc_subset_Icc_right (by linarith [Real.pi_pos])
      all_goals
        rw [‚Üê intervalIntegrable_iff_integrableOn_Ioo_of_le (by linarith [Real.pi_pos])]
        apply (intervalIntegrable_mul_dirichletKernel'_max hx hg).mono_set
        rw [Set.uIcc_of_le (by linarith [Real.pi_pos]), Set.uIcc_of_le (by linarith [Real.pi_pos])]
      ¬∑ apply Set.Icc_subset_Icc_left (by linarith [Real.pi_pos])
      ¬∑ apply Set.Icc_subset_Icc_right (by linarith [Real.pi_pos])
      ¬∑ apply Set.Icc_subset_Icc_left (by linarith [Real.pi_pos])
    _ = ‚à´ (y : ‚Ñù) in {y | dist x y ‚àà Set.Ioo 0 1}, g y * ((max (1 - |x - y|) 0) * dirichletKernel' N (x - y)) := by
      rw [‚ÜêMeasureTheory.integral_indicator annulus_measurableSet, ‚ÜêMeasureTheory.integral_indicator annulus_measurableSet]
      congr with y
      rw [Set.indicator_apply, Set.indicator_apply, Dirichlet_Hilbert_eq]
      split_ifs with h‚ÇÄ h‚ÇÅ h‚ÇÇ
      ¬∑ trivial
      ¬∑ dsimp at h‚ÇÄ h‚ÇÅ
        rw [Real.dist_eq, Set.mem_Ioo] at h‚ÇÄ h‚ÇÅ
        push_neg at h‚ÇÅ
        rw [k_of_one_le_abs (h‚ÇÅ h‚ÇÄ.1)]
        simp
      ¬∑ rw [k_of_one_le_abs]
        . simp
        dsimp at h‚ÇÄ h‚ÇÇ
        rw [Real.dist_eq, Set.mem_Ioo] at h‚ÇÄ h‚ÇÇ
        push_neg at h‚ÇÄ
        exact le_trans' (h‚ÇÄ h‚ÇÇ.1) (by linarith [Real.two_le_pi])
      . trivial

lemma intervalIntegrable_mul_dirichletKernel'_specific {x : ‚Ñù} (hx : x ‚àà Set.Icc 0 (2 * Real.pi)) {f : ‚Ñù ‚Üí ‚ÑÇ} (hf : IntervalIntegrable f MeasureTheory.volume (-Real.pi) (3 * Real.pi)) {N : ‚Ñï} :
    MeasureTheory.IntegrableOn (fun y ‚Ü¶ f y * ((max (1 - |x - y|) 0) * dirichletKernel' N (x - y))) {y | dist x y ‚àà Set.Ioo 0 1} MeasureTheory.volume := by
  have : IntervalIntegrable (fun y ‚Ü¶ f y * ((max (1 - |x - y|) 0) * dirichletKernel' N (x - y))) MeasureTheory.volume (x - Real.pi) (x + Real.pi) := intervalIntegrable_mul_dirichletKernel'_max hx hf
  rw [intervalIntegrable_iff_integrableOn_Ioo_of_le (by linarith [Real.pi_pos])] at this
  apply this.mono_set
  intro y hy
  rw [annulus_real_eq (by rfl)] at hy
  rcases hy with h | h <;> constructor <;> linarith [h.1, h.2, hx.1, hx.2, Real.two_le_pi]


lemma le_CarlesonOperatorReal {g : ‚Ñù ‚Üí ‚ÑÇ} (hg : IntervalIntegrable g MeasureTheory.volume (-Real.pi) (3 * Real.pi)) {N : ‚Ñï} {x : ‚Ñù} (hx : x ‚àà Set.Icc 0 (2 * Real.pi)) :
    --‚Äñ‚à´ (y : ‚Ñù) in {y | dist x y ‚àà Set.Ioo 0 1}, f y * (max (1 - |x - y|) 0) * dirichletKernel' N (x - y)‚Äñ‚Çä ‚â§ T f x + T (conj ‚àò f) x := by
    ‚Äñ‚à´ (y : ‚Ñù) in x - Real.pi..x + Real.pi, g y * ((max (1 - |x - y|) 0) * dirichletKernel' N (x - y))‚Äñ‚Çä
    ‚â§ T g x + T (conj ‚àò g) x := by
  rw [domain_reformulation hg hx]
  set s : ‚Ñï ‚Üí Set ‚Ñù := fun n ‚Ü¶ {y | dist x y ‚àà Set.Ioo (1 / (n + 2 : ‚Ñù)) 1} with sdef
  have hs : {y | dist x y ‚àà Set.Ioo 0 1} = ‚ãÉ n, s n := by
    ext y
    constructor
    ¬∑ intro hy
      rw [Set.mem_setOf_eq, Set.mem_Ioo] at hy
      obtain ‚ü®n, hn‚ü© := exists_nat_gt (1 / dist x y)
      rw [Set.mem_iUnion]
      use n
      rw [sdef, Set.mem_setOf_eq, one_div]
      refine ‚ü®?_, hy.2‚ü©
      rw [inv_lt (by linarith) hy.1, inv_eq_one_div]
      apply lt_trans hn
      linarith
    ¬∑ intro hy
      simp at hy
      rcases hy with ‚ü®n, hn‚ü©
      rw [sdef] at hn
      simp at hn
      refine ‚ü®lt_trans' hn.1 ?_, hn.2‚ü©
      norm_num
      linarith
  have : Tendsto (fun i => ‚à´ y in s i, g y * ((max (1 - |x - y|) 0) * dirichletKernel' N (x - y))) atTop (ùìù (‚à´ y in ‚ãÉ n, s n, g y * ((max (1 - |x - y|) 0) * dirichletKernel' N (x - y)))) := by
    apply MeasureTheory.tendsto_setIntegral_of_monotone
    ¬∑ intro n
      exact annulus_measurableSet
    ¬∑ intro n m nlem
      simp only [Set.le_eq_subset]
      intro y hy
      rw [sdef] at *
      simp only [one_div, Set.mem_Ioo, Set.mem_setOf_eq] at *
      refine ‚ü®lt_of_le_of_lt ?_ hy.1, hy.2‚ü©
      rw [inv_le_inv]
      norm_cast
      all_goals linarith
    ¬∑ rw [‚Üê hs]
      --uses that dirichletKernel' is bounded
      exact intervalIntegrable_mul_dirichletKernel'_specific hx hg
  calc ENNReal.ofNNReal ‚Äñ‚à´ (y : ‚Ñù) in {y | dist x y ‚àà Set.Ioo 0 1}, g y * ((max (1 - |x - y|) 0) * dirichletKernel' N (x - y))‚Äñ‚Çä
    _ = ‚Äñ‚à´ y in ‚ãÉ n, s n, g y * ((max (1 - |x - y|) 0) * dirichletKernel' N (x - y))‚Äñ‚Çä := by congr
    _ ‚â§ ‚®Ü (i : ‚Ñï), ‚Üë‚Äñ‚à´ y in s i, g y * ((max (1 - |x - y|) 0) * dirichletKernel' N (x - y))‚Äñ‚Çä := by
      apply le_iSup_of_tendsto
      rw [ENNReal.tendsto_coe]
      exact Tendsto.nnnorm this
    _ ‚â§ ‚®Ü (r : ‚Ñù) (_ : 0 < r) (_ : r < 1), ‚Üë‚Äñ‚à´ y in {y | dist x y ‚àà Set.Ioo r 1}, g y * ((max (1 - |x - y|) 0) * dirichletKernel' N (x - y))‚Äñ‚Çä := by
      apply iSup_le
      intro n
      apply le_iSup_of_le (1 / (n + 2 : ‚Ñù))
      apply le_iSup‚ÇÇ_of_le (by simp; linarith) (by rw [div_lt_iff] <;> linarith)
      rfl
    _ = ‚®Ü (r : ‚Ñù) (_ : 0 < r) (_ : r < 1), ‚Üë‚Äñ‚à´ y in {y | dist x y ‚àà Set.Ioo r 1}, g y * (exp (I * (-(Int.ofNat N) * x)) * K x y * exp (I * N * y) + conj (exp (I * (-(Int.ofNat N) * x)) * K x y * exp (I * (Int.ofNat N) * y)))‚Äñ‚Çä := by
      apply iSup_congr
      intro r
      apply iSup_congr
      intro _
      apply iSup_congr
      intro _
      congr with y
      congr
      rw [Dirichlet_Hilbert_eq]
      simp only [ofReal_sub, mul_comm, mul_neg, ‚Üê mul_assoc, k, map_mul, ‚Üê exp_conj, map_neg,
        conj_I, map_sub, conj_ofReal, map_natCast, neg_neg, map_div‚ÇÄ, map_one, Int.ofNat_eq_coe,
        Int.cast_natCast, K, ‚Üê exp_add, map_add]
      ring_nf
    _ ‚â§ ‚®Ü (n : ‚Ñ§) (r : ‚Ñù) (_ : 0 < r) (_ : r < 1), ‚Üë‚Äñ‚à´ y in {y | dist x y ‚àà Set.Ioo r 1}, g y * (exp (I * (-n * x)) * K x y * exp (I * n * y) + conj (exp (I * (-n * x)) * K x y * exp (I * n * y)))‚Äñ‚Çä := by
      let F : ‚Ñ§ ‚Üí ENNReal := fun (n : ‚Ñ§) ‚Ü¶ ‚®Ü (r : ‚Ñù) (_ : 0 < r) (_ : r < 1), ‚Üë‚Äñ‚à´ y in {y | dist x y ‚àà Set.Ioo r 1}, g y * (exp (I * (-n * x)) * K x y * exp (I * n * y) + conj (exp (I * (-n * x)) * K x y * exp (I * n * y)))‚Äñ‚Çä
      exact le_iSup F ((Int.ofNat N))
    _ ‚â§ ‚®Ü (n : ‚Ñ§) (r : ‚Ñù) (_ : 0 < r) (_ : r < 1), (  ‚Üë‚Äñ‚à´ y in {y | dist x y ‚àà Set.Ioo r 1}, g y * K x y * exp (I * n * y)‚Äñ‚Çä
                                                    + ‚Üë‚Äñ‚à´ y in {y | dist x y ‚àà Set.Ioo r 1}, (conj ‚àò g) y * K x y * exp (I * n * y)‚Äñ‚Çä) := by
      apply iSup‚ÇÇ_mono
      intro n r
      apply iSup‚ÇÇ_mono
      intro rpos rle1
      norm_cast
      push_cast
      calc ‚Äñ‚à´ y in {y | dist x y ‚àà Set.Ioo r 1}, g y * (exp (I * (-n * x)) * K x y * exp (I * n * y) + conj (exp (I * (-n * x)) * K x y * exp (I * n * y)))‚Äñ‚Çä
        _ = ‚Äñ‚à´ y in {y | dist x y ‚àà Set.Ioo r 1}, g y * (exp (I * (-n * x)) * K x y * exp (I * n * y)) + g y * conj (exp (I * (-n * x)) * K x y * exp (I * n * y))‚Äñ‚Çä := by
          congr with y
          rw [mul_add]
        _ = ‚Äñ (‚à´ y in {y | dist x y ‚àà Set.Ioo r 1}, g y * (exp (I * (-n * x)) * K x y * exp (I * n * y)))
             + ‚à´ y in {y | dist x y ‚àà Set.Ioo r 1}, g y * conj (exp (I * (-n * x)) * K x y * exp (I * n * y))‚Äñ‚Çä := by
          congr
          -- Integrability follows from r > 0
          have measurable‚ÇÅ : Measurable fun x_1 ‚Ü¶ (I * (-‚Üën * ‚Üëx)).exp * K x x_1 * (I * ‚Üën * ‚Üëx_1).exp := by
            apply Measurable.mul (Measurable.mul _ Hilbert_kernel_measurable.of_uncurry_left) <;> measurability
          have boundedness‚ÇÅ {y : ‚Ñù} (h : r ‚â§ dist x y) : ‚Äñ(I * (-‚Üën * ‚Üëx)).exp * K x y * (I * ‚Üën * ‚Üëy).exp‚Äñ ‚â§ (2 ^ (2 : ‚Ñù) / (2 * r)) := by
            calc ‚Äñ(I * (-‚Üën * ‚Üëx)).exp * K x y * (I * ‚Üën * ‚Üëy).exp‚Äñ
              _ = ‚Äñ(I * (-‚Üën * ‚Üëx)).exp‚Äñ * ‚ÄñK x y‚Äñ * ‚Äñ(I * ‚Üën * ‚Üëy).exp‚Äñ := by
                rw [norm_mul, norm_mul]
              _ ‚â§ 1 * (2 ^ (2 : ‚Ñù) / (2 * |x - y|)) * 1 := by
                gcongr
                ¬∑ rw [norm_eq_abs, mul_comm]
                  norm_cast
                  rw [abs_exp_ofReal_mul_I]
                ¬∑ exact Hilbert_kernel_bound
                ¬∑ rw [norm_eq_abs, mul_assoc, mul_comm]
                  norm_cast
                  rw [abs_exp_ofReal_mul_I]
              _ ‚â§ (2 ^ (2 : ‚Ñù) / (2 * r)) := by
                rw [one_mul, mul_one, ‚Üê Real.dist_eq]
                gcongr
          have integrable‚ÇÅ := (integrable_annulus hx hg rpos.le rle1)
          rw [MeasureTheory.integral_add]
          ¬∑ conv => pattern ((g _) * _); rw [mul_comm]
            apply MeasureTheory.Integrable.bdd_mul' integrable‚ÇÅ measurable‚ÇÅ.aestronglyMeasurable
            ¬∑ rw [MeasureTheory.ae_restrict_iff' annulus_measurableSet]
              apply eventually_of_forall
              exact fun _ hy ‚Ü¶ boundedness‚ÇÅ hy.1.le
          ¬∑ conv => pattern ((g _) * _); rw [mul_comm]
            apply MeasureTheory.Integrable.bdd_mul' integrable‚ÇÅ
            ¬∑ apply Measurable.aestronglyMeasurable
              exact continuous_star.measurable.comp measurable‚ÇÅ
            ¬∑ rw [MeasureTheory.ae_restrict_iff' annulus_measurableSet]
              apply eventually_of_forall
              intro y hy
              rw [RCLike.norm_conj]
              exact boundedness‚ÇÅ hy.1.le
        _ ‚â§   ‚Äñ‚à´ y in {y | dist x y ‚àà Set.Ioo r 1}, g y * (exp (I * (-n * x)) * K x y * exp (I * n * y))‚Äñ‚Çä
            + ‚Äñ‚à´ y in {y | dist x y ‚àà Set.Ioo r 1}, g y * conj (exp (I * (-n * x)) * K x y * exp (I * n * y))‚Äñ‚Çä := by
          apply nnnorm_add_le
        _ =   ‚Äñ‚à´ y in {y | dist x y ‚àà Set.Ioo r 1}, exp (I * (-n * x)) * (g y * K x y * exp (I * n * y))‚Äñ‚Çä
            + ‚Äñ‚à´ y in {y | dist x y ‚àà Set.Ioo r 1}, exp (I * (-n * x)) * ((conj ‚àò g) y * K x y * exp (I * n * y))‚Äñ‚Çä := by
            congr 1
            ¬∑ congr with y
              ring
            ¬∑ rw [‚Üênnnorm_star, ‚ÜêstarRingEnd_apply, ‚Üêintegral_conj]
              congr with y
              simp
              ring
        _ =   ‚Äñ‚à´ y in {y | dist x y ‚àà Set.Ioo r 1}, g y * K x y * exp (I * n * y)‚Äñ‚Çä
            + ‚Äñ‚à´ y in {y | dist x y ‚àà Set.Ioo r 1}, (conj ‚àò g) y * K x y * exp (I * n * y)‚Äñ‚Çä := by
          rw [‚Üê NNReal.coe_inj]
          push_cast
          norm_cast
          congr 1 <;>
          . rw [MeasureTheory.integral_mul_left, norm_mul, norm_eq_abs, mul_comm I, abs_exp_ofReal_mul_I, one_mul]
    _ ‚â§ T g x + T (conj ‚àò g) x := by
      rw [CarlesonOperatorReal, CarlesonOperatorReal]
      apply iSup‚ÇÇ_le
      intro n r
      apply iSup‚ÇÇ_le
      intro rpos rle1
      gcongr <;>
      ¬∑ apply le_iSup‚ÇÇ_of_le n r
        apply le_iSup‚ÇÇ_of_le rpos rle1
        trivial

lemma partialFourierSum_bound {Œ¥ : ‚Ñù} (hŒ¥ : 0 < Œ¥) {g : ‚Ñù ‚Üí ‚ÑÇ} (measurable_g : Measurable g)
    (periodic_g : Function.Periodic g (2 * Real.pi)) (bound_g : ‚àÄ x, ‚Äñg x‚Äñ ‚â§ Œ¥)
    {N : ‚Ñï} {x : ‚Ñù} (hx : x ‚àà Set.Icc 0 (2 * Real.pi)) :
    ‚ÄñS_ N g x‚Äñ‚Çä
    ‚â§ (T g x + T (conj ‚àò g) x) / (ENNReal.ofReal (2 * Real.pi)) + ENNReal.ofReal (Real.pi * Œ¥) := by
  have intervalIntegrable_g : IntervalIntegrable g MeasureTheory.volume (-Real.pi) (3 * Real.pi) := intervalIntegrable_of_bdd measurable_g bound_g
  have decomposition : S_ N g x
      = (  (‚à´ (y : ‚Ñù) in (x - Real.pi)..(x + Real.pi), g y * ((max (1 - |x - y|) 0) * dirichletKernel' N (x - y)))
         + (‚à´ (y : ‚Ñù) in (x - Real.pi)..(x + Real.pi), g y * (dirichletKernel' N (x - y) - (max (1 - |x - y|) 0) * dirichletKernel' N (x - y)))) / (2 * Real.pi) := by
    calc S_ N g x
      _ = (‚à´ (y : ‚Ñù) in (0 : ‚Ñù)..(2 * Real.pi), g y * dirichletKernel' N (x - y)) / (2 * Real.pi) := by
        rw [partialFourierSum_eq_conv_dirichletKernel' (intervalIntegrable_g.mono_set _)]
        ring
        rw [Set.uIcc_of_le, Set.uIcc_of_le]
        apply Set.Icc_subset_Icc
        all_goals linarith [Real.pi_pos]
      _ = (‚à´ (y : ‚Ñù) in (x - Real.pi)..(x + Real.pi), g y * dirichletKernel' N (x - y)) / (2 * Real.pi) := by
        --Shift domain of integration using periodicity
        congr 1
        rw [‚Üê zero_add (2 * Real.pi), Function.Periodic.intervalIntegral_add_eq _ 0 (x - Real.pi)]
        congr 1
        ring
        exact (periodic_g.mul (dirichletKernel'_periodic.const_sub x))
      _ = (  (‚à´ (y : ‚Ñù) in (x - Real.pi)..(x + Real.pi), g y * ((max (1 - |x - y|) 0) * dirichletKernel' N (x - y)))
           + (‚à´ (y : ‚Ñù) in (x - Real.pi)..(x + Real.pi), g y * (dirichletKernel' N (x - y) - (max (1 - |x - y|) 0) * dirichletKernel' N (x - y)))) / (2 * Real.pi) := by
        --Split into two parts
        rw [‚Üê intervalIntegral.integral_add (intervalIntegrable_mul_dirichletKernel'_max hx intervalIntegrable_g) (intervalIntegrable_mul_dirichletKernel'_max' hx intervalIntegrable_g)]
        congr with y
        ring
  calc ENNReal.ofNNReal ‚ÄñS_ N g x‚Äñ‚Çä
    _ ‚â§ (  ‚Äñ‚à´ (y : ‚Ñù) in (x - Real.pi)..(x + Real.pi), g y * ((max (1 - |x - y|) 0) * dirichletKernel' N (x - y))‚Äñ‚Çä
         + ‚Äñ‚à´ (y : ‚Ñù) in (x - Real.pi)..(x + Real.pi), g y * (dirichletKernel' N (x - y) - (max (1 - |x - y|) 0) * dirichletKernel' N (x - y))‚Äñ‚Çä) / ENNReal.ofReal (2 * Real.pi) := by
      rw [decomposition, nnnorm_div, ENNReal.coe_div (by simp [Real.pi_pos.ne.symm])]
      norm_cast
      gcongr
      . apply nnnorm_add_le
      . rw [‚Üê ofReal_norm_eq_coe_nnnorm, Real.norm_of_nonneg Real.two_pi_pos.le]
    _ ‚â§ (T g x + T (‚áëconj ‚àò g) x + ENNReal.ofReal (Real.pi * Œ¥ * (2 * Real.pi))) / ENNReal.ofReal (2 * Real.pi) := by
      gcongr
      . apply le_CarlesonOperatorReal intervalIntegrable_g hx
      . rw [ENNReal.ofReal]
        norm_cast
        apply NNReal.le_toNNReal_of_coe_le
        rw [coe_nnnorm]

        calc ‚Äñ‚à´ (y : ‚Ñù) in x - Real.pi..x + Real.pi, g y * (dirichletKernel' N (x - y) - (max (1 - |x - y|) 0) * dirichletKernel' N (x - y))‚Äñ
          _ ‚â§ (Œ¥ * Real.pi) * |(x + Real.pi) - (x - Real.pi)| := by
            apply intervalIntegral.norm_integral_le_of_norm_le_const
            intro y hy
            rw [Set.uIoc_of_le (by linarith [Real.pi_pos])] at hy
            rw [norm_mul]
            gcongr
            ¬∑ apply bound_g
            . rw [Dirichlet_Hilbert_eq]
              apply Dirichlet_Hilbert_diff
              constructor <;> linarith [hy.1, hy.2]
          _ = Real.pi * Œ¥ * (2 * Real.pi) := by
            simp
            rw [‚Üêtwo_mul, _root_.abs_of_nonneg Real.two_pi_pos.le]
            ring
    _ = (T g x + T (conj ‚àò g) x) / ENNReal.ofReal (2 * Real.pi) + ENNReal.ofReal (Real.pi * Œ¥) := by
      rw [ENNReal.add_div]
      congr
      rw [‚Üê ENNReal.ofReal_div_of_pos Real.two_pi_pos, mul_div_assoc, div_self Real.two_pi_pos.ne.symm, mul_one]

--TODO: replace congr;ext by congr with

end section

lemma rcarleson_exceptional_set_estimate {Œ¥ : ‚Ñù} (Œ¥pos : 0 < Œ¥) {f : ‚Ñù ‚Üí ‚ÑÇ} {F : Set ‚Ñù} (measurableSetF : MeasurableSet F) (hf : ‚àÄ x, ‚Äñf x‚Äñ ‚â§ Œ¥ * F.indicator 1 x)
    {E : Set ‚Ñù} (measurableSetE : MeasurableSet E) {Œµ : ENNReal} (hE : ‚àÄ x ‚àà E, Œµ ‚â§ T f x) :
      Œµ * MeasureTheory.volume E ‚â§ ENNReal.ofReal (Œ¥ * C10_1 4 2) * MeasureTheory.volume F ^ (2 : ‚Ñù)‚Åª¬π * MeasureTheory.volume E ^ (2 : ‚Ñù)‚Åª¬π := by
  calc Œµ * MeasureTheory.volume E
    _ = ‚à´‚Åª _ in E, Œµ := by
      symm
      apply MeasureTheory.setLIntegral_const
    _ ‚â§ ‚à´‚Åª x in E, T f x := by
      apply MeasureTheory.setLIntegral_mono' measurableSetE hE
    _ = ENNReal.ofReal Œ¥ * ‚à´‚Åª x in E, T (fun x ‚Ü¶ (1 / Œ¥) * f x) x := by
      rw [‚Üê MeasureTheory.lintegral_const_mul']
      congr with x
      rw [CarlesonOperatorReal_mul Œ¥pos]
      congr
      exact ENNReal.ofReal_ne_top
    _ ‚â§ ENNReal.ofReal Œ¥ * (ENNReal.ofReal (C10_1 4 2) * (MeasureTheory.volume E) ^ (2 : ‚Ñù)‚Åª¬π * (MeasureTheory.volume F) ^ (2 : ‚Ñù)‚Åª¬π) := by
      gcongr
      apply rcarleson measurableSetF measurableSetE
      intro x
      simp
      rw [_root_.abs_of_nonneg Œ¥pos.le, inv_mul_le_iff Œ¥pos]
      exact hf x
    _ = ENNReal.ofReal (Œ¥ * C10_1 4 2) * (MeasureTheory.volume F) ^ (2 : ‚Ñù)‚Åª¬π * (MeasureTheory.volume E) ^ (2 : ‚Ñù)‚Åª¬π := by
      rw [ENNReal.ofReal_mul Œ¥pos.le]
      ring

lemma rcarleson_exceptional_set_estimate_specific {Œ¥ : ‚Ñù} (Œ¥pos : 0 < Œ¥) {f : ‚Ñù ‚Üí ‚ÑÇ} (hf : ‚àÄ x, ‚Äñf x‚Äñ ‚â§ Œ¥)
    {E : Set ‚Ñù} (measurableSetE : MeasurableSet E) (E_subset : E ‚äÜ Set.Icc 0 (2 * Real.pi)) {Œµ : ENNReal} (hE : ‚àÄ x ‚àà E, Œµ ‚â§ T f x) :
      Œµ * MeasureTheory.volume E ‚â§ ENNReal.ofReal (Œ¥ * C10_1 4 2 * (2 * Real.pi + 2) ^ (2 : ‚Ñù)‚Åª¬π) * MeasureTheory.volume E ^ (2 : ‚Ñù)‚Åª¬π := by
  rw [ENNReal.ofReal_mul (by apply mul_nonneg Œ¥pos.le (C10_1_pos one_lt_two).le), ‚Üê ENNReal.ofReal_rpow_of_pos (by linarith [Real.pi_pos])]
  set F := (Set.Ioo (0 - 1) (2 * Real.pi + 1)) with Fdef
  set h := F.indicator f with hdef
  have hh : ‚àÄ x, ‚Äñh x‚Äñ ‚â§ Œ¥ * F.indicator 1 x := by
    intro x
    rw [hdef, norm_indicator_eq_indicator_norm, Set.indicator, Set.indicator]
    split_ifs with hx
    . simp only [norm_eq_abs, Pi.one_apply, mul_one]; exact hf x
    . simp
  convert rcarleson_exceptional_set_estimate Œ¥pos measurableSet_Ioo hh measurableSetE ?_
  . rw [Real.volume_Ioo]
    ring_nf
  . intro x hx
    rw [hdef, Fdef, ‚Üê CarlesonOperatorReal_eq_of_restrict_interval (E_subset hx)]
    exact hE x hx


def C_control_approximation_effect (Œµ : ‚Ñù) := (C10_1 4 2 * (8 / (Real.pi * Œµ)) ^ (2 : ‚Ñù)‚Åª¬π) + Real.pi

lemma lt_C_control_approximation_effect {Œµ : ‚Ñù} (Œµpos : 0 < Œµ) : Real.pi < C_control_approximation_effect Œµ := by
  rw [C_control_approximation_effect]
  apply lt_add_of_pos_of_le _ (by rfl)
  apply mul_pos (C10_1_pos (by norm_num))
  apply Real.rpow_pos_of_pos
  apply div_pos (by norm_num)
  apply mul_pos Real.pi_pos Œµpos

lemma C_control_approximation_effect_pos {Œµ : ‚Ñù} (Œµpos : 0 < Œµ) : 0 < C_control_approximation_effect Œµ := lt_trans' (lt_C_control_approximation_effect Œµpos) Real.pi_pos

lemma C_control_approximation_effect_eq {Œµ : ‚Ñù} {Œ¥ : ‚Ñù} (Œµ_nonneg : 0 ‚â§ Œµ) : C_control_approximation_effect Œµ * Œ¥ = ((Œ¥ * C10_1 4 2 * (4 * Real.pi) ^ (2 : ‚Ñù)‚Åª¬π * (2 / Œµ) ^ (2 : ‚Ñù)‚Åª¬π) / Real.pi) + Real.pi * Œ¥ := by
  symm
  rw [C_control_approximation_effect, mul_comm, mul_div_right_comm, mul_comm Œ¥, mul_assoc,
    mul_comm Œ¥, ‚Üê mul_assoc, ‚Üê mul_assoc, ‚Üê add_mul, mul_comm _ (C10_1 4 2), mul_assoc]
  congr
  rw [Real.div_rpow, Real.div_rpow _ (mul_nonneg _ _), Real.mul_rpow, Real.mul_rpow]
  ring_nf
  rw [mul_assoc, mul_comm (2 ^ _), mul_assoc, mul_assoc, mul_assoc, mul_comm (4 ^ _), ‚Üê mul_assoc Real.pi‚Åª¬π,
      ‚Üê Real.rpow_neg_one Real.pi, ‚Üê Real.rpow_add, mul_comm (Real.pi ^ _), ‚Üê mul_assoc (2 ^ _), ‚Üê Real.mul_rpow]
  congr
  norm_num
  ring_nf
  rw [neg_div, Real.rpow_neg]
  all_goals linarith [Real.pi_pos]


--TODO: add doc-strings !


/-ENNReal version of a generalized Lemma 11.1.3 (control approximation effect).-/
--added subset assumption
--changed interval to match the interval in the theorem
lemma control_approximation_effect {Œµ : ‚Ñù} (Œµpos : 0 < Œµ) {Œ¥ : ‚Ñù} (hŒ¥ : 0 < Œ¥)
    {h : ‚Ñù ‚Üí ‚ÑÇ} (h_measurable : Measurable h) (h_periodic : h.Periodic (2 * Real.pi)) (h_bound : ‚àÄ x, ‚Äñh x‚Äñ ‚â§ Œ¥ ) :
    ‚àÉ E ‚äÜ Set.Icc 0 (2 * Real.pi), MeasurableSet E ‚àß MeasureTheory.volume.real E ‚â§ Œµ ‚àß ‚àÄ x ‚àà Set.Icc 0 (2 * Real.pi) \ E,
      ‚àÄ N, ‚ÄñS_ N h x‚Äñ ‚â§ C_control_approximation_effect Œµ * Œ¥ := by
  set Œµ' := C_control_approximation_effect Œµ * Œ¥ with Œµ'def
  set E := {x ‚àà Set.Icc 0 (2 * Real.pi) | ‚àÉ N, Œµ' < abs (S_ N h x)} with Edef
  have E_eq: E = Set.Icc 0 (2 * Real.pi) ‚à© ‚ãÉ N : ‚Ñï, {x | Œµ' < ‚ÄñS_ N h x‚Äñ} := by
      rw [Edef]
      ext x
      simp
  have measurableSetE : MeasurableSet E := by
    rw [E_eq]
    apply measurableSet_Icc.inter (MeasurableSet.iUnion _)
    intro N
    apply measurableSet_lt measurable_const (Measurable.norm partialFourierSum_uniformContinuous.continuous.measurable)
  have Esubset : E ‚äÜ Set.Icc 0 (2 * Real.pi) := by
    intro x hx
    rw [Edef] at hx
    simp at hx
    exact hx.1
  use E, Esubset, measurableSetE
  --Change order of proofs to start with the simple part
  rw [and_comm]
  constructor
  ¬∑ rw [Edef]
    simp only [Set.mem_Icc, Set.mem_diff, Set.mem_setOf_eq, not_and, not_exists, not_lt, and_imp]
    exact fun x x_nonneg x_le_two_pi h ‚Ü¶ h x_nonneg x_le_two_pi
  -- This is needed later but better fits in here.
  have conj_h_bound : ‚àÄ (x : ‚Ñù), ‚Äñ(star ‚àò h) x‚Äñ ‚â§ Œ¥ := by
    intro x
    simp only [RCLike.star_def, Function.comp_apply, RingHomIsometric.is_iso]
    exact h_bound x

  have le_operator_add : ‚àÄ x ‚àà E, ENNReal.ofReal ((Œµ' - Real.pi * Œ¥) * (2 * Real.pi)) ‚â§ T h x + T (conj ‚àò h) x := by
    intro x hx
    obtain ‚ü®xIcc, N, hN‚ü© := hx
    have : ENNReal.ofReal (Real.pi * Œ¥ * (2 * Real.pi)) ‚â† ‚ä§ := ENNReal.ofReal_ne_top
    rw [‚Üê (ENNReal.add_le_add_iff_right this)]
    calc ENNReal.ofReal ((Œµ' - Real.pi * Œ¥) * (2 * Real.pi)) + ENNReal.ofReal (Real.pi * Œ¥ * (2 * Real.pi))
      _ = ENNReal.ofReal (2 * Real.pi) * ENNReal.ofReal Œµ' := by
        rw [‚Üê ENNReal.ofReal_add, ‚Üê ENNReal.ofReal_mul Real.two_pi_pos.le]
        ¬∑ ring_nf
        ¬∑ apply mul_nonneg _ Real.two_pi_pos.le
          rw [Œµ'def, C_control_approximation_effect_eq Œµpos.le, add_sub_cancel_right]
          apply div_nonneg (mul_nonneg _ (Real.rpow_nonneg (div_nonneg (by norm_num) Œµpos.le) _)) Real.pi_pos.le
          rw [mul_assoc]
          apply mul_nonneg hŒ¥.le (mul_nonneg (C10_1_pos one_lt_two).le (Real.rpow_nonneg _ _))
          linarith [Real.pi_pos]
        ¬∑ apply mul_nonneg (mul_nonneg Real.pi_pos.le hŒ¥.le) Real.two_pi_pos.le
      _ ‚â§ ENNReal.ofReal (2 * Real.pi) * ‚ÄñS_ N h x‚Äñ‚Çä := by
        rw [‚Üê ofReal_norm_eq_coe_nnnorm]
        gcongr
        exact hN.le
      _ ‚â§ ENNReal.ofReal (2 * Real.pi) * ((T h x + T (conj ‚àò h) x) / (ENNReal.ofReal (2 * Real.pi)) + ENNReal.ofReal (Real.pi * Œ¥)) := by
        gcongr
        apply partialFourierSum_bound hŒ¥ h_measurable h_periodic h_bound xIcc
      _ = (T h x + T (conj ‚àò h) x) + ENNReal.ofReal (Real.pi * Œ¥ * (2 * Real.pi)) := by
        rw [mul_add]
        congr
        . rw [ENNReal.mul_div_cancel' (by simp [Real.pi_pos]) ENNReal.ofReal_ne_top]
        . rw [‚Üê ENNReal.ofReal_mul Real.two_pi_pos.le]
          ring_nf
  --TODO: align this with paper version
  have Evolume : MeasureTheory.volume E < ‚ä§ := by
    calc MeasureTheory.volume E
      _ ‚â§ MeasureTheory.volume (Set.Icc 0 (2 * Real.pi)) := by
        apply MeasureTheory.measure_mono
        rw [E_eq]
        apply Set.inter_subset_left
      _ = ENNReal.ofReal (2 * Real.pi) := by
        rw [Real.volume_Icc, sub_zero]
      _ < ‚ä§ := ENNReal.ofReal_lt_top
  obtain ‚ü®E', E'subset, measurableSetE', E'measure, h‚ü© := ENNReal.le_on_subset MeasureTheory.volume measurableSetE (CarlesonOperatorReal_measurable h_measurable h_bound) (CarlesonOperatorReal_measurable (continuous_star.measurable.comp h_measurable) conj_h_bound) le_operator_add
  have E'volume : MeasureTheory.volume E' < ‚ä§ := lt_of_le_of_lt (MeasureTheory.measure_mono E'subset) Evolume
  have E'volume_bound: ENNReal.ofReal (Real.pi * (Œµ' - Real.pi * Œ¥)) * MeasureTheory.volume E' ‚â§ ENNReal.ofReal (Œ¥ * C10_1 4 2 * (4 * Real.pi) ^ (2 : ‚Ñù)‚Åª¬π) * (MeasureTheory.volume E') ^ (2 : ‚Ñù)‚Åª¬π := by
    calc ENNReal.ofReal (Real.pi * (Œµ' - Real.pi * Œ¥)) * MeasureTheory.volume E'
    _ = ENNReal.ofReal ((Œµ' - Real.pi * Œ¥) * (2 * Real.pi)) / 2 * MeasureTheory.volume E' := by
      rw [‚Üê ENNReal.ofReal_ofNat, ‚Üê ENNReal.ofReal_div_of_pos (by norm_num)]
      ring_nf
    _ ‚â§ ENNReal.ofReal (Œ¥ * C10_1 4 2 * (2 * Real.pi + 2) ^ (2 : ‚Ñù)‚Åª¬π) * (MeasureTheory.volume E') ^ (2 : ‚Ñù)‚Åª¬π := by
      rcases h with hE' | hE'
      ¬∑ exact rcarleson_exceptional_set_estimate_specific hŒ¥ h_bound measurableSetE' (E'subset.trans Esubset) hE'
      . exact rcarleson_exceptional_set_estimate_specific hŒ¥ conj_h_bound measurableSetE' (E'subset.trans Esubset) hE'
    _ ‚â§ ENNReal.ofReal (Œ¥ * C10_1 4 2 * (4 * Real.pi) ^ (2 : ‚Ñù)‚Åª¬π) * (MeasureTheory.volume E') ^ (2 : ‚Ñù)‚Åª¬π := by
      gcongr
      . exact mul_nonneg hŒ¥.le (C10_1_pos one_lt_two).le
      . linarith [Real.two_le_pi]
  have Œ¥_mul_const_pos : 0 < Œ¥ * C10_1 4 2 * (4 * Real.pi) ^ (2 : ‚Ñù)‚Åª¬π := mul_pos (mul_pos hŒ¥ (C10_1_pos one_lt_two)) (Real.rpow_pos_of_pos (by linarith [Real.two_pi_pos]) _)
  have Œµ'_Œ¥_expression_pos : 0 < Real.pi * (Œµ' - Real.pi * Œ¥) := by
    rw [Œµ'def, C_control_approximation_effect_eq Œµpos.le, add_sub_cancel_right, mul_div_cancel‚ÇÄ _ Real.pi_pos.ne.symm]
    exact mul_pos Œ¥_mul_const_pos (Real.rpow_pos_of_pos (div_pos (by norm_num) Œµpos) _)
  calc MeasureTheory.volume.real E
    _ ‚â§ 2 * MeasureTheory.volume.real E' := by
      --uses E'measure
      rwa [MeasureTheory.measureReal_def, MeasureTheory.measureReal_def, ‚Üê@ENNReal.toReal_ofReal 2 (by norm_num),
        ‚ÜêENNReal.toReal_mul, ENNReal.toReal_le_toReal Evolume.ne, ENNReal.ofReal_ofNat]
      apply ENNReal.mul_ne_top ENNReal.ofReal_ne_top E'volume.ne
    _ = 2 * MeasureTheory.volume.real E' ^ ((1 + -(2 : ‚Ñù)‚Åª¬π) * 2) := by
      conv => lhs; rw [‚ÜêReal.rpow_one (MeasureTheory.volume.real E')]
      norm_num
    _ ‚â§ 2 * (Œ¥ * C10_1 4 2 * (4 * Real.pi) ^ (2 : ‚Ñù)‚Åª¬π / (Real.pi * (Œµ' - Real.pi * Œ¥))) ^ (2 : ‚Ñù) := by
      rw [Real.rpow_mul MeasureTheory.measureReal_nonneg]
      gcongr
      rw [Real.rpow_add' MeasureTheory.measureReal_nonneg (by norm_num), Real.rpow_one, le_div_iff' Œµ'_Œ¥_expression_pos, ‚Üê mul_assoc]
      apply mul_le_of_nonneg_of_le_div Œ¥_mul_const_pos.le
      apply Real.rpow_nonneg MeasureTheory.measureReal_nonneg
      rw[Real.rpow_neg MeasureTheory.measureReal_nonneg, div_inv_eq_mul]
      rw [‚Üê ENNReal.ofReal_le_ofReal_iff, ENNReal.ofReal_mul Œµ'_Œ¥_expression_pos.le, MeasureTheory.measureReal_def, ENNReal.ofReal_toReal E'volume.ne]
      apply le_trans E'volume_bound
      rw [ENNReal.ofReal_mul Œ¥_mul_const_pos.le, ‚Üê ENNReal.ofReal_rpow_of_nonneg ENNReal.toReal_nonneg (by norm_num), ENNReal.ofReal_toReal E'volume.ne]
      --small goal remaining
      apply mul_nonneg Œ¥_mul_const_pos.le
      apply Real.rpow_nonneg MeasureTheory.measureReal_nonneg
    _ = Œµ := by
      --We have chosen Œµ' such that this works.
      rw [Œµ'def, C_control_approximation_effect_eq Œµpos.le, add_sub_cancel_right, mul_div_cancel‚ÇÄ _ Real.pi_pos.ne.symm,
          div_mul_eq_div_div, div_self Œ¥_mul_const_pos.ne.symm, one_div, Real.inv_rpow (Real.rpow_nonneg (div_nonneg zero_le_two Œµpos.le) _),
          ‚Üê Real.rpow_mul (div_nonneg zero_le_two Œµpos.le), inv_mul_cancel (by norm_num), Real.rpow_one, inv_div]
      ring
