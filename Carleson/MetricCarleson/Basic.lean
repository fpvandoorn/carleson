import Carleson.Defs
import Mathlib.Topology.ContinuousMap.SecondCountableSpace

open scoped NNReal
open MeasureTheory Set ENNReal Filter Topology ShortVariables Metric Complex

noncomputable section

variable {X : Type*} {a : ‚Ñï} [MetricSpace X] {K : X ‚Üí X ‚Üí ‚ÑÇ}

namespace MetricŒò

variable [CompatibleFunctions ‚Ñù X (defaultA a)]

/-- We choose as metric space instance on `Œò` one given by an arbitrary ball.
The metric given by all other balls are equivalent. -/
scoped instance : PseudoMetricSpace (Œò X) :=
  inferInstanceAs <| PseudoMetricSpace <| WithFunctionDistance o 1

lemma dist_eq_cdist {f g : Œò X} : dist f g = dist_{o, 1} f g := rfl

/-!
The following two lemmas state that the distance could be equivalently given by any other cdist.
-/

lemma dist_le_cdist {f g : Œò X} {x : X} {r : ‚Ñù} (hr : 0 < r) :
    dist f g ‚â§ As (defaultA a) ((1 + dist o x) / r) * dist_{x, r} f g :=
  cdist_le_mul_cdist hr (by norm_num) f g

lemma cdist_le_dist {f g : Œò X} {x : X} {r : ‚Ñù} (hr : 0 < r) :
    dist_{x, r} f g ‚â§ As (defaultA a) (r + dist o x) * dist f g := by
  rw [‚Üê div_one (_ + _), dist_comm o]
  exact cdist_le_mul_cdist (by norm_num) hr f g

instance : SecondCountableTopology (Œò X) :=
  CompatibleFunctions.allBallsCoverBalls.secondCountableTopology one_lt_two

end MetricŒò

open MetricŒò

variable [KernelProofData a K] {Œ∏ : Œò X} {Q : SimpleFunc X (Œò X)} {R‚ÇÅ R‚ÇÇ : ‚Ñù} {f : X ‚Üí ‚ÑÇ} {x : X}
-- [IsCancellative X (defaultœÑ a)]

lemma measurable_carlesonOperatorIntegrand (mf : Measurable f) :
    Measurable (fun x ‚Ü¶ carlesonOperatorIntegrand K (Q x) R‚ÇÅ R‚ÇÇ f x) := by
  unfold carlesonOperatorIntegrand
  rw [‚Üê stronglyMeasurable_iff_measurable]
  conv => enter [1, x]; rw [‚Üê integral_indicator Annulus.measurableSet_oo]
  apply StronglyMeasurable.integral_prod_right
  rw [stronglyMeasurable_iff_measurable]
  refine Measurable.indicator ?_ (measurable_dist.comp measurable_id measurableSet_Ioo)
  apply (measurable_K.mul (mf.comp measurable_snd)).mul
  exact ((Complex.measurable_ofReal.comp measurable_Q‚ÇÇ).const_mul I).cexp

open Annulus in
/-- Let `f` be integrable over an annulus with fixed radii `R‚ÇÅ, R‚ÇÇ`.
Then `fun R ‚Ü¶ ‚à´ y in oo x R R‚ÇÇ, f y` is right-continuous at `R‚ÇÅ`. -/
lemma rightContinuous_integral_annulus (iof : IntegrableOn f (oo x R‚ÇÅ R‚ÇÇ)) :
    ContinuousWithinAt (fun R ‚Ü¶ ‚à´ y in oo x R R‚ÇÇ, f y) (Ici R‚ÇÅ) R‚ÇÅ := by
  -- If `R‚ÇÅ ‚â• R‚ÇÇ` the proof is easy
  rcases le_or_gt R‚ÇÇ R‚ÇÅ with hR‚ÇÇ | hR‚ÇÇ
  ¬∑ simp_rw [continuousWithinAt_iff, mem_Ici]; intro Œµ Œµpos
    use 1, zero_lt_one; intro R' hR' _
    rw [oo_eq_empty (hR‚ÇÇ.trans hR'), oo_eq_empty hR‚ÇÇ, setIntegral_empty, dist_self]
    exact Œµpos
  -- Reduce to showing that the volumes of annuli `oc x R‚ÇÅ R` can be arbitrarily small
  suffices Tendsto (volume.restrict (oo x R‚ÇÅ R‚ÇÇ) ‚àò (oc x R‚ÇÅ ¬∑)) (ùìù[‚â•] R‚ÇÅ) (nhds 0) by
    simp_rw [continuousWithinAt_iff, mem_Ici]; intro Œµ Œµpos
    have key := iof.tendsto_setIntegral_nhds_zero this
    simp_rw [‚Üê integral_indicator measurableSet_oc, ‚Üê integral_indicator measurableSet_oo,
      indicator_indicator, tendsto_nhdsWithin_nhds, mem_Ici] at key
    specialize key _ Œµpos; obtain ‚ü®Œ¥, Œ¥pos, nb‚ü© := key
    use min Œ¥ (R‚ÇÇ - R‚ÇÅ), lt_min_iff.mpr ‚ü®Œ¥pos, sub_pos.mpr hR‚ÇÇ‚ü©; intro y ly dy
    rw [lt_min_iff] at dy; specialize nb ly dy.1
    rw [Real.dist_eq, abs_of_nonneg (sub_nonneg.mpr ly), sub_lt_sub_iff_right] at dy
    rw [dist_eq_norm, sub_zero, inter_eq_self_of_subset_right (oc_subset_oo le_rfl dy.2),
      integral_indicator measurableSet_oc] at nb
    rw [dist_eq_norm']; convert nb
    rw [sub_eq_iff_eq_add, ‚Üê setIntegral_union _ measurableSet_oo]; rotate_left
    ¬∑ exact iof.mono_set (oc_subset_oo le_rfl dy.2)
    ¬∑ exact iof.mono_set (oo_subset_oo ly le_rfl)
    ¬∑ simp_rw [disjoint_left, oc, oo, mem_setOf, mem_Ioc, mem_Ioo, not_and_or, not_lt]
      exact fun z mz ‚Ü¶ .inl mz.2
    rw [oc_union_oo ly dy.2]
  -- Obtain a strictly antitone sequence of numbers less than `R‚ÇÇ` and converging to `R‚ÇÅ`.
  -- By monotone convergence we reduce to showing that the volumes of annuli `oc x R‚ÇÅ R`
  -- along this sequence can be arbitrarily small
  obtain ‚ü®u, sau, mu, ttu‚ü© := exists_seq_strictAnti_tendsto' hR‚ÇÇ
  suffices Tendsto (fun n ‚Ü¶ volume (oc x R‚ÇÅ (u n))) atTop (nhds 0) by
    rw [ENNReal.tendsto_nhds_zero]; intro Œµ Œµpos
    rw [eventually_nhdsWithin_iff, Metric.eventually_nhds_iff]
    rw [ENNReal.tendsto_atTop_zero] at this
    specialize this _ Œµpos; obtain ‚ü®n, hn‚ü© := this; specialize hn _ le_rfl
    use u n - R‚ÇÅ, sub_pos.mpr (mu n).1; intro y dy ly
    rw [Real.dist_eq, abs_of_nonneg (sub_nonneg.mpr ly), sub_lt_sub_iff_right] at dy
    rw [Function.comp_apply, Measure.restrict_apply measurableSet_oc,
      inter_eq_self_of_subset_left (oc_subset_oo le_rfl (dy.trans (mu n).2))]
    exact (measure_mono (oc_subset_oc le_rfl dy.le)).trans hn
  -- Split the annulus along the `u n`...
  let s (n : ‚Ñï) := oc x (u (n + 1)) (u n)
  have us (k : ‚Ñï) : ‚ãÉ n, s (k + n) = oc x R‚ÇÅ (u k) := by
    ext y; simp_rw [mem_iUnion, s, oc, mem_setOf, mem_Ioc]; constructor <;> intro h
    ¬∑ obtain ‚ü®n, hn‚ÇÅ, hn‚ÇÇ‚ü© := h
      exact ‚ü®(mu (k + n + 1)).1.trans hn‚ÇÅ, hn‚ÇÇ.trans (sau.antitone (Nat.le_add_right ..))‚ü©
    ¬∑ let T : Set ‚Ñï := {n | u (k + n) < dist x y}
      have neT : T.Nonempty := by
        rw [Metric.tendsto_atTop] at ttu
        specialize ttu (dist x y - R‚ÇÅ) (by linarith only [h.1]); obtain ‚ü®N, hN‚ü© := ttu
        specialize hN (k + N) (Nat.le_add_left ..)
        rw [dist_eq_norm, Real.norm_of_nonneg (by linarith only [(mu (k + N)).1]),
          sub_lt_sub_iff_right] at hN; use N, hN
      have wfT : T.IsWF := IsWF.of_wellFoundedLT T
      use wfT.min neT - 1
      have minT_mem := wfT.min_mem neT; simp_rw [T, mem_setOf] at minT_mem
      have minT_pos : wfT.min neT ‚â† 0 := by
        by_contra! h'; rw [h'] at minT_mem; exact absurd h.2 (not_le.mpr minT_mem)
      nth_rw 1 [‚Üê Nat.add_sub_assoc (by omega), Nat.sub_add_cancel (by omega), ‚Üê not_lt]
      refine ‚ü®minT_mem, ?_‚ü©; change wfT.min neT - 1 ‚àâ T; contrapose! minT_pos
      replace minT_pos := wfT.min_le neT minT_pos; omega
  have ds (k : ‚Ñï) : Pairwise (Function.onFun Disjoint fun n ‚Ü¶ s (k + n)) := fun i j hn ‚Ü¶ by
    change Disjoint (s (k + i)) (s (k + j))
    wlog hl : i < j generalizing i j; ¬∑ exact (this j i hn.symm (by omega)).symm
    simp_rw [s, disjoint_left, oc, mem_setOf, mem_Ioc]; intro y my
    rw [not_and_or, not_le]; right
    exact (sau.antitone (show k + i + 1 ‚â§ k + j by omega)).trans_lt my.1
  -- ...and appeal to `ENNReal.tendsto_sum_nat_add`
  conv =>
    enter [1, n]; rw [‚Üê us, measure_iUnion (ds n) (fun _ ‚Ü¶ measurableSet_oc)]
    enter [1, k]; rw [add_comm]
  specialize us 0; specialize ds 0; simp_rw [zero_add] at us ds
  apply tendsto_sum_nat_add fun n ‚Ü¶ volume (s n)
  rw [‚Üê measure_iUnion ds (fun _ ‚Ü¶ measurableSet_oc), us, ‚Üê lt_top_iff_ne_top]
  calc
    _ ‚â§ volume (closedBall x (u 0)) := by
      refine measure_mono fun y my ‚Ü¶ ?_
      rw [oc, mem_setOf, mem_Ioc] at my; rw [mem_closedBall']; exact my.2
    _ < _ := measure_closedBall_lt_top

#exit

lemma rightContinuous_carlesonOperatorIntegrand
    (mf : Measurable f) (nf : (‚Äñf ¬∑‚Äñ) ‚â§ 1) (mŒ∏ : Measurable Œ∏) (hR‚ÇÅ : 0 < R‚ÇÅ) :
    ContinuousWithinAt (carlesonOperatorIntegrand K Œ∏ ¬∑ R‚ÇÇ f x) (Ici R‚ÇÅ) R‚ÇÅ := by
  simp_rw [carlesonOperatorIntegrand, continuousWithinAt_iff, mem_Ici]; intro Œµ Œµpos
  rcases le_or_gt R‚ÇÇ R‚ÇÅ with hR‚ÇÇ | hR‚ÇÇ
  ¬∑ use 1, zero_lt_one; intro R' hR' _
    rw [Annulus.oo_eq_empty (hR‚ÇÇ.trans hR'), Annulus.oo_eq_empty hR‚ÇÇ, setIntegral_empty, dist_self]
    exact Œµpos
  obtain ‚ü®u, sau, mu, ttu‚ü© := exists_seq_strictAnti_tendsto' hR‚ÇÇ
  -- R‚ÇÅ < ... < u (n + 1) < u n < ... < u 1 < u 0 < R‚ÇÇ
  let s (n : ‚Ñï) := Annulus.oc x (u (n + 1)) (u n)
  have union_s : ‚ãÉ i, s i = Annulus.oc x R‚ÇÅ (u 0) := by
    ext y; simp_rw [mem_iUnion, s, Annulus.oc, mem_setOf, mem_Ioc]; constructor <;> intro h
    ¬∑ obtain ‚ü®n, hn‚ÇÅ, hn‚ÇÇ‚ü© := h
      exact ‚ü®(mu (n + 1)).1.trans hn‚ÇÅ, hn‚ÇÇ.trans (sau.antitone (zero_le n))‚ü©
    ¬∑ let T : Set ‚Ñï := {n | u n < dist x y}
      have neT : T.Nonempty := by
        rw [Metric.tendsto_atTop] at ttu
        specialize ttu (dist x y - R‚ÇÅ) (by linarith only [h.1]); obtain ‚ü®N, hN‚ü© := ttu
        specialize hN N le_rfl
        rw [dist_eq_norm, Real.norm_of_nonneg (by linarith only [(mu N).1]),
          sub_lt_sub_iff_right] at hN; use N, hN
      have wfT : T.IsWF := IsWF.of_wellFoundedLT T
      use wfT.min neT - 1
      have minT_mem := wfT.min_mem neT; simp_rw [T, mem_setOf] at minT_mem
      have minT_pos : wfT.min neT ‚â† 0 := by
        by_contra! h'; rw [h'] at minT_mem; exact absurd h.2 (not_le.mpr minT_mem)
      rw [Nat.sub_one_add_one minT_pos, ‚Üê not_lt]; refine ‚ü®minT_mem, ?_‚ü©
      change wfT.min neT - 1 ‚àâ T; contrapose! minT_pos
      replace minT_pos := wfT.min_le neT minT_pos; omega
  have disjoint_s : Pairwise (Function.onFun Disjoint s) := fun i j hn ‚Ü¶ by
    change Disjoint (s i) (s j)
    wlog hl : i < j generalizing i j; ¬∑ exact (this j i hn.symm (by omega)).symm
    simp_rw [s, disjoint_left, Annulus.oc, mem_setOf, mem_Ioc]; intro y my
    rw [not_and_or, not_le]; right
    exact (sau.antitone (show i + 1 ‚â§ j by omega)).trans_lt my.1
  let f' (y : X) := K x y * f y * cexp (I * Œ∏ y)
  have integrableOn_f' : IntegrableOn f' (‚ãÉ i, s i) := by
    simp_rw [union_s, f', mul_assoc]
    refine integrableOn_K_mul ?_ _ hR‚ÇÅ fun y my ‚Ü¶ ?_
    ¬∑ refine Integrable.bdd_mul ?_ mf.aestronglyMeasurable.restrict ‚ü®_, nf‚ü©
      apply Measure.integrableOn_of_bounded (M := 1)
      ¬∑ rw [‚Üê lt_top_iff_ne_top]
        calc
          _ ‚â§ volume (ball x R‚ÇÇ) := by
            refine measure_mono fun y my ‚Ü¶ ?_
            rw [Annulus.oc, mem_setOf, mem_Ioc] at my; rw [mem_ball']; exact my.2.trans_lt (mu 0).2
          _ < _ := measure_ball_lt_top
      ¬∑ exact ((Complex.measurable_ofReal.comp mŒ∏).const_mul I).cexp.aestronglyMeasurable
      ¬∑ refine Eventually.of_forall fun y ‚Ü¶ ?_
        rw [mul_comm, norm_exp_ofReal_mul_I]
    ¬∑ rw [Annulus.oc, mem_setOf, mem_Ioc] at my
      rw [mem_compl_iff, mem_ball', not_lt]; exact my.1.le
  have hsiu := hasSum_integral_iUnion (fun _ ‚Ü¶ Annulus.measurableSet_oc) disjoint_s integrableOn_f'
  have pstt := hsiu.summable.tendsto_sum_tsum_nat
  rw [hsiu.tsum_eq, union_s, Metric.tendsto_atTop] at pstt
  sorry

lemma leftContinuous_carlesonOperatorIntegrand (mf : Measurable f) (hR‚ÇÅ : 0 < R‚ÇÅ) :
    ContinuousWithinAt (carlesonOperatorIntegrand K Œ∏ R‚ÇÅ ¬∑ f x) (Iic R‚ÇÇ) R‚ÇÇ := by
  simp_rw [carlesonOperatorIntegrand, continuousWithinAt_iff, mem_Iic, Real.dist_eq]; intro Œµ Œµpos
  rcases le_or_gt R‚ÇÇ R‚ÇÅ with hR‚ÇÇ | hR‚ÇÇ
  ¬∑ use 1, zero_lt_one; intro R' hR'‚ÇÅ hR'‚ÇÇ
    rw [Annulus.oo_eq_empty (hR'‚ÇÅ.trans hR‚ÇÇ), Annulus.oo_eq_empty hR‚ÇÇ, setIntegral_empty, dist_self]
    exact Œµpos
  sorry

lemma continuous_carlesonOperatorIntegrand (nf : (‚Äñf ¬∑‚Äñ) ‚â§ 1) :
    Continuous (carlesonOperatorIntegrand K ¬∑ R‚ÇÅ R‚ÇÇ f x) := by
  sorry

/-- The constant used in the proof of `int-continuous`. -/
irreducible_def C3_0_1 (a : ‚Ñï) (R‚ÇÅ R‚ÇÇ : ‚Ñù‚â•0) : ‚Ñù‚â•0 :=
  2 ^ (a ^ 3) * (2 * R‚ÇÇ / R‚ÇÅ) ^ a

-- not sure if this is the best phrasing
lemma isBounded_carlesonOperatorIntegrand {R‚ÇÅ R‚ÇÇ : ‚Ñù‚â•0} (nf : (‚Äñf ¬∑‚Äñ) ‚â§ 1) :
    ‚ÄñcarlesonOperatorIntegrand K (Q x) R‚ÇÅ R‚ÇÇ f x‚Äñ‚Çë ‚â§ C3_0_1 a R‚ÇÅ R‚ÇÇ := by
  sorry
