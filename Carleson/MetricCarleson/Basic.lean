import Carleson.DoublingMeasure

open scoped NNReal
open MeasureTheory Set ENNReal Filter Topology ShortVariables Metric Complex

noncomputable section

variable {X : Type*} {a : ‚Ñï} [MetricSpace X] {K : X ‚Üí X ‚Üí ‚ÑÇ}

namespace MetricŒò

variable [CompatibleFunctions ‚Ñù X (defaultA a)]

/-- We choose as metric space instance on `Œò` one given by an arbitrary ball.
The metric given by all other balls are equivalent. -/
instance : PseudoMetricSpace (Œò X) :=
  inferInstanceAs <| PseudoMetricSpace <| WithFunctionDistance o 1

lemma dist_eq_cdist {f g : Œò X} : dist f g = dist_{o, 1} f g := rfl

/-!
The following two lemmas state that the distance could be equivalently given by any other cdist.
-/

lemma dist_le_cdist {f g : Œò X} {x : X} {r : ‚Ñù} (hr : 0 < r) :
    dist f g ‚â§ As (defaultA a) ((1 + dist o x) / r) * dist_{x, r} f g :=
  cdist_le_mul_cdist hr (by norm_num) f g

lemma cdist_le_dist {f g : Œò X} {x : X} {r : ‚Ñù} (hr : 0 < r) :
    dist_{x, r} f g ‚â§ As (defaultA a) (r + dist o x) * dist f g := by
  rw [‚Üê div_one (_ + _), dist_comm o]
  exact cdist_le_mul_cdist (by norm_num) hr f g

instance : SecondCountableTopology (Œò X) :=
  CompatibleFunctions.allBallsCoverBalls.secondCountableTopology one_lt_two

end MetricŒò

open MetricŒò

variable [KernelProofData a K] {Œ∏ œë : Œò X} {Q : SimpleFunc X (Œò X)} {R‚ÇÅ R‚ÇÇ : ‚Ñù} {f : X ‚Üí ‚ÑÇ} {x : X}

lemma measurable_carlesonOperatorIntegrand (mf : Measurable f) :
    Measurable (fun x ‚Ü¶ carlesonOperatorIntegrand K (Q x) R‚ÇÅ R‚ÇÇ f x) := by
  unfold carlesonOperatorIntegrand
  rw [‚Üê stronglyMeasurable_iff_measurable]
  conv => enter [1, x]; rw [‚Üê integral_indicator Annulus.measurableSet_oo]
  apply StronglyMeasurable.integral_prod_right
  rw [stronglyMeasurable_iff_measurable]
  refine Measurable.indicator ?_ (measurable_dist.comp measurable_id measurableSet_Ioo)
  apply (measurable_K.mul (mf.comp measurable_snd)).mul
  exact ((Complex.measurable_ofReal.comp measurable_Q‚ÇÇ).const_mul I).cexp

open Annulus in
/-- Let `f` be integrable over an annulus with fixed radii `R‚ÇÅ, R‚ÇÇ`.
Then `fun R ‚Ü¶ ‚à´ y in oo x R R‚ÇÇ, f y` is right-continuous at `R‚ÇÅ`. -/
lemma rightContinuous_integral_annulus (iof : IntegrableOn f (oo x R‚ÇÅ R‚ÇÇ)) :
    ContinuousWithinAt (fun R ‚Ü¶ ‚à´ y in oo x R R‚ÇÇ, f y) (Ici R‚ÇÅ) R‚ÇÅ := by
  -- If `R‚ÇÅ ‚â• R‚ÇÇ` the proof is easy
  rcases le_or_gt R‚ÇÇ R‚ÇÅ with hR‚ÇÇ | hR‚ÇÇ
  ¬∑ simp_rw [continuousWithinAt_iff, mem_Ici]; intro Œµ Œµpos
    use 1, zero_lt_one; intro R' hR' _
    rw [oo_eq_empty (hR‚ÇÇ.trans hR'), oo_eq_empty hR‚ÇÇ, setIntegral_empty, dist_self]
    exact Œµpos
  -- Reduce to showing that the volumes of annuli `oc x R‚ÇÅ R` can be arbitrarily small
  suffices Tendsto (volume.restrict (oo x R‚ÇÅ R‚ÇÇ) ‚àò (oc x R‚ÇÅ ¬∑)) (ùìù[‚â•] R‚ÇÅ) (nhds 0) by
    simp_rw [continuousWithinAt_iff, mem_Ici]; intro Œµ Œµpos
    have key := iof.tendsto_setIntegral_nhds_zero this
    simp_rw [‚Üê integral_indicator measurableSet_oc, ‚Üê integral_indicator measurableSet_oo,
      indicator_indicator, tendsto_nhdsWithin_nhds, mem_Ici] at key
    specialize key _ Œµpos; obtain ‚ü®Œ¥, Œ¥pos, nb‚ü© := key
    use min Œ¥ (R‚ÇÇ - R‚ÇÅ), lt_min_iff.mpr ‚ü®Œ¥pos, sub_pos.mpr hR‚ÇÇ‚ü©; intro y ly dy
    rw [lt_min_iff] at dy; specialize nb ly dy.1
    rw [dist_eq_norm, Real.norm_of_nonneg (sub_nonneg.mpr ly), sub_lt_sub_iff_right] at dy
    rw [dist_eq_norm, sub_zero, inter_eq_self_of_subset_right (oc_subset_oo le_rfl dy.2),
      integral_indicator measurableSet_oc] at nb
    rw [dist_eq_norm']; convert nb
    rw [sub_eq_iff_eq_add, ‚Üê setIntegral_union _ measurableSet_oo]; rotate_left
    ¬∑ exact iof.mono_set (oc_subset_oo le_rfl dy.2)
    ¬∑ exact iof.mono_set (oo_subset_oo ly le_rfl)
    ¬∑ simp_rw [disjoint_left, oc, oo, mem_setOf, mem_Ioc, mem_Ioo, not_and_or, not_lt]
      exact fun z mz ‚Ü¶ .inl mz.2
    rw [oc_union_oo ly dy.2]
  -- Obtain a strictly antitone sequence of numbers less than `R‚ÇÇ` and converging to `R‚ÇÅ`.
  -- By monotone convergence we reduce to showing that the volumes of annuli `oc x R‚ÇÅ R`
  -- along this sequence can be arbitrarily small
  obtain ‚ü®u, sau, mu, ttu‚ü© := exists_seq_strictAnti_tendsto' hR‚ÇÇ
  suffices Tendsto (fun n ‚Ü¶ volume (oc x R‚ÇÅ (u n))) atTop (nhds 0) by
    rw [ENNReal.tendsto_nhds_zero]; intro Œµ Œµpos
    rw [eventually_nhdsWithin_iff, Metric.eventually_nhds_iff]
    rw [ENNReal.tendsto_atTop_zero] at this
    specialize this _ Œµpos; obtain ‚ü®n, hn‚ü© := this; specialize hn _ le_rfl
    use u n - R‚ÇÅ, sub_pos.mpr (mu n).1; intro y dy ly
    rw [dist_eq_norm, Real.norm_of_nonneg (sub_nonneg.mpr ly), sub_lt_sub_iff_right] at dy
    rw [Function.comp_apply, Measure.restrict_apply measurableSet_oc,
      inter_eq_self_of_subset_left (oc_subset_oo le_rfl (dy.trans (mu n).2))]
    exact (measure_mono (oc_subset_oc le_rfl dy.le)).trans hn
  -- Split the annulus along the `u n`...
  let s (n : ‚Ñï) := oc x (u (n + 1)) (u n)
  have us (k : ‚Ñï) : ‚ãÉ n, s (k + n) = oc x R‚ÇÅ (u k) := by
    ext y; simp_rw [mem_iUnion, s, oc, mem_setOf, mem_Ioc]; constructor <;> intro h
    ¬∑ obtain ‚ü®n, hn‚ÇÅ, hn‚ÇÇ‚ü© := h
      exact ‚ü®(mu (k + n + 1)).1.trans hn‚ÇÅ, hn‚ÇÇ.trans (sau.antitone (Nat.le_add_right ..))‚ü©
    ¬∑ let T : Set ‚Ñï := {n | u (k + n) < dist x y}
      have neT : T.Nonempty := by
        rw [Metric.tendsto_atTop] at ttu
        specialize ttu (dist x y - R‚ÇÅ) (by linarith only [h.1]); obtain ‚ü®N, hN‚ü© := ttu
        specialize hN (k + N) (Nat.le_add_left ..)
        rw [dist_eq_norm, Real.norm_of_nonneg (by linarith only [(mu (k + N)).1]),
          sub_lt_sub_iff_right] at hN; use N, hN
      have wfT : T.IsWF := IsWF.of_wellFoundedLT T
      use wfT.min neT - 1
      have minT_mem := wfT.min_mem neT; simp_rw [T, mem_setOf] at minT_mem
      have minT_pos : wfT.min neT ‚â† 0 := by
        by_contra! h'; rw [h'] at minT_mem; exact absurd h.2 (not_le.mpr minT_mem)
      nth_rw 1 [‚Üê Nat.add_sub_assoc (by omega), Nat.sub_add_cancel (by omega), ‚Üê not_lt]
      refine ‚ü®minT_mem, ?_‚ü©; change wfT.min neT - 1 ‚àâ T; contrapose! minT_pos
      replace minT_pos := wfT.min_le neT minT_pos; omega
  have ds (k : ‚Ñï) : Pairwise (Function.onFun Disjoint fun n ‚Ü¶ s (k + n)) := fun i j hn ‚Ü¶ by
    change Disjoint (s (k + i)) (s (k + j))
    wlog hl : i < j generalizing i j; ¬∑ exact (this j i hn.symm (by omega)).symm
    simp_rw [s, disjoint_left, oc, mem_setOf, mem_Ioc]; intro y my
    rw [not_and_or, not_le]; right
    exact (sau.antitone (show k + i + 1 ‚â§ k + j by omega)).trans_lt my.1
  -- ...and appeal to `ENNReal.tendsto_sum_nat_add`
  conv =>
    enter [1, n]; rw [‚Üê us, measure_iUnion (ds n) (fun _ ‚Ü¶ measurableSet_oc)]
    enter [1, k]; rw [add_comm]
  specialize us 0; specialize ds 0; simp_rw [zero_add] at us ds
  apply tendsto_sum_nat_add fun n ‚Ü¶ volume (s n)
  rw [‚Üê measure_iUnion ds (fun _ ‚Ü¶ measurableSet_oc), us, ‚Üê lt_top_iff_ne_top]
  calc
    _ ‚â§ volume (closedBall x (u 0)) := by
      refine measure_mono fun y my ‚Ü¶ ?_; rw [oc_eq] at my; exact my.1
    _ < _ := measure_closedBall_lt_top

open Annulus in
/-- Let `f` be integrable over an annulus with fixed radii `R‚ÇÅ, R‚ÇÇ`.
Then `fun R ‚Ü¶ ‚à´ y in oo x R‚ÇÅ R, f y` is left-continuous at `R‚ÇÇ`. -/
lemma leftContinuous_integral_annulus (iof : IntegrableOn f (oo x R‚ÇÅ R‚ÇÇ)) :
    ContinuousWithinAt (fun R ‚Ü¶ ‚à´ y in oo x R‚ÇÅ R, f y) (Iic R‚ÇÇ) R‚ÇÇ := by
  -- If `R‚ÇÅ ‚â• R‚ÇÇ` the proof is easy
  rcases le_or_gt R‚ÇÇ R‚ÇÅ with hR‚ÇÇ | hR‚ÇÇ
  ¬∑ simp_rw [continuousWithinAt_iff, mem_Iic]; intro Œµ Œµpos
    use 1, zero_lt_one; intro R' hR' _
    rw [oo_eq_empty (hR'.trans hR‚ÇÇ), oo_eq_empty hR‚ÇÇ, setIntegral_empty, dist_self]
    exact Œµpos
  -- Reduce to showing that the volumes of annuli `co x R R‚ÇÇ` can be arbitrarily small
  suffices Tendsto (volume.restrict (oo x R‚ÇÅ R‚ÇÇ) ‚àò (co x ¬∑ R‚ÇÇ)) (ùìù[‚â§] R‚ÇÇ) (nhds 0) by
    simp_rw [continuousWithinAt_iff, mem_Iic]; intro Œµ Œµpos
    have key := iof.tendsto_setIntegral_nhds_zero this
    simp_rw [‚Üê integral_indicator measurableSet_co, ‚Üê integral_indicator measurableSet_oo,
      indicator_indicator, tendsto_nhdsWithin_nhds, mem_Iic] at key
    specialize key _ Œµpos; obtain ‚ü®Œ¥, Œ¥pos, nb‚ü© := key
    use min Œ¥ (R‚ÇÇ - R‚ÇÅ), lt_min_iff.mpr ‚ü®Œ¥pos, sub_pos.mpr hR‚ÇÇ‚ü©; intro y ly dy
    rw [lt_min_iff] at dy; specialize nb ly dy.1
    rw [dist_eq_norm', Real.norm_of_nonneg (sub_nonneg.mpr ly), sub_lt_sub_iff_left] at dy
    rw [dist_eq_norm, sub_zero, inter_eq_self_of_subset_right (co_subset_oo dy.2 le_rfl),
      integral_indicator measurableSet_co] at nb
    rw [dist_eq_norm']; convert nb
    rw [sub_eq_iff_eq_add', ‚Üê setIntegral_union _ measurableSet_co]; rotate_left
    ¬∑ exact iof.mono_set (oo_subset_oo le_rfl ly)
    ¬∑ exact iof.mono_set (co_subset_oo dy.2 le_rfl)
    ¬∑ simp_rw [disjoint_left, co, oo, mem_setOf, mem_Ico, mem_Ioo, not_and_or, not_le]
      exact fun z mz ‚Ü¶ .inl mz.2
    rw [oo_union_co dy.2 ly]
  -- Obtain a strictly monotone sequence of numbers greater than `R‚ÇÅ` and converging to `R‚ÇÇ`.
  -- By monotone convergence we reduce to showing that the volumes of annuli `co x R R‚ÇÇ`
  -- along this sequence can be arbitrarily small
  obtain ‚ü®u, smu, mu, ttu‚ü© := exists_seq_strictMono_tendsto' hR‚ÇÇ
  suffices Tendsto (fun n ‚Ü¶ volume (co x (u n) R‚ÇÇ)) atTop (nhds 0) by
    rw [ENNReal.tendsto_nhds_zero]; intro Œµ Œµpos
    rw [eventually_nhdsWithin_iff, Metric.eventually_nhds_iff]
    rw [ENNReal.tendsto_atTop_zero] at this
    specialize this _ Œµpos; obtain ‚ü®n, hn‚ü© := this; specialize hn _ le_rfl
    use R‚ÇÇ - u n, sub_pos.mpr (mu n).2; intro y dy ly
    rw [dist_eq_norm', Real.norm_of_nonneg (sub_nonneg.mpr ly), sub_lt_sub_iff_left] at dy
    rw [Function.comp_apply, Measure.restrict_apply measurableSet_co,
      inter_eq_self_of_subset_left (co_subset_oo ((mu n).1.trans dy) le_rfl)]
    exact (measure_mono (co_subset_co dy.le le_rfl)).trans hn
  -- Split the annulus along the `u n`...
  let s (n : ‚Ñï) := co x (u n) (u (n + 1))
  have us (k : ‚Ñï) : ‚ãÉ n, s (k + n) = co x (u k) R‚ÇÇ := by
    ext y; simp_rw [mem_iUnion, s, co, mem_setOf, mem_Ico]; constructor <;> intro h
    ¬∑ obtain ‚ü®n, hn‚ÇÅ, hn‚ÇÇ‚ü© := h
      exact ‚ü®(smu.monotone (Nat.le_add_right ..)).trans hn‚ÇÅ, hn‚ÇÇ.trans (mu (k + n + 1)).2‚ü©
    ¬∑ let T : Set ‚Ñï := {n | dist x y < u (k + n)}
      have neT : T.Nonempty := by
        rw [Metric.tendsto_atTop] at ttu
        specialize ttu (R‚ÇÇ - dist x y) (by linarith only [h.2]); obtain ‚ü®N, hN‚ü© := ttu
        specialize hN (k + N) (Nat.le_add_left ..)
        rw [dist_eq_norm', Real.norm_of_nonneg (by linarith only [(mu (k + N)).2]),
          sub_lt_sub_iff_left] at hN; use N, hN
      have wfT : T.IsWF := IsWF.of_wellFoundedLT T
      use wfT.min neT - 1
      have minT_mem := wfT.min_mem neT; simp_rw [T, mem_setOf] at minT_mem
      have minT_pos : wfT.min neT ‚â† 0 := by
        by_contra! h'; rw [h'] at minT_mem; exact absurd h.1 (not_le.mpr minT_mem)
      nth_rw 2 [‚Üê Nat.add_sub_assoc (by omega)]; rw [Nat.sub_add_cancel (by omega), ‚Üê not_lt]
      refine ‚ü®?_, minT_mem‚ü©; change wfT.min neT - 1 ‚àâ T; contrapose! minT_pos
      replace minT_pos := wfT.min_le neT minT_pos; omega
  have ds (k : ‚Ñï) : Pairwise (Function.onFun Disjoint fun n ‚Ü¶ s (k + n)) := fun i j hn ‚Ü¶ by
    change Disjoint (s (k + i)) (s (k + j))
    wlog hl : i < j generalizing i j; ¬∑ exact (this j i hn.symm (by omega)).symm
    simp_rw [s, disjoint_left, co, mem_setOf, mem_Ico]; intro y my
    rw [not_and_or, not_le]; left
    exact my.2.trans_le (smu.monotone (show k + i + 1 ‚â§ k + j by omega))
  -- ...and appeal to `ENNReal.tendsto_sum_nat_add`
  conv =>
    enter [1, n]; rw [‚Üê us, measure_iUnion (ds n) (fun _ ‚Ü¶ measurableSet_co)]
    enter [1, k]; rw [add_comm]
  specialize us 0; specialize ds 0; simp_rw [zero_add] at us ds
  apply tendsto_sum_nat_add fun n ‚Ü¶ volume (s n)
  rw [‚Üê measure_iUnion ds (fun _ ‚Ü¶ measurableSet_co), us, ‚Üê lt_top_iff_ne_top]
  calc
    _ ‚â§ volume (ball x R‚ÇÇ) := by
      refine measure_mono fun y my ‚Ü¶ ?_; rw [co_eq] at my; exact my.1
    _ < _ := measure_ball_lt_top

/-- The integrand of `carlesonOperatorIntegrand` is integrable over the `R‚ÇÅ, R‚ÇÇ` annulus. -/
lemma integrableOn_coi_inner_annulus (mf : Measurable f) (nf : (‚Äñf ¬∑‚Äñ) ‚â§ 1) (hR‚ÇÅ : 0 < R‚ÇÅ) :
    IntegrableOn (fun y ‚Ü¶ K x y * f y * exp (I * Œ∏ y)) (Annulus.oo x R‚ÇÅ R‚ÇÇ) := by
  simp_rw [mul_assoc]; refine integrableOn_K_mul ?_ _ hR‚ÇÅ fun y my ‚Ü¶ ?_
  ¬∑ refine Integrable.bdd_mul ?_ mf.aestronglyMeasurable.restrict ‚ü®_, nf‚ü©
    apply Measure.integrableOn_of_bounded (M := 1)
    ¬∑ rw [‚Üê lt_top_iff_ne_top]
      calc
        _ ‚â§ volume (ball x R‚ÇÇ) := by
          refine measure_mono fun y my ‚Ü¶ ?_
          rw [Annulus.oo, mem_setOf, mem_Ioo] at my; rw [mem_ball']; exact my.2
        _ < _ := measure_ball_lt_top
    ¬∑ exact ((Complex.measurable_ofReal.comp (by fun_prop)).const_mul I).cexp.aestronglyMeasurable
    ¬∑ refine Eventually.of_forall fun y ‚Ü¶ ?_
      rw [mul_comm, norm_exp_ofReal_mul_I]
  ¬∑ rw [Annulus.oo, mem_setOf, mem_Ioo] at my
    rw [mem_compl_iff, mem_ball', not_lt]; exact my.1.le

lemma rightContinuous_carlesonOperatorIntegrand
    (mf : Measurable f) (nf : (‚Äñf ¬∑‚Äñ) ‚â§ 1) (hR‚ÇÅ : 0 < R‚ÇÅ) :
    ContinuousWithinAt (carlesonOperatorIntegrand K Œ∏ ¬∑ R‚ÇÇ f x) (Ici R‚ÇÅ) R‚ÇÅ :=
  rightContinuous_integral_annulus (integrableOn_coi_inner_annulus mf nf hR‚ÇÅ)

lemma leftContinuous_carlesonOperatorIntegrand
    (mf : Measurable f) (nf : (‚Äñf ¬∑‚Äñ) ‚â§ 1) (hR‚ÇÅ : 0 < R‚ÇÅ) :
    ContinuousWithinAt (carlesonOperatorIntegrand K Œ∏ R‚ÇÅ ¬∑ f x) (Iic R‚ÇÇ) R‚ÇÇ :=
  leftContinuous_integral_annulus (integrableOn_coi_inner_annulus mf nf hR‚ÇÅ)

variable (Œ∏ x) in
/-- Given `0 < R‚ÇÅ < R‚ÇÇ`, move `(R‚ÇÅ, R‚ÇÇ)` to rational `(q‚ÇÅ, q‚ÇÇ)` where `R‚ÇÅ < q‚ÇÅ < q‚ÇÇ < R‚ÇÇ`
and the norm of `carlesonOperatorIntegrand` changes by at most `Œµ`. -/
lemma exists_rat_near_carlesonOperatorIntegrand
    (mf : Measurable f) (nf : (‚Äñf ¬∑‚Äñ) ‚â§ 1) (hR‚ÇÅ : 0 < R‚ÇÅ) (hR‚ÇÇ : R‚ÇÅ < R‚ÇÇ) {Œµ : ‚Ñù} (Œµpos : 0 < Œµ) :
    ‚àÉ q‚ÇÅ q‚ÇÇ : ‚Ñö, R‚ÇÅ < q‚ÇÅ ‚àß q‚ÇÅ < q‚ÇÇ ‚àß q‚ÇÇ < R‚ÇÇ ‚àß
    dist (carlesonOperatorIntegrand K Œ∏ q‚ÇÅ q‚ÇÇ f x)
    (carlesonOperatorIntegrand K Œ∏ R‚ÇÅ R‚ÇÇ f x) < Œµ := by
  -- Shift `R‚ÇÅ` to a larger rational with error less than `Œµ / 2`
  have rcon := @rightContinuous_carlesonOperatorIntegrand _ _ _ _ _ Œ∏ R‚ÇÅ R‚ÇÇ _ x mf nf hR‚ÇÅ
  rw [Metric.continuousWithinAt_iff] at rcon; specialize rcon _ (half_pos Œµpos)
  obtain ‚ü®Œ¥‚ÇÅ, Œ¥‚ÇÅpos, hq‚ÇÅ‚ü© := rcon
  have lt‚ÇÅ : R‚ÇÅ < min (R‚ÇÅ + Œ¥‚ÇÅ) R‚ÇÇ := by rw [lt_min_iff]; constructor <;> linarith
  obtain ‚ü®q‚ÇÅ, lbq‚ÇÅ, ubq‚ÇÅ‚ü© := exists_rat_btwn lt‚ÇÅ
  rw [lt_min_iff, ‚Üê sub_lt_iff_lt_add'] at ubq‚ÇÅ; obtain ‚ü®ubq‚ÇÅ, lR‚ÇÇ‚ü© := ubq‚ÇÅ
  have dq‚ÇÅ : dist ‚Üëq‚ÇÅ R‚ÇÅ < Œ¥‚ÇÅ := by rwa [Real.dist_eq, abs_of_nonneg (sub_nonneg.mpr lbq‚ÇÅ.le)]
  specialize hq‚ÇÅ lbq‚ÇÅ.le dq‚ÇÅ
  -- Shift `R‚ÇÇ` to a smaller rational with error less than `Œµ / 2`
  have q‚ÇÅpos : (0 : ‚Ñù) < q‚ÇÅ := hR‚ÇÅ.trans lbq‚ÇÅ
  have lcon := @leftContinuous_carlesonOperatorIntegrand _ _ _ _ _ Œ∏ q‚ÇÅ R‚ÇÇ _ x mf nf q‚ÇÅpos
  rw [Metric.continuousWithinAt_iff] at lcon; specialize lcon _ (half_pos Œµpos)
  obtain ‚ü®Œ¥‚ÇÇ, Œ¥‚ÇÇpos, hq‚ÇÇ‚ü© := lcon
  have lt‚ÇÇ : max (R‚ÇÇ - Œ¥‚ÇÇ) q‚ÇÅ < R‚ÇÇ := by rw [max_lt_iff]; constructor <;> linarith
  obtain ‚ü®q‚ÇÇ, lbq‚ÇÇ, ubq‚ÇÇ‚ü© := exists_rat_btwn lt‚ÇÇ
  rw [max_lt_iff, sub_lt_comm] at lbq‚ÇÇ; obtain ‚ü®lbq‚ÇÇ, lq‚ü© := lbq‚ÇÇ
  have dq‚ÇÇ : dist ‚Üëq‚ÇÇ R‚ÇÇ < Œ¥‚ÇÇ := by
    rwa [Real.dist_eq, abs_sub_comm, abs_of_nonneg (sub_nonneg.mpr ubq‚ÇÇ.le)]
  specialize hq‚ÇÇ ubq‚ÇÇ.le dq‚ÇÇ
  -- The rest is just the triangle inequality
  use q‚ÇÅ, q‚ÇÇ, lbq‚ÇÅ, Rat.cast_lt.mp lq, ubq‚ÇÇ
  have final_bound := (dist_triangle ..).trans_lt (add_lt_add hq‚ÇÇ hq‚ÇÅ)
  rwa [add_halves] at final_bound

/-- The constant used in the proof of `int-continuous`. -/
irreducible_def C3_0_1 (a : ‚Ñï) (R‚ÇÅ R‚ÇÇ : ‚Ñù‚â•0) : ‚Ñù‚â•0 :=
  2 ^ (a ^ 3) * (2 * R‚ÇÇ / R‚ÇÅ) ^ a

lemma lintegral_inv_vol_le {R‚ÇÅ R‚ÇÇ : ‚Ñù‚â•0} (hR‚ÇÅ : 0 < R‚ÇÅ) (hR‚ÇÇ : R‚ÇÅ < R‚ÇÇ) :
    ‚à´‚Åª y in Annulus.oo x R‚ÇÅ R‚ÇÇ, (vol x y)‚Åª¬π ‚â§ ‚Üë((2 * R‚ÇÇ / R‚ÇÅ) ^ a) := by
  suffices ‚àÄ y ‚àà Annulus.oo x R‚ÇÅ R‚ÇÇ, volume (ball x R‚ÇÇ) / ‚Üë((2 * R‚ÇÇ / R‚ÇÅ) ^ a) ‚â§ vol x y by
    calc
      _ ‚â§ ‚à´‚Åª y in Annulus.oo x R‚ÇÅ R‚ÇÇ, ‚Üë((2 * R‚ÇÇ / R‚ÇÅ) ^ a) / volume (ball x R‚ÇÇ) := by
        refine setLIntegral_mono' Annulus.measurableSet_oo fun y my ‚Ü¶ ?_
        rw [‚Üê ENNReal.inv_div (.inr measure_ball_ne_top)]; swap
        ¬∑ exact .inr (measure_ball_pos _ _ (hR‚ÇÅ.trans hR‚ÇÇ)).ne'
        rw [ENNReal.inv_le_inv]; exact this y my
      _ ‚â§ ‚Üë((2 * R‚ÇÇ / R‚ÇÅ) ^ a) / volume (ball x R‚ÇÇ) * volume (ball x R‚ÇÇ) := by
        rw [setLIntegral_const]; gcongr; intro y my; rw [Annulus.oo_eq] at my; exact my.1
      _ = _ :=
        ENNReal.div_mul_cancel (measure_ball_pos _ _ (hR‚ÇÅ.trans hR‚ÇÇ)).ne' measure_ball_ne_top
  intro y my
  obtain ‚ü®n, _, _‚ü© : ‚àÉ n, R‚ÇÇ ‚â§ 2 ^ n * dist x y ‚àß 2 ^ n ‚â§ 2 * R‚ÇÇ / R‚ÇÅ := by
    have : 1 ‚â§ R‚ÇÇ / R‚ÇÅ := by rw [one_le_div hR‚ÇÅ]; exact hR‚ÇÇ.le
    obtain ‚ü®n, hn‚ÇÅ, hn‚ÇÇ‚ü© := exists_nat_pow_near this one_lt_two; use n + 1; constructor
    ¬∑ rw [div_lt_iff‚ÇÄ hR‚ÇÅ, ‚Üê NNReal.coe_lt_coe, NNReal.coe_mul, NNReal.coe_pow,
        NNReal.coe_ofNat] at hn‚ÇÇ
      rw [Annulus.oo, mem_setOf, mem_Ioo] at my; apply hn‚ÇÇ.le.trans; gcongr; exact my.1.le
    ¬∑ rw [pow_succ', mul_div_assoc]; gcongr
  calc
    _ ‚â§ volume (ball x (2 ^ n * dist x y)) / (2 ^ a) ^ n := by
      rw [‚Üê pow_mul, show (2 : ‚Ñù‚â•0‚àû) = (2 : ‚Ñù‚â•0) by rfl, ‚Üê coe_pow, mul_comm a, pow_mul]; gcongr
    _ ‚â§ _ := by
      apply ENNReal.div_le_of_le_mul'
      convert measure_ball_two_le_same_iterate (Œº := volume) x (dist x y) n; norm_cast

lemma edist_carlesonOperatorIntegrand_le
    {R‚ÇÅ R‚ÇÇ : ‚Ñù‚â•0} (mf : Measurable f) (nf : (‚Äñf ¬∑‚Äñ) ‚â§ 1) (hR‚ÇÅ : 0 < R‚ÇÅ) :
    edist (carlesonOperatorIntegrand K Œ∏ R‚ÇÅ R‚ÇÇ f x) (carlesonOperatorIntegrand K œë R‚ÇÅ R‚ÇÇ f x) ‚â§
    C3_0_1 a R‚ÇÅ R‚ÇÇ * edist_{x, dist o x + R‚ÇÇ} Œ∏ œë := by
  rcases le_or_gt R‚ÇÇ R‚ÇÅ with hR‚ÇÇ | hR‚ÇÇ
  ¬∑ iterate 2 rw [carlesonOperatorIntegrand, Annulus.oo_eq_empty (by simp [hR‚ÇÇ]), setIntegral_empty]
    rw [edist_self]; exact zero_le _
  calc
    _ = ‚Äñ‚à´ y in Annulus.oo x R‚ÇÅ R‚ÇÇ, K x y * f y * (exp (I * Œ∏ y) - exp (I * œë y))‚Äñ‚Çë := by
      rw [edist_eq_enorm_sub, carlesonOperatorIntegrand, carlesonOperatorIntegrand, ‚Üê integral_sub]
      rotate_left
      ¬∑ exact integrableOn_coi_inner_annulus mf nf hR‚ÇÅ
      ¬∑ exact integrableOn_coi_inner_annulus mf nf hR‚ÇÅ
      congr! 3 with y; rw [mul_sub]
    _ ‚â§ ‚à´‚Åª y in Annulus.oo x R‚ÇÅ R‚ÇÇ, ‚ÄñK x y‚Äñ‚Çë * ‚Äñf y‚Äñ‚Çë * ‚Äñexp (I * Œ∏ y) - exp (I * œë y)‚Äñ‚Çë := by
      simp_rw [‚Üê enorm_mul]; exact enorm_integral_le_lintegral_enorm _
    _ ‚â§ ‚à´‚Åª y in Annulus.oo x R‚ÇÅ R‚ÇÇ, C_K a / vol x y * edist_{x, dist o x + R‚ÇÇ} Œ∏ œë := by
      refine setLIntegral_mono' Annulus.measurableSet_oo fun y my ‚Ü¶ ?_
      rw [mul_assoc]; refine mul_le_mul' (enorm_K_le_vol_inv _ _) ?_
      rw [‚Üê one_mul (edist_{x, dist o x + R‚ÇÇ} Œ∏ œë)]; gcongr
      ¬∑ rw [‚Üê enorm_norm, ‚Üê enorm_one (G := ‚Ñù)]; exact Real.enorm_le_enorm (norm_nonneg _) (nf y)
      ¬∑ rw [edist_dist, le_ofReal_iff_toReal_le (by finiteness) dist_nonneg, toReal_enorm]
        calc
          _ = ‚Äñexp (I * (Œ∏ y - œë y - Œ∏ o + œë o : ‚Ñù)) - 1‚Äñ := by
            rw [cancelPt_eq_zero, sub_zero, cancelPt_eq_zero, add_zero, Complex.ofReal_sub,
              ‚Üê mul_one ‚Äñ_ - 1‚Äñ, ‚Üê norm_exp_I_mul_ofReal (œë y), ‚Üê norm_mul, sub_one_mul,
              ‚Üê Complex.exp_add, ‚Üê mul_add, sub_add_cancel]
          _ ‚â§ ‚ÄñŒ∏ y - œë y - Œ∏ o + œë o‚Äñ := norm_exp_I_mul_ofReal_sub_one_le
          _ ‚â§ _ := by
            rw [Annulus.oo, mem_setOf, mem_Ioo] at my
            apply oscillation_le_cdist
            ¬∑ rw [mem_ball']; exact my.2.trans_le (le_add_of_nonneg_left dist_nonneg)
            ¬∑ rw [mem_ball, lt_add_iff_pos_right]; exact hR‚ÇÅ.trans hR‚ÇÇ
    _ = C_K a * edist_{x, dist o x + R‚ÇÇ} Œ∏ œë * ‚à´‚Åª y in Annulus.oo x R‚ÇÅ R‚ÇÇ, (vol x y)‚Åª¬π := by
      simp_rw [ENNReal.div_eq_inv_mul]
      iterate 2 rw [lintegral_mul_const' _ _ (by finiteness)]
      rw [mul_rotate]
    _ ‚â§ C_K a * edist_{x, dist o x + R‚ÇÇ} Œ∏ œë * ‚Üë((2 * R‚ÇÇ / R‚ÇÅ) ^ a) := by
      gcongr; exact lintegral_inv_vol_le hR‚ÇÅ hR‚ÇÇ
    _ = _ := by
      rw [‚Üê mul_rotate, ‚Üê coe_mul, mul_comm (_ ^ _), C3_0_1, C_K, ‚Üê Nat.cast_pow,
        NNReal.rpow_natCast]

lemma dist_carlesonOperatorIntegrand_le
    {R‚ÇÅ R‚ÇÇ : ‚Ñù‚â•0} (mf : Measurable f) (nf : (‚Äñf ¬∑‚Äñ) ‚â§ 1) (hR‚ÇÅ : 0 < R‚ÇÅ) :
    dist (carlesonOperatorIntegrand K Œ∏ R‚ÇÅ R‚ÇÇ f x) (carlesonOperatorIntegrand K œë R‚ÇÅ R‚ÇÇ f x) ‚â§
    C3_0_1 a R‚ÇÅ R‚ÇÇ * dist_{x, dist o x + R‚ÇÇ} Œ∏ œë := by
  rw [‚Üê ofReal_le_ofReal_iff (by positivity), ‚Üê edist_dist, ENNReal.ofReal_mul NNReal.zero_le_coe,
    ofReal_coe_nnreal, ‚Üê edist_dist]
  exact edist_carlesonOperatorIntegrand_le mf nf hR‚ÇÅ

lemma continuous_carlesonOperatorIntegrand (mf : Measurable f) (nf : (‚Äñf ¬∑‚Äñ) ‚â§ 1) (hR‚ÇÅ : 0 < R‚ÇÅ) :
    Continuous (carlesonOperatorIntegrand K ¬∑ R‚ÇÅ R‚ÇÇ f x) := by
  rcases le_or_gt R‚ÇÇ R‚ÇÅ with hR‚ÇÇ | hR‚ÇÇ
  ¬∑ unfold carlesonOperatorIntegrand; rw [Annulus.oo_eq_empty (by simp [hR‚ÇÇ])]
    simp_rw [setIntegral_empty]; exact continuous_const
  lift R‚ÇÅ to ‚Ñù‚â•0 using hR‚ÇÅ.le
  lift R‚ÇÇ to ‚Ñù‚â•0 using (hR‚ÇÅ.trans hR‚ÇÇ).le
  rw [NNReal.coe_pos] at hR‚ÇÅ; rw [NNReal.coe_lt_coe] at hR‚ÇÇ
  have R‚ÇÇpos := hR‚ÇÅ.trans hR‚ÇÇ
  rw [continuous_iff]; intro œë Œµ Œµpos
  let C‚ÇÅ := As (defaultA a) (dist o x + R‚ÇÇ + dist o x)
  have C‚ÇÅpos : 0 < C‚ÇÅ := by unfold C‚ÇÅ As; norm_cast; positivity
  have C‚ÇÇpos : 0 < C3_0_1 a R‚ÇÅ R‚ÇÇ := by rw [C3_0_1]; positivity
  refine ‚ü®Œµ / (C‚ÇÅ * C3_0_1 a R‚ÇÅ R‚ÇÇ), by positivity, fun Œ∏ db ‚Ü¶ ?_‚ü©
  calc
    _ ‚â§ _ := dist_carlesonOperatorIntegrand_le mf nf hR‚ÇÅ
    _ ‚â§ C3_0_1 a R‚ÇÅ R‚ÇÇ * C‚ÇÅ * dist Œ∏ œë := by rw [mul_assoc]; gcongr; apply cdist_le_dist; positivity
    _ < _ := by rwa [‚Üê lt_div_iff‚ÇÄ' (by positivity), mul_comm]

-- not sure if this is the best phrasing
lemma enorm_carlesonOperatorIntegrand_le {R‚ÇÅ R‚ÇÇ : ‚Ñù‚â•0} (nf : (‚Äñf ¬∑‚Äñ) ‚â§ 1) (hR‚ÇÅ : 0 < R‚ÇÅ) :
    ‚ÄñcarlesonOperatorIntegrand K Œ∏ R‚ÇÅ R‚ÇÇ f x‚Äñ‚Çë ‚â§ C3_0_1 a R‚ÇÅ R‚ÇÇ := by
  rcases le_or_gt R‚ÇÇ R‚ÇÅ with hR‚ÇÇ | hR‚ÇÇ
  ¬∑ unfold carlesonOperatorIntegrand; rw [Annulus.oo_eq_empty (by simp [hR‚ÇÇ])]
    rw [setIntegral_empty, enorm_zero]; exact zero_le _
  calc
    _ ‚â§ ‚à´‚Åª y in Annulus.oo x R‚ÇÅ R‚ÇÇ, ‚ÄñK x y‚Äñ‚Çë * ‚Äñf y‚Äñ‚Çë * ‚Äñexp (I * Œ∏ y)‚Äñ‚Çë := by
      simp_rw [‚Üê enorm_mul]; exact enorm_integral_le_lintegral_enorm _
    _ ‚â§ C_K a * ‚à´‚Åª y in Annulus.oo x R‚ÇÅ R‚ÇÇ, (vol x y)‚Åª¬π := by
      rw [‚Üê lintegral_const_mul' _ _ (by finiteness)]; simp_rw [‚Üê div_eq_mul_inv]
      refine setLIntegral_mono' Annulus.measurableSet_oo fun y my ‚Ü¶ ?_
      rw [enorm_exp_I_mul_ofReal, mul_one, ‚Üê mul_one (_ / _)]
      apply mul_le_mul' (enorm_K_le_vol_inv _ _)
      rw [‚Üê enorm_norm, ‚Üê enorm_one (G := ‚Ñù)]; exact Real.enorm_le_enorm (norm_nonneg _) (nf y)
    _ ‚â§ C_K a * ‚Üë((2 * R‚ÇÇ / R‚ÇÅ) ^ a) := by gcongr; exact lintegral_inv_vol_le hR‚ÇÅ hR‚ÇÇ
    _ = _ := by rw [‚Üê coe_mul, C3_0_1, C_K, ‚Üê Nat.cast_pow, NNReal.rpow_natCast]
